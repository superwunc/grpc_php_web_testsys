<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: ScoreStore.proto
//   Date: 2017-04-19 06:39:09

namespace sc\scorestore {

  class GoodType extends \DrSlump\Protobuf\Enum {
    const E_G_Physical = 0;
    const E_G_Virtual = 1;
  }
}
namespace sc\scorestore {

  class OrderState extends \DrSlump\Protobuf\Enum {
    const E_S_Payed = 0;
    const E_S_Dispath = 1;
    const E_S_Done = 2;
  }
}
namespace sc\scorestore {

  class GoodListReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $pageNumber = null;
    
    /**  @var int */
    public $pageSize = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.GoodListReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT32 pageNumber = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "pageNumber";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pageSize = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "pageSize";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\scorestore\GoodListReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\scorestore\GoodListReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <pageNumber> has a value
     *
     * @return boolean
     */
    public function hasPageNumber(){
      return $this->_has(2);
    }
    
    /**
     * Clear <pageNumber> value
     *
     * @return \sc\scorestore\GoodListReq
     */
    public function clearPageNumber(){
      return $this->_clear(2);
    }
    
    /**
     * Get <pageNumber> value
     *
     * @return int
     */
    public function getPageNumber(){
      return $this->_get(2);
    }
    
    /**
     * Set <pageNumber> value
     *
     * @param int $value
     * @return \sc\scorestore\GoodListReq
     */
    public function setPageNumber( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <pageSize> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(3);
    }
    
    /**
     * Clear <pageSize> value
     *
     * @return \sc\scorestore\GoodListReq
     */
    public function clearPageSize(){
      return $this->_clear(3);
    }
    
    /**
     * Get <pageSize> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(3);
    }
    
    /**
     * Set <pageSize> value
     *
     * @param int $value
     * @return \sc\scorestore\GoodListReq
     */
    public function setPageSize( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\scorestore {

  class GoodListRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\scorestore\GoodProto[]  */
    public $goodList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.GoodListRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // REPEATED MESSAGE goodList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "goodList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\scorestore\GoodProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\scorestore\GoodListRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\scorestore\GoodListRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <goodList> has a value
     *
     * @return boolean
     */
    public function hasGoodList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <goodList> value
     *
     * @return \sc\scorestore\GoodListRsp
     */
    public function clearGoodList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <goodList> value
     *
     * @param int $idx
     * @return \sc\scorestore\GoodProto
     */
    public function getGoodList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <goodList> value
     *
     * @param \sc\scorestore\GoodProto $value
     * @return \sc\scorestore\GoodListRsp
     */
    public function setGoodList(\sc\scorestore\GoodProto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <goodList>
     *
     * @return \sc\scorestore\GoodProto[]
     */
    public function getGoodListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <goodList>
     *
     * @param \sc\scorestore\GoodProto $value
     * @return \sc\scorestore\GoodListRsp
     */
    public function addGoodList(\sc\scorestore\GoodProto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sc\scorestore {

  class MetaProto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $key = null;
    
    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.MetaProto');

      // OPTIONAL STRING key = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <key> has a value
     *
     * @return boolean
     */
    public function hasKey(){
      return $this->_has(1);
    }
    
    /**
     * Clear <key> value
     *
     * @return \sc\scorestore\MetaProto
     */
    public function clearKey(){
      return $this->_clear(1);
    }
    
    /**
     * Get <key> value
     *
     * @return string
     */
    public function getKey(){
      return $this->_get(1);
    }
    
    /**
     * Set <key> value
     *
     * @param string $value
     * @return \sc\scorestore\MetaProto
     */
    public function setKey( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \sc\scorestore\MetaProto
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \sc\scorestore\MetaProto
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\scorestore {

  class GoodProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int - \sc\scorestore\GoodType */
    public $type = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $icon = null;
    
    /**  @var string[]  */
    public $img = array();
    
    /**  @var string */
    public $desc = null;
    
    /**  @var \sc\scorestore\MetaProto[]  */
    public $meta = array();
    
    /**  @var int */
    public $total = null;
    
    /**  @var int */
    public $sell = null;
    
    /**  @var int */
    public $left = null;
    
    /**  @var float */
    public $price = null;
    
    /**  @var int */
    public $score = null;
    
    /**  @var string */
    public $ctime = null;
    
    /**  @var string */
    public $deadline = null;
    
    /**  @var boolean */
    public $isExpired = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.GoodProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\scorestore\GoodType';
      $descriptor->addField($f);

      // OPTIONAL STRING title = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING icon = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "icon";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING img = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "img";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING desc = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "desc";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE meta = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "meta";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\scorestore\MetaProto';
      $descriptor->addField($f);

      // OPTIONAL UINT32 total = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "total";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 sell = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "sell";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 left = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "left";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE price = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "price";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 score = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ctime = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "ctime";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING deadline = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "deadline";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isExpired = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "isExpired";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\scorestore\GoodProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \sc\scorestore\GoodType
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \sc\scorestore\GoodType $value
     * @return \sc\scorestore\GoodProto
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(3);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function clearTitle(){
      return $this->_clear(3);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(3);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\scorestore\GoodProto
     */
    public function setTitle( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <icon> has a value
     *
     * @return boolean
     */
    public function hasIcon(){
      return $this->_has(4);
    }
    
    /**
     * Clear <icon> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function clearIcon(){
      return $this->_clear(4);
    }
    
    /**
     * Get <icon> value
     *
     * @return string
     */
    public function getIcon(){
      return $this->_get(4);
    }
    
    /**
     * Set <icon> value
     *
     * @param string $value
     * @return \sc\scorestore\GoodProto
     */
    public function setIcon( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <img> has a value
     *
     * @return boolean
     */
    public function hasImg(){
      return $this->_has(5);
    }
    
    /**
     * Clear <img> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function clearImg(){
      return $this->_clear(5);
    }
    
    /**
     * Get <img> value
     *
     * @param int $idx
     * @return string
     */
    public function getImg($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <img> value
     *
     * @param string $value
     * @return \sc\scorestore\GoodProto
     */
    public function setImg( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <img>
     *
     * @return string[]
     */
    public function getImgList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <img>
     *
     * @param string $value
     * @return \sc\scorestore\GoodProto
     */
    public function addImg( $value){
     return $this->_add(5, $value);
    }
    
    /**
     * Check if <desc> has a value
     *
     * @return boolean
     */
    public function hasDesc(){
      return $this->_has(6);
    }
    
    /**
     * Clear <desc> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function clearDesc(){
      return $this->_clear(6);
    }
    
    /**
     * Get <desc> value
     *
     * @return string
     */
    public function getDesc(){
      return $this->_get(6);
    }
    
    /**
     * Set <desc> value
     *
     * @param string $value
     * @return \sc\scorestore\GoodProto
     */
    public function setDesc( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <meta> has a value
     *
     * @return boolean
     */
    public function hasMeta(){
      return $this->_has(7);
    }
    
    /**
     * Clear <meta> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function clearMeta(){
      return $this->_clear(7);
    }
    
    /**
     * Get <meta> value
     *
     * @param int $idx
     * @return \sc\scorestore\MetaProto
     */
    public function getMeta($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <meta> value
     *
     * @param \sc\scorestore\MetaProto $value
     * @return \sc\scorestore\GoodProto
     */
    public function setMeta(\sc\scorestore\MetaProto $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <meta>
     *
     * @return \sc\scorestore\MetaProto[]
     */
    public function getMetaList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <meta>
     *
     * @param \sc\scorestore\MetaProto $value
     * @return \sc\scorestore\GoodProto
     */
    public function addMeta(\sc\scorestore\MetaProto $value){
     return $this->_add(7, $value);
    }
    
    /**
     * Check if <total> has a value
     *
     * @return boolean
     */
    public function hasTotal(){
      return $this->_has(8);
    }
    
    /**
     * Clear <total> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function clearTotal(){
      return $this->_clear(8);
    }
    
    /**
     * Get <total> value
     *
     * @return int
     */
    public function getTotal(){
      return $this->_get(8);
    }
    
    /**
     * Set <total> value
     *
     * @param int $value
     * @return \sc\scorestore\GoodProto
     */
    public function setTotal( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <sell> has a value
     *
     * @return boolean
     */
    public function hasSell(){
      return $this->_has(9);
    }
    
    /**
     * Clear <sell> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function clearSell(){
      return $this->_clear(9);
    }
    
    /**
     * Get <sell> value
     *
     * @return int
     */
    public function getSell(){
      return $this->_get(9);
    }
    
    /**
     * Set <sell> value
     *
     * @param int $value
     * @return \sc\scorestore\GoodProto
     */
    public function setSell( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <left> has a value
     *
     * @return boolean
     */
    public function hasLeft(){
      return $this->_has(10);
    }
    
    /**
     * Clear <left> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function clearLeft(){
      return $this->_clear(10);
    }
    
    /**
     * Get <left> value
     *
     * @return int
     */
    public function getLeft(){
      return $this->_get(10);
    }
    
    /**
     * Set <left> value
     *
     * @param int $value
     * @return \sc\scorestore\GoodProto
     */
    public function setLeft( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <price> has a value
     *
     * @return boolean
     */
    public function hasPrice(){
      return $this->_has(11);
    }
    
    /**
     * Clear <price> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function clearPrice(){
      return $this->_clear(11);
    }
    
    /**
     * Get <price> value
     *
     * @return float
     */
    public function getPrice(){
      return $this->_get(11);
    }
    
    /**
     * Set <price> value
     *
     * @param float $value
     * @return \sc\scorestore\GoodProto
     */
    public function setPrice( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(12);
    }
    
    /**
     * Clear <score> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function clearScore(){
      return $this->_clear(12);
    }
    
    /**
     * Get <score> value
     *
     * @return int
     */
    public function getScore(){
      return $this->_get(12);
    }
    
    /**
     * Set <score> value
     *
     * @param int $value
     * @return \sc\scorestore\GoodProto
     */
    public function setScore( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <ctime> has a value
     *
     * @return boolean
     */
    public function hasCtime(){
      return $this->_has(13);
    }
    
    /**
     * Clear <ctime> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function clearCtime(){
      return $this->_clear(13);
    }
    
    /**
     * Get <ctime> value
     *
     * @return string
     */
    public function getCtime(){
      return $this->_get(13);
    }
    
    /**
     * Set <ctime> value
     *
     * @param string $value
     * @return \sc\scorestore\GoodProto
     */
    public function setCtime( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <deadline> has a value
     *
     * @return boolean
     */
    public function hasDeadline(){
      return $this->_has(14);
    }
    
    /**
     * Clear <deadline> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function clearDeadline(){
      return $this->_clear(14);
    }
    
    /**
     * Get <deadline> value
     *
     * @return string
     */
    public function getDeadline(){
      return $this->_get(14);
    }
    
    /**
     * Set <deadline> value
     *
     * @param string $value
     * @return \sc\scorestore\GoodProto
     */
    public function setDeadline( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <isExpired> has a value
     *
     * @return boolean
     */
    public function hasIsExpired(){
      return $this->_has(15);
    }
    
    /**
     * Clear <isExpired> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function clearIsExpired(){
      return $this->_clear(15);
    }
    
    /**
     * Get <isExpired> value
     *
     * @return boolean
     */
    public function getIsExpired(){
      return $this->_get(15);
    }
    
    /**
     * Set <isExpired> value
     *
     * @param boolean $value
     * @return \sc\scorestore\GoodProto
     */
    public function setIsExpired( $value){
      return $this->_set(15, $value);
    }
  }
}

namespace sc\scorestore {

  class GoodReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $goodId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.GoodReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 goodId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "goodId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\scorestore\GoodReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\scorestore\GoodReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <goodId> has a value
     *
     * @return boolean
     */
    public function hasGoodId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <goodId> value
     *
     * @return \sc\scorestore\GoodReq
     */
    public function clearGoodId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <goodId> value
     *
     * @return int
     */
    public function getGoodId(){
      return $this->_get(2);
    }
    
    /**
     * Set <goodId> value
     *
     * @param int $value
     * @return \sc\scorestore\GoodReq
     */
    public function setGoodId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\scorestore {

  class GoodRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\scorestore\GoodProto */
    public $good = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.GoodRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE good = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "good";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\scorestore\GoodProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\scorestore\GoodRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\scorestore\GoodRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <good> has a value
     *
     * @return boolean
     */
    public function hasGood(){
      return $this->_has(2);
    }
    
    /**
     * Clear <good> value
     *
     * @return \sc\scorestore\GoodRsp
     */
    public function clearGood(){
      return $this->_clear(2);
    }
    
    /**
     * Get <good> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function getGood(){
      return $this->_get(2);
    }
    
    /**
     * Set <good> value
     *
     * @param \sc\scorestore\GoodProto $value
     * @return \sc\scorestore\GoodRsp
     */
    public function setGood(\sc\scorestore\GoodProto $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\scorestore {

  class ExchangeReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $goodId = null;
    
    /**  @var int */
    public $goodCount = null;
    
    /**  @var string */
    public $guestName = null;
    
    /**  @var string */
    public $mobile = null;
    
    /**  @var string */
    public $address = null;
    
    /**  @var string */
    public $addressCity = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.ExchangeReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 goodId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "goodId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 goodCount = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "goodCount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING guestName = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "guestName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING address = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "address";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING addressCity = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "addressCity";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\scorestore\ExchangeReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\scorestore\ExchangeReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <goodId> has a value
     *
     * @return boolean
     */
    public function hasGoodId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <goodId> value
     *
     * @return \sc\scorestore\ExchangeReq
     */
    public function clearGoodId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <goodId> value
     *
     * @return int
     */
    public function getGoodId(){
      return $this->_get(2);
    }
    
    /**
     * Set <goodId> value
     *
     * @param int $value
     * @return \sc\scorestore\ExchangeReq
     */
    public function setGoodId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <goodCount> has a value
     *
     * @return boolean
     */
    public function hasGoodCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <goodCount> value
     *
     * @return \sc\scorestore\ExchangeReq
     */
    public function clearGoodCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <goodCount> value
     *
     * @return int
     */
    public function getGoodCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <goodCount> value
     *
     * @param int $value
     * @return \sc\scorestore\ExchangeReq
     */
    public function setGoodCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <guestName> has a value
     *
     * @return boolean
     */
    public function hasGuestName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <guestName> value
     *
     * @return \sc\scorestore\ExchangeReq
     */
    public function clearGuestName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <guestName> value
     *
     * @return string
     */
    public function getGuestName(){
      return $this->_get(4);
    }
    
    /**
     * Set <guestName> value
     *
     * @param string $value
     * @return \sc\scorestore\ExchangeReq
     */
    public function setGuestName( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(5);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\scorestore\ExchangeReq
     */
    public function clearMobile(){
      return $this->_clear(5);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(5);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\scorestore\ExchangeReq
     */
    public function setMobile( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <address> has a value
     *
     * @return boolean
     */
    public function hasAddress(){
      return $this->_has(6);
    }
    
    /**
     * Clear <address> value
     *
     * @return \sc\scorestore\ExchangeReq
     */
    public function clearAddress(){
      return $this->_clear(6);
    }
    
    /**
     * Get <address> value
     *
     * @return string
     */
    public function getAddress(){
      return $this->_get(6);
    }
    
    /**
     * Set <address> value
     *
     * @param string $value
     * @return \sc\scorestore\ExchangeReq
     */
    public function setAddress( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <addressCity> has a value
     *
     * @return boolean
     */
    public function hasAddressCity(){
      return $this->_has(7);
    }
    
    /**
     * Clear <addressCity> value
     *
     * @return \sc\scorestore\ExchangeReq
     */
    public function clearAddressCity(){
      return $this->_clear(7);
    }
    
    /**
     * Get <addressCity> value
     *
     * @return string
     */
    public function getAddressCity(){
      return $this->_get(7);
    }
    
    /**
     * Set <addressCity> value
     *
     * @param string $value
     * @return \sc\scorestore\ExchangeReq
     */
    public function setAddressCity( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace sc\scorestore {

  class ExchangeRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\scorestore\OrderProto */
    public $order = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.ExchangeRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "order";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\scorestore\OrderProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\scorestore\ExchangeRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\scorestore\ExchangeRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <order> has a value
     *
     * @return boolean
     */
    public function hasOrder(){
      return $this->_has(2);
    }
    
    /**
     * Clear <order> value
     *
     * @return \sc\scorestore\ExchangeRsp
     */
    public function clearOrder(){
      return $this->_clear(2);
    }
    
    /**
     * Get <order> value
     *
     * @return \sc\scorestore\OrderProto
     */
    public function getOrder(){
      return $this->_get(2);
    }
    
    /**
     * Set <order> value
     *
     * @param \sc\scorestore\OrderProto $value
     * @return \sc\scorestore\ExchangeRsp
     */
    public function setOrder(\sc\scorestore\OrderProto $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\scorestore {

  class OrderProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int - \sc\scorestore\OrderState */
    public $state = null;
    
    /**  @var \sc\scorestore\GoodProto */
    public $good = null;
    
    /**  @var int */
    public $goodCount = null;
    
    /**  @var \sc\scorestore\LogisticsProto */
    public $logistics = null;
    
    /**  @var string */
    public $ctime = null;
    
    /**  @var string */
    public $guestName = null;
    
    /**  @var string */
    public $mobile = null;
    
    /**  @var string */
    public $address = null;
    
    /**  @var string */
    public $addressCity = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.OrderProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM state = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\scorestore\OrderState';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE good = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "good";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\scorestore\GoodProto';
      $descriptor->addField($f);

      // OPTIONAL UINT32 goodCount = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "goodCount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE logistics = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "logistics";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\scorestore\LogisticsProto';
      $descriptor->addField($f);

      // OPTIONAL STRING ctime = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "ctime";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING guestName = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "guestName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING address = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "address";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING addressCity = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "addressCity";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\scorestore\OrderProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\scorestore\OrderProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(2);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\scorestore\OrderProto
     */
    public function clearState(){
      return $this->_clear(2);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \sc\scorestore\OrderState
     */
    public function getState(){
      return $this->_get(2);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \sc\scorestore\OrderState $value
     * @return \sc\scorestore\OrderProto
     */
    public function setState( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <good> has a value
     *
     * @return boolean
     */
    public function hasGood(){
      return $this->_has(3);
    }
    
    /**
     * Clear <good> value
     *
     * @return \sc\scorestore\OrderProto
     */
    public function clearGood(){
      return $this->_clear(3);
    }
    
    /**
     * Get <good> value
     *
     * @return \sc\scorestore\GoodProto
     */
    public function getGood(){
      return $this->_get(3);
    }
    
    /**
     * Set <good> value
     *
     * @param \sc\scorestore\GoodProto $value
     * @return \sc\scorestore\OrderProto
     */
    public function setGood(\sc\scorestore\GoodProto $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <goodCount> has a value
     *
     * @return boolean
     */
    public function hasGoodCount(){
      return $this->_has(4);
    }
    
    /**
     * Clear <goodCount> value
     *
     * @return \sc\scorestore\OrderProto
     */
    public function clearGoodCount(){
      return $this->_clear(4);
    }
    
    /**
     * Get <goodCount> value
     *
     * @return int
     */
    public function getGoodCount(){
      return $this->_get(4);
    }
    
    /**
     * Set <goodCount> value
     *
     * @param int $value
     * @return \sc\scorestore\OrderProto
     */
    public function setGoodCount( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <logistics> has a value
     *
     * @return boolean
     */
    public function hasLogistics(){
      return $this->_has(5);
    }
    
    /**
     * Clear <logistics> value
     *
     * @return \sc\scorestore\OrderProto
     */
    public function clearLogistics(){
      return $this->_clear(5);
    }
    
    /**
     * Get <logistics> value
     *
     * @return \sc\scorestore\LogisticsProto
     */
    public function getLogistics(){
      return $this->_get(5);
    }
    
    /**
     * Set <logistics> value
     *
     * @param \sc\scorestore\LogisticsProto $value
     * @return \sc\scorestore\OrderProto
     */
    public function setLogistics(\sc\scorestore\LogisticsProto $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <ctime> has a value
     *
     * @return boolean
     */
    public function hasCtime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <ctime> value
     *
     * @return \sc\scorestore\OrderProto
     */
    public function clearCtime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <ctime> value
     *
     * @return string
     */
    public function getCtime(){
      return $this->_get(6);
    }
    
    /**
     * Set <ctime> value
     *
     * @param string $value
     * @return \sc\scorestore\OrderProto
     */
    public function setCtime( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <guestName> has a value
     *
     * @return boolean
     */
    public function hasGuestName(){
      return $this->_has(7);
    }
    
    /**
     * Clear <guestName> value
     *
     * @return \sc\scorestore\OrderProto
     */
    public function clearGuestName(){
      return $this->_clear(7);
    }
    
    /**
     * Get <guestName> value
     *
     * @return string
     */
    public function getGuestName(){
      return $this->_get(7);
    }
    
    /**
     * Set <guestName> value
     *
     * @param string $value
     * @return \sc\scorestore\OrderProto
     */
    public function setGuestName( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(8);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\scorestore\OrderProto
     */
    public function clearMobile(){
      return $this->_clear(8);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(8);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\scorestore\OrderProto
     */
    public function setMobile( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <address> has a value
     *
     * @return boolean
     */
    public function hasAddress(){
      return $this->_has(9);
    }
    
    /**
     * Clear <address> value
     *
     * @return \sc\scorestore\OrderProto
     */
    public function clearAddress(){
      return $this->_clear(9);
    }
    
    /**
     * Get <address> value
     *
     * @return string
     */
    public function getAddress(){
      return $this->_get(9);
    }
    
    /**
     * Set <address> value
     *
     * @param string $value
     * @return \sc\scorestore\OrderProto
     */
    public function setAddress( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <addressCity> has a value
     *
     * @return boolean
     */
    public function hasAddressCity(){
      return $this->_has(10);
    }
    
    /**
     * Clear <addressCity> value
     *
     * @return \sc\scorestore\OrderProto
     */
    public function clearAddressCity(){
      return $this->_clear(10);
    }
    
    /**
     * Get <addressCity> value
     *
     * @return string
     */
    public function getAddressCity(){
      return $this->_get(10);
    }
    
    /**
     * Set <addressCity> value
     *
     * @param string $value
     * @return \sc\scorestore\OrderProto
     */
    public function setAddressCity( $value){
      return $this->_set(10, $value);
    }
  }
}

namespace sc\scorestore {

  class LogisticsProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $code = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.LogisticsProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING code = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\scorestore\LogisticsProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\scorestore\LogisticsProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\scorestore\LogisticsProto
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\scorestore\LogisticsProto
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(3);
    }
    
    /**
     * Clear <code> value
     *
     * @return \sc\scorestore\LogisticsProto
     */
    public function clearCode(){
      return $this->_clear(3);
    }
    
    /**
     * Get <code> value
     *
     * @return string
     */
    public function getCode(){
      return $this->_get(3);
    }
    
    /**
     * Set <code> value
     *
     * @param string $value
     * @return \sc\scorestore\LogisticsProto
     */
    public function setCode( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\scorestore {

  class ExchangeListReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.ExchangeListReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\scorestore\ExchangeListReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\scorestore\ExchangeListReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\scorestore {

  class ExchangeListRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\scorestore\OrderProto[]  */
    public $orderList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.ExchangeListRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // REPEATED MESSAGE orderList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "orderList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\scorestore\OrderProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\scorestore\ExchangeListRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\scorestore\ExchangeListRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <orderList> has a value
     *
     * @return boolean
     */
    public function hasOrderList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <orderList> value
     *
     * @return \sc\scorestore\ExchangeListRsp
     */
    public function clearOrderList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <orderList> value
     *
     * @param int $idx
     * @return \sc\scorestore\OrderProto
     */
    public function getOrderList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <orderList> value
     *
     * @param \sc\scorestore\OrderProto $value
     * @return \sc\scorestore\ExchangeListRsp
     */
    public function setOrderList(\sc\scorestore\OrderProto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <orderList>
     *
     * @return \sc\scorestore\OrderProto[]
     */
    public function getOrderListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <orderList>
     *
     * @param \sc\scorestore\OrderProto $value
     * @return \sc\scorestore\ExchangeListRsp
     */
    public function addOrderList(\sc\scorestore\OrderProto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sc\scorestore {

  class GetExchangeReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $orderId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.GetExchangeReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 orderId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "orderId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\scorestore\GetExchangeReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\scorestore\GetExchangeReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <orderId> has a value
     *
     * @return boolean
     */
    public function hasOrderId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <orderId> value
     *
     * @return \sc\scorestore\GetExchangeReq
     */
    public function clearOrderId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <orderId> value
     *
     * @return int
     */
    public function getOrderId(){
      return $this->_get(2);
    }
    
    /**
     * Set <orderId> value
     *
     * @param int $value
     * @return \sc\scorestore\GetExchangeReq
     */
    public function setOrderId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\scorestore {

  class GetExchangeRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\scorestore\OrderProto */
    public $order = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.GetExchangeRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "order";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\scorestore\OrderProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\scorestore\GetExchangeRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\scorestore\GetExchangeRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <order> has a value
     *
     * @return boolean
     */
    public function hasOrder(){
      return $this->_has(2);
    }
    
    /**
     * Clear <order> value
     *
     * @return \sc\scorestore\GetExchangeRsp
     */
    public function clearOrder(){
      return $this->_clear(2);
    }
    
    /**
     * Get <order> value
     *
     * @return \sc\scorestore\OrderProto
     */
    public function getOrder(){
      return $this->_get(2);
    }
    
    /**
     * Set <order> value
     *
     * @param \sc\scorestore\OrderProto $value
     * @return \sc\scorestore\GetExchangeRsp
     */
    public function setOrder(\sc\scorestore\OrderProto $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\scorestore {

  class DelExchangeReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $orderId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.DelExchangeReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 orderId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "orderId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\scorestore\DelExchangeReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\scorestore\DelExchangeReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <orderId> has a value
     *
     * @return boolean
     */
    public function hasOrderId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <orderId> value
     *
     * @return \sc\scorestore\DelExchangeReq
     */
    public function clearOrderId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <orderId> value
     *
     * @return int
     */
    public function getOrderId(){
      return $this->_get(2);
    }
    
    /**
     * Set <orderId> value
     *
     * @param int $value
     * @return \sc\scorestore\DelExchangeReq
     */
    public function setOrderId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\scorestore {

  class DelExchangeRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.DelExchangeRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\scorestore\DelExchangeRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\scorestore\DelExchangeRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\scorestore {

  class GetBannerReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.GetBannerReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\scorestore\GetBannerReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\scorestore\GetBannerReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\scorestore {

  class GetBannerRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var string[]  */
    public $imgUrl = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.scorestore.GetBannerRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // REPEATED STRING imgUrl = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "imgUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\scorestore\GetBannerRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\scorestore\GetBannerRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <imgUrl> has a value
     *
     * @return boolean
     */
    public function hasImgUrl(){
      return $this->_has(2);
    }
    
    /**
     * Clear <imgUrl> value
     *
     * @return \sc\scorestore\GetBannerRsp
     */
    public function clearImgUrl(){
      return $this->_clear(2);
    }
    
    /**
     * Get <imgUrl> value
     *
     * @param int $idx
     * @return string
     */
    public function getImgUrl($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <imgUrl> value
     *
     * @param string $value
     * @return \sc\scorestore\GetBannerRsp
     */
    public function setImgUrl( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <imgUrl>
     *
     * @return string[]
     */
    public function getImgUrlList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <imgUrl>
     *
     * @param string $value
     * @return \sc\scorestore\GetBannerRsp
     */
    public function addImgUrl( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sc\scorestore {

  class ScoreStoreServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param sc\scorestore\GoodListReq $input
     */
    public function GetGoodList(\sc\scorestore\GoodListReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.scorestore.ScoreStoreService/GetGoodList', $argument, '\sc\scorestore\GoodListRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\scorestore\GoodReq $input
     */
    public function GetGood(\sc\scorestore\GoodReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.scorestore.ScoreStoreService/GetGood', $argument, '\sc\scorestore\GoodRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\scorestore\ExchangeReq $input
     */
    public function Exchange(\sc\scorestore\ExchangeReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.scorestore.ScoreStoreService/Exchange', $argument, '\sc\scorestore\ExchangeRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\scorestore\ExchangeListReq $input
     */
    public function GetExchangeRecordList(\sc\scorestore\ExchangeListReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.scorestore.ScoreStoreService/GetExchangeRecordList', $argument, '\sc\scorestore\ExchangeListRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\scorestore\GetExchangeReq $input
     */
    public function GetExchangeRecord(\sc\scorestore\GetExchangeReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.scorestore.ScoreStoreService/GetExchangeRecord', $argument, '\sc\scorestore\GetExchangeRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\scorestore\DelExchangeReq $input
     */
    public function DelExchangeRecord(\sc\scorestore\DelExchangeReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.scorestore.ScoreStoreService/DelExchangeRecord', $argument, '\sc\scorestore\DelExchangeRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\scorestore\GetBannerReq $input
     */
    public function GetBanner(\sc\scorestore\GetBannerReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.scorestore.ScoreStoreService/GetBanner', $argument, '\sc\scorestore\GetBannerRsp::deserialize', $metadata, $options);
    }
  }
}
