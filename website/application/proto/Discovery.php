<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: Discovery.proto
//   Date: 2017-04-19 06:39:08

namespace sc\discovery {

  class CategoryListReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.CategoryListReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\discovery\CategoryListReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\discovery\CategoryListReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\discovery {

  class CategoryListRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\discovery\CategoryProto[]  */
    public $categoryList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.CategoryListRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // REPEATED MESSAGE categoryList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "categoryList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\discovery\CategoryProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\discovery\CategoryListRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\discovery\CategoryListRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <categoryList> has a value
     *
     * @return boolean
     */
    public function hasCategoryList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <categoryList> value
     *
     * @return \sc\discovery\CategoryListRsp
     */
    public function clearCategoryList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <categoryList> value
     *
     * @param int $idx
     * @return \sc\discovery\CategoryProto
     */
    public function getCategoryList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <categoryList> value
     *
     * @param \sc\discovery\CategoryProto $value
     * @return \sc\discovery\CategoryListRsp
     */
    public function setCategoryList(\sc\discovery\CategoryProto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <categoryList>
     *
     * @return \sc\discovery\CategoryProto[]
     */
    public function getCategoryListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <categoryList>
     *
     * @param \sc\discovery\CategoryProto $value
     * @return \sc\discovery\CategoryListRsp
     */
    public function addCategoryList(\sc\discovery\CategoryProto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sc\discovery {

  class ArticleListReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $categoryId = null;
    
    /**  @var int */
    public $pageNumber = null;
    
    /**  @var int */
    public $pageSize = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.ArticleListReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 categoryId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "categoryId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pageNumber = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "pageNumber";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pageSize = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "pageSize";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\discovery\ArticleListReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\discovery\ArticleListReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <categoryId> has a value
     *
     * @return boolean
     */
    public function hasCategoryId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <categoryId> value
     *
     * @return \sc\discovery\ArticleListReq
     */
    public function clearCategoryId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <categoryId> value
     *
     * @return int
     */
    public function getCategoryId(){
      return $this->_get(2);
    }
    
    /**
     * Set <categoryId> value
     *
     * @param int $value
     * @return \sc\discovery\ArticleListReq
     */
    public function setCategoryId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <pageNumber> has a value
     *
     * @return boolean
     */
    public function hasPageNumber(){
      return $this->_has(3);
    }
    
    /**
     * Clear <pageNumber> value
     *
     * @return \sc\discovery\ArticleListReq
     */
    public function clearPageNumber(){
      return $this->_clear(3);
    }
    
    /**
     * Get <pageNumber> value
     *
     * @return int
     */
    public function getPageNumber(){
      return $this->_get(3);
    }
    
    /**
     * Set <pageNumber> value
     *
     * @param int $value
     * @return \sc\discovery\ArticleListReq
     */
    public function setPageNumber( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <pageSize> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(4);
    }
    
    /**
     * Clear <pageSize> value
     *
     * @return \sc\discovery\ArticleListReq
     */
    public function clearPageSize(){
      return $this->_clear(4);
    }
    
    /**
     * Get <pageSize> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(4);
    }
    
    /**
     * Set <pageSize> value
     *
     * @param int $value
     * @return \sc\discovery\ArticleListReq
     */
    public function setPageSize( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace sc\discovery {

  class ArticleListRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\discovery\ArticleProto[]  */
    public $articleList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.ArticleListRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // REPEATED MESSAGE articleList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "articleList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\discovery\ArticleProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\discovery\ArticleListRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\discovery\ArticleListRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <articleList> has a value
     *
     * @return boolean
     */
    public function hasArticleList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <articleList> value
     *
     * @return \sc\discovery\ArticleListRsp
     */
    public function clearArticleList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <articleList> value
     *
     * @param int $idx
     * @return \sc\discovery\ArticleProto
     */
    public function getArticleList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <articleList> value
     *
     * @param \sc\discovery\ArticleProto $value
     * @return \sc\discovery\ArticleListRsp
     */
    public function setArticleList(\sc\discovery\ArticleProto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <articleList>
     *
     * @return \sc\discovery\ArticleProto[]
     */
    public function getArticleListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <articleList>
     *
     * @param \sc\discovery\ArticleProto $value
     * @return \sc\discovery\ArticleListRsp
     */
    public function addArticleList(\sc\discovery\ArticleProto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sc\discovery {

  class ArticleReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $articleId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.ArticleReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 articleId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "articleId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\discovery\ArticleReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\discovery\ArticleReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <articleId> has a value
     *
     * @return boolean
     */
    public function hasArticleId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <articleId> value
     *
     * @return \sc\discovery\ArticleReq
     */
    public function clearArticleId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <articleId> value
     *
     * @return int
     */
    public function getArticleId(){
      return $this->_get(2);
    }
    
    /**
     * Set <articleId> value
     *
     * @param int $value
     * @return \sc\discovery\ArticleReq
     */
    public function setArticleId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\discovery {

  class ArticleRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\discovery\ArticleProto */
    public $article = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.ArticleRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE article = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "article";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\discovery\ArticleProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\discovery\ArticleRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\discovery\ArticleRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <article> has a value
     *
     * @return boolean
     */
    public function hasArticle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <article> value
     *
     * @return \sc\discovery\ArticleRsp
     */
    public function clearArticle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <article> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function getArticle(){
      return $this->_get(2);
    }
    
    /**
     * Set <article> value
     *
     * @param \sc\discovery\ArticleProto $value
     * @return \sc\discovery\ArticleRsp
     */
    public function setArticle(\sc\discovery\ArticleProto $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\discovery {

  class SearchReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var string */
    public $search_content = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.SearchReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL STRING search_content = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "search_content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\discovery\SearchReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\discovery\SearchReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <search_content> has a value
     *
     * @return boolean
     */
    public function hasSearchContent(){
      return $this->_has(2);
    }
    
    /**
     * Clear <search_content> value
     *
     * @return \sc\discovery\SearchReq
     */
    public function clearSearchContent(){
      return $this->_clear(2);
    }
    
    /**
     * Get <search_content> value
     *
     * @return string
     */
    public function getSearchContent(){
      return $this->_get(2);
    }
    
    /**
     * Set <search_content> value
     *
     * @param string $value
     * @return \sc\discovery\SearchReq
     */
    public function setSearchContent( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\discovery {

  class ZanReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $articleId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.ZanReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 articleId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "articleId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\discovery\ZanReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\discovery\ZanReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <articleId> has a value
     *
     * @return boolean
     */
    public function hasArticleId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <articleId> value
     *
     * @return \sc\discovery\ZanReq
     */
    public function clearArticleId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <articleId> value
     *
     * @return int
     */
    public function getArticleId(){
      return $this->_get(2);
    }
    
    /**
     * Set <articleId> value
     *
     * @param int $value
     * @return \sc\discovery\ZanReq
     */
    public function setArticleId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\discovery {

  class ZanRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.ZanRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\discovery\ZanRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\discovery\ZanRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\discovery {

  class FavorityReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $articleId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.FavorityReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 articleId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "articleId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\discovery\FavorityReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\discovery\FavorityReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <articleId> has a value
     *
     * @return boolean
     */
    public function hasArticleId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <articleId> value
     *
     * @return \sc\discovery\FavorityReq
     */
    public function clearArticleId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <articleId> value
     *
     * @return int
     */
    public function getArticleId(){
      return $this->_get(2);
    }
    
    /**
     * Set <articleId> value
     *
     * @param int $value
     * @return \sc\discovery\FavorityReq
     */
    public function setArticleId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\discovery {

  class FavorityRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.FavorityRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\discovery\FavorityRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\discovery\FavorityRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\discovery {

  class FavorityListReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.FavorityListReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\discovery\FavorityListReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\discovery\FavorityListReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\discovery {

  class CommentReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $articleId = null;
    
    /**  @var string */
    public $content = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.CommentReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 articleId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "articleId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING content = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\discovery\CommentReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\discovery\CommentReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <articleId> has a value
     *
     * @return boolean
     */
    public function hasArticleId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <articleId> value
     *
     * @return \sc\discovery\CommentReq
     */
    public function clearArticleId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <articleId> value
     *
     * @return int
     */
    public function getArticleId(){
      return $this->_get(2);
    }
    
    /**
     * Set <articleId> value
     *
     * @param int $value
     * @return \sc\discovery\CommentReq
     */
    public function setArticleId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(3);
    }
    
    /**
     * Clear <content> value
     *
     * @return \sc\discovery\CommentReq
     */
    public function clearContent(){
      return $this->_clear(3);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(3);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \sc\discovery\CommentReq
     */
    public function setContent( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\discovery {

  class CommentRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.CommentRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\discovery\CommentRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\discovery\CommentRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\discovery {

  class CommentListReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $articleId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.CommentListReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 articleId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "articleId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\discovery\CommentListReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\discovery\CommentListReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <articleId> has a value
     *
     * @return boolean
     */
    public function hasArticleId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <articleId> value
     *
     * @return \sc\discovery\CommentListReq
     */
    public function clearArticleId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <articleId> value
     *
     * @return int
     */
    public function getArticleId(){
      return $this->_get(2);
    }
    
    /**
     * Set <articleId> value
     *
     * @param int $value
     * @return \sc\discovery\CommentListReq
     */
    public function setArticleId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\discovery {

  class CommentListRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\discovery\CommentProto[]  */
    public $commentList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.CommentListRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // REPEATED MESSAGE commentList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "commentList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\discovery\CommentProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\discovery\CommentListRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\discovery\CommentListRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <commentList> has a value
     *
     * @return boolean
     */
    public function hasCommentList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <commentList> value
     *
     * @return \sc\discovery\CommentListRsp
     */
    public function clearCommentList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <commentList> value
     *
     * @param int $idx
     * @return \sc\discovery\CommentProto
     */
    public function getCommentList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <commentList> value
     *
     * @param \sc\discovery\CommentProto $value
     * @return \sc\discovery\CommentListRsp
     */
    public function setCommentList(\sc\discovery\CommentProto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <commentList>
     *
     * @return \sc\discovery\CommentProto[]
     */
    public function getCommentListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <commentList>
     *
     * @param \sc\discovery\CommentProto $value
     * @return \sc\discovery\CommentListRsp
     */
    public function addCommentList(\sc\discovery\CommentProto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sc\discovery {

  class ArticleProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $note = null;
    
    /**  @var string */
    public $content = null;
    
    /**  @var \sc\discovery\UserProto */
    public $author = null;
    
    /**  @var \sc\discovery\CategoryProto[]  */
    public $categoryList = array();
    
    /**  @var string */
    public $imageUrl = null;
    
    /**  @var \sc\discovery\GoodsProto */
    public $goods = null;
    
    /**  @var \sc\discovery\StoreProto */
    public $store = null;
    
    /**  @var \sc\discovery\ZanProto[]  */
    public $zanList = array();
    
    /**  @var int */
    public $viewCount = null;
    
    /**  @var int */
    public $zanCount = null;
    
    /**  @var int */
    public $commentCount = null;
    
    /**  @var boolean */
    public $isFav = null;
    
    /**  @var boolean */
    public $isZan = null;
    
    /**  @var boolean */
    public $isHot = null;
    
    /**  @var string */
    public $date = null;
    
    /**  @var string */
    public $sourceUrl = null;
    
    /**  @var string */
    public $shareUrl = null;
    
    /**  @var int */
    public $publishedSeconds = null;
    
    /**  @var boolean */
    public $isOriginal = null;
    
    /**  @var int */
    public $clickCount = null;
    
    /**  @var boolean */
    public $enable = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.ArticleProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING note = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "note";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING content = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE author = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "author";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\discovery\UserProto';
      $descriptor->addField($f);

      // REPEATED MESSAGE categoryList = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "categoryList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\discovery\CategoryProto';
      $descriptor->addField($f);

      // OPTIONAL STRING imageUrl = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "imageUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE goods = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "goods";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\discovery\GoodsProto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE store = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "store";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\discovery\StoreProto';
      $descriptor->addField($f);

      // REPEATED MESSAGE zanList = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "zanList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\discovery\ZanProto';
      $descriptor->addField($f);

      // OPTIONAL UINT32 viewCount = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "viewCount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 zanCount = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "zanCount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 commentCount = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "commentCount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isFav = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "isFav";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isZan = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "isZan";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isHot = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "isHot";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING date = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "date";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sourceUrl = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "sourceUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING shareUrl = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "shareUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 publishedSeconds = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "publishedSeconds";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isOriginal = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "isOriginal";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 clickCount = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "clickCount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL enable = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "enable";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\discovery\ArticleProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\discovery\ArticleProto
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <note> has a value
     *
     * @return boolean
     */
    public function hasNote(){
      return $this->_has(3);
    }
    
    /**
     * Clear <note> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearNote(){
      return $this->_clear(3);
    }
    
    /**
     * Get <note> value
     *
     * @return string
     */
    public function getNote(){
      return $this->_get(3);
    }
    
    /**
     * Set <note> value
     *
     * @param string $value
     * @return \sc\discovery\ArticleProto
     */
    public function setNote( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(4);
    }
    
    /**
     * Clear <content> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearContent(){
      return $this->_clear(4);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(4);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \sc\discovery\ArticleProto
     */
    public function setContent( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <author> has a value
     *
     * @return boolean
     */
    public function hasAuthor(){
      return $this->_has(5);
    }
    
    /**
     * Clear <author> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearAuthor(){
      return $this->_clear(5);
    }
    
    /**
     * Get <author> value
     *
     * @return \sc\discovery\UserProto
     */
    public function getAuthor(){
      return $this->_get(5);
    }
    
    /**
     * Set <author> value
     *
     * @param \sc\discovery\UserProto $value
     * @return \sc\discovery\ArticleProto
     */
    public function setAuthor(\sc\discovery\UserProto $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <categoryList> has a value
     *
     * @return boolean
     */
    public function hasCategoryList(){
      return $this->_has(6);
    }
    
    /**
     * Clear <categoryList> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearCategoryList(){
      return $this->_clear(6);
    }
    
    /**
     * Get <categoryList> value
     *
     * @param int $idx
     * @return \sc\discovery\CategoryProto
     */
    public function getCategoryList($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <categoryList> value
     *
     * @param \sc\discovery\CategoryProto $value
     * @return \sc\discovery\ArticleProto
     */
    public function setCategoryList(\sc\discovery\CategoryProto $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <categoryList>
     *
     * @return \sc\discovery\CategoryProto[]
     */
    public function getCategoryListList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <categoryList>
     *
     * @param \sc\discovery\CategoryProto $value
     * @return \sc\discovery\ArticleProto
     */
    public function addCategoryList(\sc\discovery\CategoryProto $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <imageUrl> has a value
     *
     * @return boolean
     */
    public function hasImageUrl(){
      return $this->_has(7);
    }
    
    /**
     * Clear <imageUrl> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearImageUrl(){
      return $this->_clear(7);
    }
    
    /**
     * Get <imageUrl> value
     *
     * @return string
     */
    public function getImageUrl(){
      return $this->_get(7);
    }
    
    /**
     * Set <imageUrl> value
     *
     * @param string $value
     * @return \sc\discovery\ArticleProto
     */
    public function setImageUrl( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <goods> has a value
     *
     * @return boolean
     */
    public function hasGoods(){
      return $this->_has(8);
    }
    
    /**
     * Clear <goods> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearGoods(){
      return $this->_clear(8);
    }
    
    /**
     * Get <goods> value
     *
     * @return \sc\discovery\GoodsProto
     */
    public function getGoods(){
      return $this->_get(8);
    }
    
    /**
     * Set <goods> value
     *
     * @param \sc\discovery\GoodsProto $value
     * @return \sc\discovery\ArticleProto
     */
    public function setGoods(\sc\discovery\GoodsProto $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <store> has a value
     *
     * @return boolean
     */
    public function hasStore(){
      return $this->_has(9);
    }
    
    /**
     * Clear <store> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearStore(){
      return $this->_clear(9);
    }
    
    /**
     * Get <store> value
     *
     * @return \sc\discovery\StoreProto
     */
    public function getStore(){
      return $this->_get(9);
    }
    
    /**
     * Set <store> value
     *
     * @param \sc\discovery\StoreProto $value
     * @return \sc\discovery\ArticleProto
     */
    public function setStore(\sc\discovery\StoreProto $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <zanList> has a value
     *
     * @return boolean
     */
    public function hasZanList(){
      return $this->_has(10);
    }
    
    /**
     * Clear <zanList> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearZanList(){
      return $this->_clear(10);
    }
    
    /**
     * Get <zanList> value
     *
     * @param int $idx
     * @return \sc\discovery\ZanProto
     */
    public function getZanList($idx = NULL){
      return $this->_get(10, $idx);
    }
    
    /**
     * Set <zanList> value
     *
     * @param \sc\discovery\ZanProto $value
     * @return \sc\discovery\ArticleProto
     */
    public function setZanList(\sc\discovery\ZanProto $value, $idx = NULL){
      return $this->_set(10, $value, $idx);
    }
    
    /**
     * Get all elements of <zanList>
     *
     * @return \sc\discovery\ZanProto[]
     */
    public function getZanListList(){
     return $this->_get(10);
    }
    
    /**
     * Add a new element to <zanList>
     *
     * @param \sc\discovery\ZanProto $value
     * @return \sc\discovery\ArticleProto
     */
    public function addZanList(\sc\discovery\ZanProto $value){
     return $this->_add(10, $value);
    }
    
    /**
     * Check if <viewCount> has a value
     *
     * @return boolean
     */
    public function hasViewCount(){
      return $this->_has(11);
    }
    
    /**
     * Clear <viewCount> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearViewCount(){
      return $this->_clear(11);
    }
    
    /**
     * Get <viewCount> value
     *
     * @return int
     */
    public function getViewCount(){
      return $this->_get(11);
    }
    
    /**
     * Set <viewCount> value
     *
     * @param int $value
     * @return \sc\discovery\ArticleProto
     */
    public function setViewCount( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <zanCount> has a value
     *
     * @return boolean
     */
    public function hasZanCount(){
      return $this->_has(12);
    }
    
    /**
     * Clear <zanCount> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearZanCount(){
      return $this->_clear(12);
    }
    
    /**
     * Get <zanCount> value
     *
     * @return int
     */
    public function getZanCount(){
      return $this->_get(12);
    }
    
    /**
     * Set <zanCount> value
     *
     * @param int $value
     * @return \sc\discovery\ArticleProto
     */
    public function setZanCount( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <commentCount> has a value
     *
     * @return boolean
     */
    public function hasCommentCount(){
      return $this->_has(13);
    }
    
    /**
     * Clear <commentCount> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearCommentCount(){
      return $this->_clear(13);
    }
    
    /**
     * Get <commentCount> value
     *
     * @return int
     */
    public function getCommentCount(){
      return $this->_get(13);
    }
    
    /**
     * Set <commentCount> value
     *
     * @param int $value
     * @return \sc\discovery\ArticleProto
     */
    public function setCommentCount( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <isFav> has a value
     *
     * @return boolean
     */
    public function hasIsFav(){
      return $this->_has(14);
    }
    
    /**
     * Clear <isFav> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearIsFav(){
      return $this->_clear(14);
    }
    
    /**
     * Get <isFav> value
     *
     * @return boolean
     */
    public function getIsFav(){
      return $this->_get(14);
    }
    
    /**
     * Set <isFav> value
     *
     * @param boolean $value
     * @return \sc\discovery\ArticleProto
     */
    public function setIsFav( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <isZan> has a value
     *
     * @return boolean
     */
    public function hasIsZan(){
      return $this->_has(15);
    }
    
    /**
     * Clear <isZan> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearIsZan(){
      return $this->_clear(15);
    }
    
    /**
     * Get <isZan> value
     *
     * @return boolean
     */
    public function getIsZan(){
      return $this->_get(15);
    }
    
    /**
     * Set <isZan> value
     *
     * @param boolean $value
     * @return \sc\discovery\ArticleProto
     */
    public function setIsZan( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <isHot> has a value
     *
     * @return boolean
     */
    public function hasIsHot(){
      return $this->_has(16);
    }
    
    /**
     * Clear <isHot> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearIsHot(){
      return $this->_clear(16);
    }
    
    /**
     * Get <isHot> value
     *
     * @return boolean
     */
    public function getIsHot(){
      return $this->_get(16);
    }
    
    /**
     * Set <isHot> value
     *
     * @param boolean $value
     * @return \sc\discovery\ArticleProto
     */
    public function setIsHot( $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <date> has a value
     *
     * @return boolean
     */
    public function hasDate(){
      return $this->_has(17);
    }
    
    /**
     * Clear <date> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearDate(){
      return $this->_clear(17);
    }
    
    /**
     * Get <date> value
     *
     * @return string
     */
    public function getDate(){
      return $this->_get(17);
    }
    
    /**
     * Set <date> value
     *
     * @param string $value
     * @return \sc\discovery\ArticleProto
     */
    public function setDate( $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <sourceUrl> has a value
     *
     * @return boolean
     */
    public function hasSourceUrl(){
      return $this->_has(18);
    }
    
    /**
     * Clear <sourceUrl> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearSourceUrl(){
      return $this->_clear(18);
    }
    
    /**
     * Get <sourceUrl> value
     *
     * @return string
     */
    public function getSourceUrl(){
      return $this->_get(18);
    }
    
    /**
     * Set <sourceUrl> value
     *
     * @param string $value
     * @return \sc\discovery\ArticleProto
     */
    public function setSourceUrl( $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <shareUrl> has a value
     *
     * @return boolean
     */
    public function hasShareUrl(){
      return $this->_has(19);
    }
    
    /**
     * Clear <shareUrl> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearShareUrl(){
      return $this->_clear(19);
    }
    
    /**
     * Get <shareUrl> value
     *
     * @return string
     */
    public function getShareUrl(){
      return $this->_get(19);
    }
    
    /**
     * Set <shareUrl> value
     *
     * @param string $value
     * @return \sc\discovery\ArticleProto
     */
    public function setShareUrl( $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <publishedSeconds> has a value
     *
     * @return boolean
     */
    public function hasPublishedSeconds(){
      return $this->_has(20);
    }
    
    /**
     * Clear <publishedSeconds> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearPublishedSeconds(){
      return $this->_clear(20);
    }
    
    /**
     * Get <publishedSeconds> value
     *
     * @return int
     */
    public function getPublishedSeconds(){
      return $this->_get(20);
    }
    
    /**
     * Set <publishedSeconds> value
     *
     * @param int $value
     * @return \sc\discovery\ArticleProto
     */
    public function setPublishedSeconds( $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <isOriginal> has a value
     *
     * @return boolean
     */
    public function hasIsOriginal(){
      return $this->_has(21);
    }
    
    /**
     * Clear <isOriginal> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearIsOriginal(){
      return $this->_clear(21);
    }
    
    /**
     * Get <isOriginal> value
     *
     * @return boolean
     */
    public function getIsOriginal(){
      return $this->_get(21);
    }
    
    /**
     * Set <isOriginal> value
     *
     * @param boolean $value
     * @return \sc\discovery\ArticleProto
     */
    public function setIsOriginal( $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <clickCount> has a value
     *
     * @return boolean
     */
    public function hasClickCount(){
      return $this->_has(22);
    }
    
    /**
     * Clear <clickCount> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearClickCount(){
      return $this->_clear(22);
    }
    
    /**
     * Get <clickCount> value
     *
     * @return int
     */
    public function getClickCount(){
      return $this->_get(22);
    }
    
    /**
     * Set <clickCount> value
     *
     * @param int $value
     * @return \sc\discovery\ArticleProto
     */
    public function setClickCount( $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <enable> has a value
     *
     * @return boolean
     */
    public function hasEnable(){
      return $this->_has(23);
    }
    
    /**
     * Clear <enable> value
     *
     * @return \sc\discovery\ArticleProto
     */
    public function clearEnable(){
      return $this->_clear(23);
    }
    
    /**
     * Get <enable> value
     *
     * @return boolean
     */
    public function getEnable(){
      return $this->_get(23);
    }
    
    /**
     * Set <enable> value
     *
     * @param boolean $value
     * @return \sc\discovery\ArticleProto
     */
    public function setEnable( $value){
      return $this->_set(23, $value);
    }
  }
}

namespace sc\discovery {

  class UserProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $mobile = null;
    
    /**  @var string */
    public $avaterUrl = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.UserProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING avaterUrl = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "avaterUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\discovery\UserProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\discovery\UserProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <name> value
     *
     * @return \sc\discovery\UserProto
     */
    public function clearName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(2);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \sc\discovery\UserProto
     */
    public function setName( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(3);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\discovery\UserProto
     */
    public function clearMobile(){
      return $this->_clear(3);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(3);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\discovery\UserProto
     */
    public function setMobile( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <avaterUrl> has a value
     *
     * @return boolean
     */
    public function hasAvaterUrl(){
      return $this->_has(4);
    }
    
    /**
     * Clear <avaterUrl> value
     *
     * @return \sc\discovery\UserProto
     */
    public function clearAvaterUrl(){
      return $this->_clear(4);
    }
    
    /**
     * Get <avaterUrl> value
     *
     * @return string
     */
    public function getAvaterUrl(){
      return $this->_get(4);
    }
    
    /**
     * Set <avaterUrl> value
     *
     * @param string $value
     * @return \sc\discovery\UserProto
     */
    public function setAvaterUrl( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace sc\discovery {

  class CategoryProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $title = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.CategoryProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\discovery\CategoryProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\discovery\CategoryProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\discovery\CategoryProto
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\discovery\CategoryProto
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\discovery {

  class GoodsProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $desc = null;
    
    /**  @var string */
    public $url = null;
    
    /**  @var string */
    public $price = null;
    
    /**  @var string */
    public $logo = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.GoodsProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING desc = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "desc";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING url = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING price = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "price";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING logo = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "logo";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\discovery\GoodsProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\discovery\GoodsProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\discovery\GoodsProto
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\discovery\GoodsProto
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <desc> has a value
     *
     * @return boolean
     */
    public function hasDesc(){
      return $this->_has(3);
    }
    
    /**
     * Clear <desc> value
     *
     * @return \sc\discovery\GoodsProto
     */
    public function clearDesc(){
      return $this->_clear(3);
    }
    
    /**
     * Get <desc> value
     *
     * @return string
     */
    public function getDesc(){
      return $this->_get(3);
    }
    
    /**
     * Set <desc> value
     *
     * @param string $value
     * @return \sc\discovery\GoodsProto
     */
    public function setDesc( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(4);
    }
    
    /**
     * Clear <url> value
     *
     * @return \sc\discovery\GoodsProto
     */
    public function clearUrl(){
      return $this->_clear(4);
    }
    
    /**
     * Get <url> value
     *
     * @return string
     */
    public function getUrl(){
      return $this->_get(4);
    }
    
    /**
     * Set <url> value
     *
     * @param string $value
     * @return \sc\discovery\GoodsProto
     */
    public function setUrl( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <price> has a value
     *
     * @return boolean
     */
    public function hasPrice(){
      return $this->_has(5);
    }
    
    /**
     * Clear <price> value
     *
     * @return \sc\discovery\GoodsProto
     */
    public function clearPrice(){
      return $this->_clear(5);
    }
    
    /**
     * Get <price> value
     *
     * @return string
     */
    public function getPrice(){
      return $this->_get(5);
    }
    
    /**
     * Set <price> value
     *
     * @param string $value
     * @return \sc\discovery\GoodsProto
     */
    public function setPrice( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <logo> has a value
     *
     * @return boolean
     */
    public function hasLogo(){
      return $this->_has(6);
    }
    
    /**
     * Clear <logo> value
     *
     * @return \sc\discovery\GoodsProto
     */
    public function clearLogo(){
      return $this->_clear(6);
    }
    
    /**
     * Get <logo> value
     *
     * @return string
     */
    public function getLogo(){
      return $this->_get(6);
    }
    
    /**
     * Set <logo> value
     *
     * @param string $value
     * @return \sc\discovery\GoodsProto
     */
    public function setLogo( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace sc\discovery {

  class StoreProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $telphone = null;
    
    /**  @var string */
    public $address = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.StoreProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING telphone = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "telphone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING address = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "address";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\discovery\StoreProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\discovery\StoreProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\discovery\StoreProto
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\discovery\StoreProto
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <telphone> has a value
     *
     * @return boolean
     */
    public function hasTelphone(){
      return $this->_has(3);
    }
    
    /**
     * Clear <telphone> value
     *
     * @return \sc\discovery\StoreProto
     */
    public function clearTelphone(){
      return $this->_clear(3);
    }
    
    /**
     * Get <telphone> value
     *
     * @return string
     */
    public function getTelphone(){
      return $this->_get(3);
    }
    
    /**
     * Set <telphone> value
     *
     * @param string $value
     * @return \sc\discovery\StoreProto
     */
    public function setTelphone( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <address> has a value
     *
     * @return boolean
     */
    public function hasAddress(){
      return $this->_has(4);
    }
    
    /**
     * Clear <address> value
     *
     * @return \sc\discovery\StoreProto
     */
    public function clearAddress(){
      return $this->_clear(4);
    }
    
    /**
     * Get <address> value
     *
     * @return string
     */
    public function getAddress(){
      return $this->_get(4);
    }
    
    /**
     * Set <address> value
     *
     * @param string $value
     * @return \sc\discovery\StoreProto
     */
    public function setAddress( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace sc\discovery {

  class ZanProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $avaterUrl = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.ZanProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING avaterUrl = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "avaterUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\discovery\ZanProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\discovery\ZanProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <avaterUrl> has a value
     *
     * @return boolean
     */
    public function hasAvaterUrl(){
      return $this->_has(2);
    }
    
    /**
     * Clear <avaterUrl> value
     *
     * @return \sc\discovery\ZanProto
     */
    public function clearAvaterUrl(){
      return $this->_clear(2);
    }
    
    /**
     * Get <avaterUrl> value
     *
     * @return string
     */
    public function getAvaterUrl(){
      return $this->_get(2);
    }
    
    /**
     * Set <avaterUrl> value
     *
     * @param string $value
     * @return \sc\discovery\ZanProto
     */
    public function setAvaterUrl( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\discovery {

  class CommentProto extends \DrSlump\Protobuf\Message {

    /**  @var \sc\discovery\UserProto */
    public $user = null;
    
    /**  @var string */
    public $comment = null;
    
    /**  @var string */
    public $ctime = null;
    
    /**  @var int */
    public $publishedSeconds = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.CommentProto');

      // OPTIONAL MESSAGE user = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "user";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\discovery\UserProto';
      $descriptor->addField($f);

      // OPTIONAL STRING comment = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "comment";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ctime = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ctime";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 publishedSeconds = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "publishedSeconds";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <user> has a value
     *
     * @return boolean
     */
    public function hasUser(){
      return $this->_has(1);
    }
    
    /**
     * Clear <user> value
     *
     * @return \sc\discovery\CommentProto
     */
    public function clearUser(){
      return $this->_clear(1);
    }
    
    /**
     * Get <user> value
     *
     * @return \sc\discovery\UserProto
     */
    public function getUser(){
      return $this->_get(1);
    }
    
    /**
     * Set <user> value
     *
     * @param \sc\discovery\UserProto $value
     * @return \sc\discovery\CommentProto
     */
    public function setUser(\sc\discovery\UserProto $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <comment> has a value
     *
     * @return boolean
     */
    public function hasComment(){
      return $this->_has(2);
    }
    
    /**
     * Clear <comment> value
     *
     * @return \sc\discovery\CommentProto
     */
    public function clearComment(){
      return $this->_clear(2);
    }
    
    /**
     * Get <comment> value
     *
     * @return string
     */
    public function getComment(){
      return $this->_get(2);
    }
    
    /**
     * Set <comment> value
     *
     * @param string $value
     * @return \sc\discovery\CommentProto
     */
    public function setComment( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ctime> has a value
     *
     * @return boolean
     */
    public function hasCtime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ctime> value
     *
     * @return \sc\discovery\CommentProto
     */
    public function clearCtime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ctime> value
     *
     * @return string
     */
    public function getCtime(){
      return $this->_get(3);
    }
    
    /**
     * Set <ctime> value
     *
     * @param string $value
     * @return \sc\discovery\CommentProto
     */
    public function setCtime( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <publishedSeconds> has a value
     *
     * @return boolean
     */
    public function hasPublishedSeconds(){
      return $this->_has(4);
    }
    
    /**
     * Clear <publishedSeconds> value
     *
     * @return \sc\discovery\CommentProto
     */
    public function clearPublishedSeconds(){
      return $this->_clear(4);
    }
    
    /**
     * Get <publishedSeconds> value
     *
     * @return int
     */
    public function getPublishedSeconds(){
      return $this->_get(4);
    }
    
    /**
     * Set <publishedSeconds> value
     *
     * @param int $value
     * @return \sc\discovery\CommentProto
     */
    public function setPublishedSeconds( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace sc\discovery {

  class HotWordReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.HotWordReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\discovery\HotWordReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\discovery\HotWordReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\discovery {

  class HotWordRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var string[]  */
    public $word = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.HotWordRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // REPEATED STRING word = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "word";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\discovery\HotWordRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\discovery\HotWordRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <word> has a value
     *
     * @return boolean
     */
    public function hasWord(){
      return $this->_has(2);
    }
    
    /**
     * Clear <word> value
     *
     * @return \sc\discovery\HotWordRsp
     */
    public function clearWord(){
      return $this->_clear(2);
    }
    
    /**
     * Get <word> value
     *
     * @param int $idx
     * @return string
     */
    public function getWord($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <word> value
     *
     * @param string $value
     * @return \sc\discovery\HotWordRsp
     */
    public function setWord( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <word>
     *
     * @return string[]
     */
    public function getWordList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <word>
     *
     * @param string $value
     * @return \sc\discovery\HotWordRsp
     */
    public function addWord( $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sc\discovery {

  class clickReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $articleId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.clickReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 articleId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "articleId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\discovery\clickReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\discovery\clickReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <articleId> has a value
     *
     * @return boolean
     */
    public function hasArticleId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <articleId> value
     *
     * @return \sc\discovery\clickReq
     */
    public function clearArticleId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <articleId> value
     *
     * @return int
     */
    public function getArticleId(){
      return $this->_get(2);
    }
    
    /**
     * Set <articleId> value
     *
     * @param int $value
     * @return \sc\discovery\clickReq
     */
    public function setArticleId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\discovery {

  class clickRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.discovery.clickRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\discovery\clickRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\discovery\clickRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\discovery {

  class DiscoveryServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param sc\discovery\CategoryListReq $input
     */
    public function getCategoryList(\sc\discovery\CategoryListReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.discovery.DiscoveryService/getCategoryList', $argument, '\sc\discovery\CategoryListRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\discovery\ArticleListReq $input
     */
    public function getArticleList(\sc\discovery\ArticleListReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.discovery.DiscoveryService/getArticleList', $argument, '\sc\discovery\ArticleListRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\discovery\ArticleReq $input
     */
    public function getArticle(\sc\discovery\ArticleReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.discovery.DiscoveryService/getArticle', $argument, '\sc\discovery\ArticleRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\discovery\SearchReq $input
     */
    public function getSearchArticleList(\sc\discovery\SearchReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.discovery.DiscoveryService/getSearchArticleList', $argument, '\sc\discovery\ArticleListRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\discovery\ZanReq $input
     */
    public function zanArticle(\sc\discovery\ZanReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.discovery.DiscoveryService/zanArticle', $argument, '\sc\discovery\ZanRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\discovery\FavorityReq $input
     */
    public function createFavorite(\sc\discovery\FavorityReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.discovery.DiscoveryService/createFavorite', $argument, '\sc\discovery\FavorityRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\discovery\FavorityReq $input
     */
    public function cancelFavorite(\sc\discovery\FavorityReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.discovery.DiscoveryService/cancelFavorite', $argument, '\sc\discovery\FavorityRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\discovery\FavorityListReq $input
     */
    public function getFavoriteList(\sc\discovery\FavorityListReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.discovery.DiscoveryService/getFavoriteList', $argument, '\sc\discovery\ArticleListRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\discovery\CommentReq $input
     */
    public function commentArticle(\sc\discovery\CommentReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.discovery.DiscoveryService/commentArticle', $argument, '\sc\discovery\CommentRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\discovery\CommentListReq $input
     */
    public function getComments(\sc\discovery\CommentListReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.discovery.DiscoveryService/getComments', $argument, '\sc\discovery\CommentListRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\discovery\HotWordReq $input
     */
    public function getHotWordList(\sc\discovery\HotWordReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.discovery.DiscoveryService/getHotWordList', $argument, '\sc\discovery\HotWordRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\discovery\HotWordReq $input
     */
    public function syncData(\sc\discovery\HotWordReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.discovery.DiscoveryService/syncData', $argument, '\sc\discovery\HotWordRsp::deserialize', $metadata, $options);
    }
  }
}
