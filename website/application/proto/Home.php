<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: Home.proto
//   Date: 2017-04-19 06:39:08

namespace sc\home {

  class CityState extends \DrSlump\Protobuf\Enum {
    const E_Off_Line = 0;
    const E_On_Line = 1;
    const E_Soon_Line = 2;
  }
}
namespace sc\home {

  class ViewType extends \DrSlump\Protobuf\Enum {
    const E_Price = 0;
    const E_Address = 1;
    const E_Zan = 2;
    const E_Not = 3;
  }
}
namespace sc\home {

  class WifiReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var \sc\home\Wifi[]  */
    public $wifi = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.WifiReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // REPEATED MESSAGE wifi = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "wifi";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\home\Wifi';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\home\WifiReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\home\WifiReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <wifi> has a value
     *
     * @return boolean
     */
    public function hasWifi(){
      return $this->_has(2);
    }
    
    /**
     * Clear <wifi> value
     *
     * @return \sc\home\WifiReq
     */
    public function clearWifi(){
      return $this->_clear(2);
    }
    
    /**
     * Get <wifi> value
     *
     * @param int $idx
     * @return \sc\home\Wifi
     */
    public function getWifi($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <wifi> value
     *
     * @param \sc\home\Wifi $value
     * @return \sc\home\WifiReq
     */
    public function setWifi(\sc\home\Wifi $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <wifi>
     *
     * @return \sc\home\Wifi[]
     */
    public function getWifiList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <wifi>
     *
     * @param \sc\home\Wifi $value
     * @return \sc\home\WifiReq
     */
    public function addWifi(\sc\home\Wifi $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sc\home {

  class Wifi extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $location = null;
    
    /**  @var string */
    public $bssid = null;
    
    /**  @var string */
    public $ssid = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.Wifi');

      // OPTIONAL STRING location = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "location";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING bssid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "bssid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ssid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ssid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <location> has a value
     *
     * @return boolean
     */
    public function hasLocation(){
      return $this->_has(1);
    }
    
    /**
     * Clear <location> value
     *
     * @return \sc\home\Wifi
     */
    public function clearLocation(){
      return $this->_clear(1);
    }
    
    /**
     * Get <location> value
     *
     * @return string
     */
    public function getLocation(){
      return $this->_get(1);
    }
    
    /**
     * Set <location> value
     *
     * @param string $value
     * @return \sc\home\Wifi
     */
    public function setLocation( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <bssid> has a value
     *
     * @return boolean
     */
    public function hasBssid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <bssid> value
     *
     * @return \sc\home\Wifi
     */
    public function clearBssid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <bssid> value
     *
     * @return string
     */
    public function getBssid(){
      return $this->_get(2);
    }
    
    /**
     * Set <bssid> value
     *
     * @param string $value
     * @return \sc\home\Wifi
     */
    public function setBssid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ssid> has a value
     *
     * @return boolean
     */
    public function hasSsid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ssid> value
     *
     * @return \sc\home\Wifi
     */
    public function clearSsid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ssid> value
     *
     * @return string
     */
    public function getSsid(){
      return $this->_get(3);
    }
    
    /**
     * Set <ssid> value
     *
     * @param string $value
     * @return \sc\home\Wifi
     */
    public function setSsid( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\home {

  class WifiRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.WifiRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\home\WifiRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\home\WifiRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\home {

  class BeginRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\home\Begin */
    public $begin = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.BeginRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE begin = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "begin";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\home\Begin';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\home\BeginRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\home\BeginRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <begin> has a value
     *
     * @return boolean
     */
    public function hasBegin(){
      return $this->_has(2);
    }
    
    /**
     * Clear <begin> value
     *
     * @return \sc\home\BeginRsp
     */
    public function clearBegin(){
      return $this->_clear(2);
    }
    
    /**
     * Get <begin> value
     *
     * @return \sc\home\Begin
     */
    public function getBegin(){
      return $this->_get(2);
    }
    
    /**
     * Set <begin> value
     *
     * @param \sc\home\Begin $value
     * @return \sc\home\BeginRsp
     */
    public function setBegin(\sc\home\Begin $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\home {

  class Begin extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $url = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.Begin');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING url = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\home\Begin
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\home\Begin
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\home\Begin
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\home\Begin
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(3);
    }
    
    /**
     * Clear <url> value
     *
     * @return \sc\home\Begin
     */
    public function clearUrl(){
      return $this->_clear(3);
    }
    
    /**
     * Get <url> value
     *
     * @return string
     */
    public function getUrl(){
      return $this->_get(3);
    }
    
    /**
     * Set <url> value
     *
     * @param string $value
     * @return \sc\home\Begin
     */
    public function setUrl( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\home {

  class CityReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.CityReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\home\CityReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\home\CityReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\home {

  class CityRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\home\CityProto[]  */
    public $city = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.CityRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // REPEATED MESSAGE city = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "city";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\home\CityProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\home\CityRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\home\CityRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <city> has a value
     *
     * @return boolean
     */
    public function hasCity(){
      return $this->_has(2);
    }
    
    /**
     * Clear <city> value
     *
     * @return \sc\home\CityRsp
     */
    public function clearCity(){
      return $this->_clear(2);
    }
    
    /**
     * Get <city> value
     *
     * @param int $idx
     * @return \sc\home\CityProto
     */
    public function getCity($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <city> value
     *
     * @param \sc\home\CityProto $value
     * @return \sc\home\CityRsp
     */
    public function setCity(\sc\home\CityProto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <city>
     *
     * @return \sc\home\CityProto[]
     */
    public function getCityList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <city>
     *
     * @param \sc\home\CityProto $value
     * @return \sc\home\CityRsp
     */
    public function addCity(\sc\home\CityProto $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sc\home {

  class CityProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $parent_id = null;
    
    /**  @var string */
    public $region_path = null;
    
    /**  @var string */
    public $name = null;
    
    /**  @var string */
    public $pic = null;
    
    /**  @var int */
    public $wifi = null;
    
    /**  @var int - \sc\home\CityState */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.CityProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 parent_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "parent_id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING region_path = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "region_path";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING name = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING pic = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "pic";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 wifi = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "wifi";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM state = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\home\CityState';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\home\CityProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\home\CityProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <parent_id> has a value
     *
     * @return boolean
     */
    public function hasParentId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <parent_id> value
     *
     * @return \sc\home\CityProto
     */
    public function clearParentId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <parent_id> value
     *
     * @return int
     */
    public function getParentId(){
      return $this->_get(2);
    }
    
    /**
     * Set <parent_id> value
     *
     * @param int $value
     * @return \sc\home\CityProto
     */
    public function setParentId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <region_path> has a value
     *
     * @return boolean
     */
    public function hasRegionPath(){
      return $this->_has(3);
    }
    
    /**
     * Clear <region_path> value
     *
     * @return \sc\home\CityProto
     */
    public function clearRegionPath(){
      return $this->_clear(3);
    }
    
    /**
     * Get <region_path> value
     *
     * @return string
     */
    public function getRegionPath(){
      return $this->_get(3);
    }
    
    /**
     * Set <region_path> value
     *
     * @param string $value
     * @return \sc\home\CityProto
     */
    public function setRegionPath( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <name> has a value
     *
     * @return boolean
     */
    public function hasName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <name> value
     *
     * @return \sc\home\CityProto
     */
    public function clearName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <name> value
     *
     * @return string
     */
    public function getName(){
      return $this->_get(4);
    }
    
    /**
     * Set <name> value
     *
     * @param string $value
     * @return \sc\home\CityProto
     */
    public function setName( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <pic> has a value
     *
     * @return boolean
     */
    public function hasPic(){
      return $this->_has(5);
    }
    
    /**
     * Clear <pic> value
     *
     * @return \sc\home\CityProto
     */
    public function clearPic(){
      return $this->_clear(5);
    }
    
    /**
     * Get <pic> value
     *
     * @return string
     */
    public function getPic(){
      return $this->_get(5);
    }
    
    /**
     * Set <pic> value
     *
     * @param string $value
     * @return \sc\home\CityProto
     */
    public function setPic( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <wifi> has a value
     *
     * @return boolean
     */
    public function hasWifi(){
      return $this->_has(6);
    }
    
    /**
     * Clear <wifi> value
     *
     * @return \sc\home\CityProto
     */
    public function clearWifi(){
      return $this->_clear(6);
    }
    
    /**
     * Get <wifi> value
     *
     * @return int
     */
    public function getWifi(){
      return $this->_get(6);
    }
    
    /**
     * Set <wifi> value
     *
     * @param int $value
     * @return \sc\home\CityProto
     */
    public function setWifi( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(7);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\home\CityProto
     */
    public function clearState(){
      return $this->_clear(7);
    }
    
    /**
     * Get <state> value
     *
     * @return int - \sc\home\CityState
     */
    public function getState(){
      return $this->_get(7);
    }
    
    /**
     * Set <state> value
     *
     * @param int - \sc\home\CityState $value
     * @return \sc\home\CityProto
     */
    public function setState( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace sc\home {

  class HomeReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.HomeReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\home\HomeReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\home\HomeReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\home {

  class HomeRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\home\Modules */
    public $modules = null;
    
    /**  @var \sc\home\CityProto[]  */
    public $city = array();
    
    /**  @var \sc\home\SsidProto[]  */
    public $ssid = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.HomeRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE modules = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "modules";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\home\Modules';
      $descriptor->addField($f);

      // REPEATED MESSAGE city = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "city";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\home\CityProto';
      $descriptor->addField($f);

      // REPEATED MESSAGE ssid = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "ssid";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\home\SsidProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\home\HomeRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\home\HomeRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <modules> has a value
     *
     * @return boolean
     */
    public function hasModules(){
      return $this->_has(2);
    }
    
    /**
     * Clear <modules> value
     *
     * @return \sc\home\HomeRsp
     */
    public function clearModules(){
      return $this->_clear(2);
    }
    
    /**
     * Get <modules> value
     *
     * @return \sc\home\Modules
     */
    public function getModules(){
      return $this->_get(2);
    }
    
    /**
     * Set <modules> value
     *
     * @param \sc\home\Modules $value
     * @return \sc\home\HomeRsp
     */
    public function setModules(\sc\home\Modules $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <city> has a value
     *
     * @return boolean
     */
    public function hasCity(){
      return $this->_has(3);
    }
    
    /**
     * Clear <city> value
     *
     * @return \sc\home\HomeRsp
     */
    public function clearCity(){
      return $this->_clear(3);
    }
    
    /**
     * Get <city> value
     *
     * @param int $idx
     * @return \sc\home\CityProto
     */
    public function getCity($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <city> value
     *
     * @param \sc\home\CityProto $value
     * @return \sc\home\HomeRsp
     */
    public function setCity(\sc\home\CityProto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <city>
     *
     * @return \sc\home\CityProto[]
     */
    public function getCityList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <city>
     *
     * @param \sc\home\CityProto $value
     * @return \sc\home\HomeRsp
     */
    public function addCity(\sc\home\CityProto $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <ssid> has a value
     *
     * @return boolean
     */
    public function hasSsid(){
      return $this->_has(4);
    }
    
    /**
     * Clear <ssid> value
     *
     * @return \sc\home\HomeRsp
     */
    public function clearSsid(){
      return $this->_clear(4);
    }
    
    /**
     * Get <ssid> value
     *
     * @param int $idx
     * @return \sc\home\SsidProto
     */
    public function getSsid($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <ssid> value
     *
     * @param \sc\home\SsidProto $value
     * @return \sc\home\HomeRsp
     */
    public function setSsid(\sc\home\SsidProto $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <ssid>
     *
     * @return \sc\home\SsidProto[]
     */
    public function getSsidList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <ssid>
     *
     * @param \sc\home\SsidProto $value
     * @return \sc\home\HomeRsp
     */
    public function addSsid(\sc\home\SsidProto $value){
     return $this->_add(4, $value);
    }
  }
}

namespace sc\home {

  class SsidProto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $ssid = null;
    
    /**  @var string */
    public $authUrl = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.SsidProto');

      // OPTIONAL STRING ssid = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "ssid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING authUrl = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "authUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <ssid> has a value
     *
     * @return boolean
     */
    public function hasSsid(){
      return $this->_has(1);
    }
    
    /**
     * Clear <ssid> value
     *
     * @return \sc\home\SsidProto
     */
    public function clearSsid(){
      return $this->_clear(1);
    }
    
    /**
     * Get <ssid> value
     *
     * @return string
     */
    public function getSsid(){
      return $this->_get(1);
    }
    
    /**
     * Set <ssid> value
     *
     * @param string $value
     * @return \sc\home\SsidProto
     */
    public function setSsid( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <authUrl> has a value
     *
     * @return boolean
     */
    public function hasAuthUrl(){
      return $this->_has(2);
    }
    
    /**
     * Clear <authUrl> value
     *
     * @return \sc\home\SsidProto
     */
    public function clearAuthUrl(){
      return $this->_clear(2);
    }
    
    /**
     * Get <authUrl> value
     *
     * @return string
     */
    public function getAuthUrl(){
      return $this->_get(2);
    }
    
    /**
     * Set <authUrl> value
     *
     * @param string $value
     * @return \sc\home\SsidProto
     */
    public function setAuthUrl( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\home {

  class Modules extends \DrSlump\Protobuf\Message {

    /**  @var \sc\home\HomeModulesViewProto[]  */
    public $homeModulesView = array();
    
    /**  @var \sc\home\IconProto[]  */
    public $icon = array();
    
    /**  @var \sc\home\CarouselProto[]  */
    public $carousel = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.Modules');

      // REPEATED MESSAGE homeModulesView = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "homeModulesView";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\home\HomeModulesViewProto';
      $descriptor->addField($f);

      // REPEATED MESSAGE icon = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "icon";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\home\IconProto';
      $descriptor->addField($f);

      // REPEATED MESSAGE carousel = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "carousel";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\home\CarouselProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <homeModulesView> has a value
     *
     * @return boolean
     */
    public function hasHomeModulesView(){
      return $this->_has(1);
    }
    
    /**
     * Clear <homeModulesView> value
     *
     * @return \sc\home\Modules
     */
    public function clearHomeModulesView(){
      return $this->_clear(1);
    }
    
    /**
     * Get <homeModulesView> value
     *
     * @param int $idx
     * @return \sc\home\HomeModulesViewProto
     */
    public function getHomeModulesView($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <homeModulesView> value
     *
     * @param \sc\home\HomeModulesViewProto $value
     * @return \sc\home\Modules
     */
    public function setHomeModulesView(\sc\home\HomeModulesViewProto $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <homeModulesView>
     *
     * @return \sc\home\HomeModulesViewProto[]
     */
    public function getHomeModulesViewList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <homeModulesView>
     *
     * @param \sc\home\HomeModulesViewProto $value
     * @return \sc\home\Modules
     */
    public function addHomeModulesView(\sc\home\HomeModulesViewProto $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <icon> has a value
     *
     * @return boolean
     */
    public function hasIcon(){
      return $this->_has(2);
    }
    
    /**
     * Clear <icon> value
     *
     * @return \sc\home\Modules
     */
    public function clearIcon(){
      return $this->_clear(2);
    }
    
    /**
     * Get <icon> value
     *
     * @param int $idx
     * @return \sc\home\IconProto
     */
    public function getIcon($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <icon> value
     *
     * @param \sc\home\IconProto $value
     * @return \sc\home\Modules
     */
    public function setIcon(\sc\home\IconProto $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <icon>
     *
     * @return \sc\home\IconProto[]
     */
    public function getIconList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <icon>
     *
     * @param \sc\home\IconProto $value
     * @return \sc\home\Modules
     */
    public function addIcon(\sc\home\IconProto $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <carousel> has a value
     *
     * @return boolean
     */
    public function hasCarousel(){
      return $this->_has(3);
    }
    
    /**
     * Clear <carousel> value
     *
     * @return \sc\home\Modules
     */
    public function clearCarousel(){
      return $this->_clear(3);
    }
    
    /**
     * Get <carousel> value
     *
     * @param int $idx
     * @return \sc\home\CarouselProto
     */
    public function getCarousel($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <carousel> value
     *
     * @param \sc\home\CarouselProto $value
     * @return \sc\home\Modules
     */
    public function setCarousel(\sc\home\CarouselProto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <carousel>
     *
     * @return \sc\home\CarouselProto[]
     */
    public function getCarouselList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <carousel>
     *
     * @param \sc\home\CarouselProto $value
     * @return \sc\home\Modules
     */
    public function addCarousel(\sc\home\CarouselProto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace sc\home {

  class HomeModulesViewProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $orderBy = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var \sc\home\ContentListProto[]  */
    public $contentList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.HomeModulesViewProto');

      // OPTIONAL UINT32 orderBy = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "orderBy";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE contentList = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "contentList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\home\ContentListProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <orderBy> has a value
     *
     * @return boolean
     */
    public function hasOrderBy(){
      return $this->_has(1);
    }
    
    /**
     * Clear <orderBy> value
     *
     * @return \sc\home\HomeModulesViewProto
     */
    public function clearOrderBy(){
      return $this->_clear(1);
    }
    
    /**
     * Get <orderBy> value
     *
     * @return int
     */
    public function getOrderBy(){
      return $this->_get(1);
    }
    
    /**
     * Set <orderBy> value
     *
     * @param int $value
     * @return \sc\home\HomeModulesViewProto
     */
    public function setOrderBy( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\home\HomeModulesViewProto
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\home\HomeModulesViewProto
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <contentList> has a value
     *
     * @return boolean
     */
    public function hasContentList(){
      return $this->_has(3);
    }
    
    /**
     * Clear <contentList> value
     *
     * @return \sc\home\HomeModulesViewProto
     */
    public function clearContentList(){
      return $this->_clear(3);
    }
    
    /**
     * Get <contentList> value
     *
     * @param int $idx
     * @return \sc\home\ContentListProto
     */
    public function getContentList($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <contentList> value
     *
     * @param \sc\home\ContentListProto $value
     * @return \sc\home\HomeModulesViewProto
     */
    public function setContentList(\sc\home\ContentListProto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <contentList>
     *
     * @return \sc\home\ContentListProto[]
     */
    public function getContentListList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <contentList>
     *
     * @param \sc\home\ContentListProto $value
     * @return \sc\home\HomeModulesViewProto
     */
    public function addContentList(\sc\home\ContentListProto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace sc\home {

  class ContentListProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $linkType = null;
    
    /**  @var int */
    public $orderby = null;
    
    /**  @var string */
    public $picUrl = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $price = null;
    
    /**  @var string */
    public $location = null;
    
    /**  @var string */
    public $content = null;
    
    /**  @var string */
    public $praiseCount = null;
    
    /**  @var string */
    public $despiseCount = null;
    
    /**  @var string */
    public $link = null;
    
    /**  @var int - \sc\home\ViewType */
    public $viewType = null;
    
    /**  @var \sc\home\ArticleProto */
    public $article = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.ContentListProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 linkType = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "linkType";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 orderby = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "orderby";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING picUrl = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "picUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING price = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "price";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING location = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "location";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING content = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING praiseCount = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "praiseCount";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING despiseCount = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "despiseCount";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING link = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM viewType = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "viewType";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\home\ViewType';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE article = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "article";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\home\ArticleProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\home\ContentListProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\home\ContentListProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <linkType> has a value
     *
     * @return boolean
     */
    public function hasLinkType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <linkType> value
     *
     * @return \sc\home\ContentListProto
     */
    public function clearLinkType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <linkType> value
     *
     * @return int
     */
    public function getLinkType(){
      return $this->_get(2);
    }
    
    /**
     * Set <linkType> value
     *
     * @param int $value
     * @return \sc\home\ContentListProto
     */
    public function setLinkType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <orderby> has a value
     *
     * @return boolean
     */
    public function hasOrderby(){
      return $this->_has(3);
    }
    
    /**
     * Clear <orderby> value
     *
     * @return \sc\home\ContentListProto
     */
    public function clearOrderby(){
      return $this->_clear(3);
    }
    
    /**
     * Get <orderby> value
     *
     * @return int
     */
    public function getOrderby(){
      return $this->_get(3);
    }
    
    /**
     * Set <orderby> value
     *
     * @param int $value
     * @return \sc\home\ContentListProto
     */
    public function setOrderby( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <picUrl> has a value
     *
     * @return boolean
     */
    public function hasPicUrl(){
      return $this->_has(4);
    }
    
    /**
     * Clear <picUrl> value
     *
     * @return \sc\home\ContentListProto
     */
    public function clearPicUrl(){
      return $this->_clear(4);
    }
    
    /**
     * Get <picUrl> value
     *
     * @return string
     */
    public function getPicUrl(){
      return $this->_get(4);
    }
    
    /**
     * Set <picUrl> value
     *
     * @param string $value
     * @return \sc\home\ContentListProto
     */
    public function setPicUrl( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(5);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\home\ContentListProto
     */
    public function clearTitle(){
      return $this->_clear(5);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(5);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\home\ContentListProto
     */
    public function setTitle( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <price> has a value
     *
     * @return boolean
     */
    public function hasPrice(){
      return $this->_has(6);
    }
    
    /**
     * Clear <price> value
     *
     * @return \sc\home\ContentListProto
     */
    public function clearPrice(){
      return $this->_clear(6);
    }
    
    /**
     * Get <price> value
     *
     * @return string
     */
    public function getPrice(){
      return $this->_get(6);
    }
    
    /**
     * Set <price> value
     *
     * @param string $value
     * @return \sc\home\ContentListProto
     */
    public function setPrice( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <location> has a value
     *
     * @return boolean
     */
    public function hasLocation(){
      return $this->_has(7);
    }
    
    /**
     * Clear <location> value
     *
     * @return \sc\home\ContentListProto
     */
    public function clearLocation(){
      return $this->_clear(7);
    }
    
    /**
     * Get <location> value
     *
     * @return string
     */
    public function getLocation(){
      return $this->_get(7);
    }
    
    /**
     * Set <location> value
     *
     * @param string $value
     * @return \sc\home\ContentListProto
     */
    public function setLocation( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(8);
    }
    
    /**
     * Clear <content> value
     *
     * @return \sc\home\ContentListProto
     */
    public function clearContent(){
      return $this->_clear(8);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(8);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \sc\home\ContentListProto
     */
    public function setContent( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <praiseCount> has a value
     *
     * @return boolean
     */
    public function hasPraiseCount(){
      return $this->_has(9);
    }
    
    /**
     * Clear <praiseCount> value
     *
     * @return \sc\home\ContentListProto
     */
    public function clearPraiseCount(){
      return $this->_clear(9);
    }
    
    /**
     * Get <praiseCount> value
     *
     * @return string
     */
    public function getPraiseCount(){
      return $this->_get(9);
    }
    
    /**
     * Set <praiseCount> value
     *
     * @param string $value
     * @return \sc\home\ContentListProto
     */
    public function setPraiseCount( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <despiseCount> has a value
     *
     * @return boolean
     */
    public function hasDespiseCount(){
      return $this->_has(10);
    }
    
    /**
     * Clear <despiseCount> value
     *
     * @return \sc\home\ContentListProto
     */
    public function clearDespiseCount(){
      return $this->_clear(10);
    }
    
    /**
     * Get <despiseCount> value
     *
     * @return string
     */
    public function getDespiseCount(){
      return $this->_get(10);
    }
    
    /**
     * Set <despiseCount> value
     *
     * @param string $value
     * @return \sc\home\ContentListProto
     */
    public function setDespiseCount( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink(){
      return $this->_has(11);
    }
    
    /**
     * Clear <link> value
     *
     * @return \sc\home\ContentListProto
     */
    public function clearLink(){
      return $this->_clear(11);
    }
    
    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink(){
      return $this->_get(11);
    }
    
    /**
     * Set <link> value
     *
     * @param string $value
     * @return \sc\home\ContentListProto
     */
    public function setLink( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <viewType> has a value
     *
     * @return boolean
     */
    public function hasViewType(){
      return $this->_has(12);
    }
    
    /**
     * Clear <viewType> value
     *
     * @return \sc\home\ContentListProto
     */
    public function clearViewType(){
      return $this->_clear(12);
    }
    
    /**
     * Get <viewType> value
     *
     * @return int - \sc\home\ViewType
     */
    public function getViewType(){
      return $this->_get(12);
    }
    
    /**
     * Set <viewType> value
     *
     * @param int - \sc\home\ViewType $value
     * @return \sc\home\ContentListProto
     */
    public function setViewType( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <article> has a value
     *
     * @return boolean
     */
    public function hasArticle(){
      return $this->_has(13);
    }
    
    /**
     * Clear <article> value
     *
     * @return \sc\home\ContentListProto
     */
    public function clearArticle(){
      return $this->_clear(13);
    }
    
    /**
     * Get <article> value
     *
     * @return \sc\home\ArticleProto
     */
    public function getArticle(){
      return $this->_get(13);
    }
    
    /**
     * Set <article> value
     *
     * @param \sc\home\ArticleProto $value
     * @return \sc\home\ContentListProto
     */
    public function setArticle(\sc\home\ArticleProto $value){
      return $this->_set(13, $value);
    }
  }
}

namespace sc\home {

  class ArticleProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $link = null;
    
    /**  @var int */
    public $commentCount = null;
    
    /**  @var int */
    public $zanCount = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $picUrl = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.ArticleProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 link = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "link";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 commentCount = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "commentCount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 zanCount = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "zanCount";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING picUrl = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "picUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\home\ArticleProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\home\ArticleProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink(){
      return $this->_has(2);
    }
    
    /**
     * Clear <link> value
     *
     * @return \sc\home\ArticleProto
     */
    public function clearLink(){
      return $this->_clear(2);
    }
    
    /**
     * Get <link> value
     *
     * @return int
     */
    public function getLink(){
      return $this->_get(2);
    }
    
    /**
     * Set <link> value
     *
     * @param int $value
     * @return \sc\home\ArticleProto
     */
    public function setLink( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <commentCount> has a value
     *
     * @return boolean
     */
    public function hasCommentCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <commentCount> value
     *
     * @return \sc\home\ArticleProto
     */
    public function clearCommentCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <commentCount> value
     *
     * @return int
     */
    public function getCommentCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <commentCount> value
     *
     * @param int $value
     * @return \sc\home\ArticleProto
     */
    public function setCommentCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <zanCount> has a value
     *
     * @return boolean
     */
    public function hasZanCount(){
      return $this->_has(4);
    }
    
    /**
     * Clear <zanCount> value
     *
     * @return \sc\home\ArticleProto
     */
    public function clearZanCount(){
      return $this->_clear(4);
    }
    
    /**
     * Get <zanCount> value
     *
     * @return int
     */
    public function getZanCount(){
      return $this->_get(4);
    }
    
    /**
     * Set <zanCount> value
     *
     * @param int $value
     * @return \sc\home\ArticleProto
     */
    public function setZanCount( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(5);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\home\ArticleProto
     */
    public function clearTitle(){
      return $this->_clear(5);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(5);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\home\ArticleProto
     */
    public function setTitle( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <picUrl> has a value
     *
     * @return boolean
     */
    public function hasPicUrl(){
      return $this->_has(6);
    }
    
    /**
     * Clear <picUrl> value
     *
     * @return \sc\home\ArticleProto
     */
    public function clearPicUrl(){
      return $this->_clear(6);
    }
    
    /**
     * Get <picUrl> value
     *
     * @return string
     */
    public function getPicUrl(){
      return $this->_get(6);
    }
    
    /**
     * Set <picUrl> value
     *
     * @param string $value
     * @return \sc\home\ArticleProto
     */
    public function setPicUrl( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace sc\home {

  class IconProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $orderby = null;
    
    /**  @var int */
    public $linkType = null;
    
    /**  @var string */
    public $iconPic = null;
    
    /**  @var string */
    public $link = null;
    
    /**  @var string */
    public $title = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.IconProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 orderby = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "orderby";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 linkType = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "linkType";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING iconPic = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "iconPic";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING link = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\home\IconProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\home\IconProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <orderby> has a value
     *
     * @return boolean
     */
    public function hasOrderby(){
      return $this->_has(2);
    }
    
    /**
     * Clear <orderby> value
     *
     * @return \sc\home\IconProto
     */
    public function clearOrderby(){
      return $this->_clear(2);
    }
    
    /**
     * Get <orderby> value
     *
     * @return int
     */
    public function getOrderby(){
      return $this->_get(2);
    }
    
    /**
     * Set <orderby> value
     *
     * @param int $value
     * @return \sc\home\IconProto
     */
    public function setOrderby( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <linkType> has a value
     *
     * @return boolean
     */
    public function hasLinkType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <linkType> value
     *
     * @return \sc\home\IconProto
     */
    public function clearLinkType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <linkType> value
     *
     * @return int
     */
    public function getLinkType(){
      return $this->_get(3);
    }
    
    /**
     * Set <linkType> value
     *
     * @param int $value
     * @return \sc\home\IconProto
     */
    public function setLinkType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <iconPic> has a value
     *
     * @return boolean
     */
    public function hasIconPic(){
      return $this->_has(4);
    }
    
    /**
     * Clear <iconPic> value
     *
     * @return \sc\home\IconProto
     */
    public function clearIconPic(){
      return $this->_clear(4);
    }
    
    /**
     * Get <iconPic> value
     *
     * @return string
     */
    public function getIconPic(){
      return $this->_get(4);
    }
    
    /**
     * Set <iconPic> value
     *
     * @param string $value
     * @return \sc\home\IconProto
     */
    public function setIconPic( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink(){
      return $this->_has(5);
    }
    
    /**
     * Clear <link> value
     *
     * @return \sc\home\IconProto
     */
    public function clearLink(){
      return $this->_clear(5);
    }
    
    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink(){
      return $this->_get(5);
    }
    
    /**
     * Set <link> value
     *
     * @param string $value
     * @return \sc\home\IconProto
     */
    public function setLink( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(6);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\home\IconProto
     */
    public function clearTitle(){
      return $this->_clear(6);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(6);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\home\IconProto
     */
    public function setTitle( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace sc\home {

  class CarouselProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $linkType = null;
    
    /**  @var int */
    public $orderby = null;
    
    /**  @var string */
    public $picUrl = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $link = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.home.CarouselProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 linkType = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "linkType";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 orderby = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "orderby";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING picUrl = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "picUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING link = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\home\CarouselProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\home\CarouselProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <linkType> has a value
     *
     * @return boolean
     */
    public function hasLinkType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <linkType> value
     *
     * @return \sc\home\CarouselProto
     */
    public function clearLinkType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <linkType> value
     *
     * @return int
     */
    public function getLinkType(){
      return $this->_get(2);
    }
    
    /**
     * Set <linkType> value
     *
     * @param int $value
     * @return \sc\home\CarouselProto
     */
    public function setLinkType( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <orderby> has a value
     *
     * @return boolean
     */
    public function hasOrderby(){
      return $this->_has(3);
    }
    
    /**
     * Clear <orderby> value
     *
     * @return \sc\home\CarouselProto
     */
    public function clearOrderby(){
      return $this->_clear(3);
    }
    
    /**
     * Get <orderby> value
     *
     * @return int
     */
    public function getOrderby(){
      return $this->_get(3);
    }
    
    /**
     * Set <orderby> value
     *
     * @param int $value
     * @return \sc\home\CarouselProto
     */
    public function setOrderby( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <picUrl> has a value
     *
     * @return boolean
     */
    public function hasPicUrl(){
      return $this->_has(4);
    }
    
    /**
     * Clear <picUrl> value
     *
     * @return \sc\home\CarouselProto
     */
    public function clearPicUrl(){
      return $this->_clear(4);
    }
    
    /**
     * Get <picUrl> value
     *
     * @return string
     */
    public function getPicUrl(){
      return $this->_get(4);
    }
    
    /**
     * Set <picUrl> value
     *
     * @param string $value
     * @return \sc\home\CarouselProto
     */
    public function setPicUrl( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(5);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\home\CarouselProto
     */
    public function clearTitle(){
      return $this->_clear(5);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(5);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\home\CarouselProto
     */
    public function setTitle( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink(){
      return $this->_has(6);
    }
    
    /**
     * Clear <link> value
     *
     * @return \sc\home\CarouselProto
     */
    public function clearLink(){
      return $this->_clear(6);
    }
    
    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink(){
      return $this->_get(6);
    }
    
    /**
     * Set <link> value
     *
     * @param string $value
     * @return \sc\home\CarouselProto
     */
    public function setLink( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace sc\home {

  class HomeServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param sc\home\CityReq $input
     */
    public function CityList(\sc\home\CityReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.home.HomeService/CityList', $argument, '\sc\home\CityRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\home\HomeReq $input
     */
    public function ListHome(\sc\home\HomeReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.home.HomeService/ListHome', $argument, '\sc\home\HomeRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\home\HomeReq $input
     */
    public function Begin(\sc\home\HomeReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.home.HomeService/Begin', $argument, '\sc\home\BeginRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\home\WifiReq $input
     */
    public function WifiReport(\sc\home\WifiReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.home.HomeService/WifiReport', $argument, '\sc\home\WifiRsp::deserialize', $metadata, $options);
    }
  }
}
