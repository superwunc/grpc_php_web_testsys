<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: User.proto
//   Date: 2017-04-19 06:39:09

namespace sc\user {

  class VerificationCodeType extends \DrSlump\Protobuf\Enum {
    const E_register = 0;
    const E_modify = 1;
    const E_login = 2;
  }
}
namespace sc\user {

  class HasPasswdReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var string */
    public $mobile = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.HasPasswdReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\HasPasswdReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\HasPasswdReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\user\HasPasswdReq
     */
    public function clearMobile(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(2);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\user\HasPasswdReq
     */
    public function setMobile( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class HasPasswdRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var boolean */
    public $pwIsExist = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.HasPasswdRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL BOOL pwIsExist = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "pwIsExist";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\HasPasswdRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\HasPasswdRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <pwIsExist> has a value
     *
     * @return boolean
     */
    public function hasPwIsExist(){
      return $this->_has(2);
    }
    
    /**
     * Clear <pwIsExist> value
     *
     * @return \sc\user\HasPasswdRsp
     */
    public function clearPwIsExist(){
      return $this->_clear(2);
    }
    
    /**
     * Get <pwIsExist> value
     *
     * @return boolean
     */
    public function getPwIsExist(){
      return $this->_get(2);
    }
    
    /**
     * Set <pwIsExist> value
     *
     * @param boolean $value
     * @return \sc\user\HasPasswdRsp
     */
    public function setPwIsExist( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class ModifyPWReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var string */
    public $mobile = null;
    
    /**  @var string */
    public $passWord = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.ModifyPWReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING passWord = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "passWord";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\ModifyPWReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\ModifyPWReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\user\ModifyPWReq
     */
    public function clearMobile(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(2);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\user\ModifyPWReq
     */
    public function setMobile( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <passWord> has a value
     *
     * @return boolean
     */
    public function hasPassWord(){
      return $this->_has(3);
    }
    
    /**
     * Clear <passWord> value
     *
     * @return \sc\user\ModifyPWReq
     */
    public function clearPassWord(){
      return $this->_clear(3);
    }
    
    /**
     * Get <passWord> value
     *
     * @return string
     */
    public function getPassWord(){
      return $this->_get(3);
    }
    
    /**
     * Set <passWord> value
     *
     * @param string $value
     * @return \sc\user\ModifyPWReq
     */
    public function setPassWord( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\user {

  class ModifyPWRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\user\UserDataProto */
    public $userData = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.ModifyPWRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE userData = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "userData";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\user\UserDataProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\ModifyPWRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\ModifyPWRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <userData> has a value
     *
     * @return boolean
     */
    public function hasUserData(){
      return $this->_has(2);
    }
    
    /**
     * Clear <userData> value
     *
     * @return \sc\user\ModifyPWRsp
     */
    public function clearUserData(){
      return $this->_clear(2);
    }
    
    /**
     * Get <userData> value
     *
     * @return \sc\user\UserDataProto
     */
    public function getUserData(){
      return $this->_get(2);
    }
    
    /**
     * Set <userData> value
     *
     * @param \sc\user\UserDataProto $value
     * @return \sc\user\ModifyPWRsp
     */
    public function setUserData(\sc\user\UserDataProto $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class CheckVerifyReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var string */
    public $mobile = null;
    
    /**  @var string */
    public $verificationCode = null;
    
    /**  @var int - \sc\user\VerificationCodeType */
    public $codeType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.CheckVerifyReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING verificationCode = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "verificationCode";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM codeType = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "codeType";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\user\VerificationCodeType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\CheckVerifyReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\CheckVerifyReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\user\CheckVerifyReq
     */
    public function clearMobile(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(2);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\user\CheckVerifyReq
     */
    public function setMobile( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <verificationCode> has a value
     *
     * @return boolean
     */
    public function hasVerificationCode(){
      return $this->_has(3);
    }
    
    /**
     * Clear <verificationCode> value
     *
     * @return \sc\user\CheckVerifyReq
     */
    public function clearVerificationCode(){
      return $this->_clear(3);
    }
    
    /**
     * Get <verificationCode> value
     *
     * @return string
     */
    public function getVerificationCode(){
      return $this->_get(3);
    }
    
    /**
     * Set <verificationCode> value
     *
     * @param string $value
     * @return \sc\user\CheckVerifyReq
     */
    public function setVerificationCode( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <codeType> has a value
     *
     * @return boolean
     */
    public function hasCodeType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <codeType> value
     *
     * @return \sc\user\CheckVerifyReq
     */
    public function clearCodeType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <codeType> value
     *
     * @return int - \sc\user\VerificationCodeType
     */
    public function getCodeType(){
      return $this->_get(4);
    }
    
    /**
     * Set <codeType> value
     *
     * @param int - \sc\user\VerificationCodeType $value
     * @return \sc\user\CheckVerifyReq
     */
    public function setCodeType( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace sc\user {

  class CheckVerifyRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var string */
    public $token = null;
    
    /**  @var \sc\user\UserDataProto */
    public $userData = null;
    
    /**  @var boolean */
    public $pwIsExist = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.CheckVerifyRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL STRING token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE userData = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "userData";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\user\UserDataProto';
      $descriptor->addField($f);

      // OPTIONAL BOOL pwIsExist = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "pwIsExist";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\CheckVerifyRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\CheckVerifyRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <token> has a value
     *
     * @return boolean
     */
    public function hasToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <token> value
     *
     * @return \sc\user\CheckVerifyRsp
     */
    public function clearToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <token> value
     *
     * @return string
     */
    public function getToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <token> value
     *
     * @param string $value
     * @return \sc\user\CheckVerifyRsp
     */
    public function setToken( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <userData> has a value
     *
     * @return boolean
     */
    public function hasUserData(){
      return $this->_has(3);
    }
    
    /**
     * Clear <userData> value
     *
     * @return \sc\user\CheckVerifyRsp
     */
    public function clearUserData(){
      return $this->_clear(3);
    }
    
    /**
     * Get <userData> value
     *
     * @return \sc\user\UserDataProto
     */
    public function getUserData(){
      return $this->_get(3);
    }
    
    /**
     * Set <userData> value
     *
     * @param \sc\user\UserDataProto $value
     * @return \sc\user\CheckVerifyRsp
     */
    public function setUserData(\sc\user\UserDataProto $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <pwIsExist> has a value
     *
     * @return boolean
     */
    public function hasPwIsExist(){
      return $this->_has(4);
    }
    
    /**
     * Clear <pwIsExist> value
     *
     * @return \sc\user\CheckVerifyRsp
     */
    public function clearPwIsExist(){
      return $this->_clear(4);
    }
    
    /**
     * Get <pwIsExist> value
     *
     * @return boolean
     */
    public function getPwIsExist(){
      return $this->_get(4);
    }
    
    /**
     * Set <pwIsExist> value
     *
     * @param boolean $value
     * @return \sc\user\CheckVerifyRsp
     */
    public function setPwIsExist( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace sc\user {

  class SendVerifyReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var string */
    public $mobile = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.SendVerifyReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\SendVerifyReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\SendVerifyReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\user\SendVerifyReq
     */
    public function clearMobile(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(2);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\user\SendVerifyReq
     */
    public function setMobile( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class SendVerifyRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var boolean */
    public $mobileIsExist = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.SendVerifyRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL BOOL mobileIsExist = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mobileIsExist";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\SendVerifyRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\SendVerifyRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mobileIsExist> has a value
     *
     * @return boolean
     */
    public function hasMobileIsExist(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mobileIsExist> value
     *
     * @return \sc\user\SendVerifyRsp
     */
    public function clearMobileIsExist(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mobileIsExist> value
     *
     * @return boolean
     */
    public function getMobileIsExist(){
      return $this->_get(2);
    }
    
    /**
     * Set <mobileIsExist> value
     *
     * @param boolean $value
     * @return \sc\user\SendVerifyRsp
     */
    public function setMobileIsExist( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class MobileVerifyReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var string */
    public $mobile = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.MobileVerifyReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\MobileVerifyReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\MobileVerifyReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\user\MobileVerifyReq
     */
    public function clearMobile(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(2);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\user\MobileVerifyReq
     */
    public function setMobile( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class MobileVerifyRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var boolean */
    public $mobileVerify = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.MobileVerifyRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL BOOL mobileVerify = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mobileVerify";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\MobileVerifyRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\MobileVerifyRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mobileVerify> has a value
     *
     * @return boolean
     */
    public function hasMobileVerify(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mobileVerify> value
     *
     * @return \sc\user\MobileVerifyRsp
     */
    public function clearMobileVerify(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mobileVerify> value
     *
     * @return boolean
     */
    public function getMobileVerify(){
      return $this->_get(2);
    }
    
    /**
     * Set <mobileVerify> value
     *
     * @param boolean $value
     * @return \sc\user\MobileVerifyRsp
     */
    public function setMobileVerify( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class MobileExistReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var string */
    public $mobile = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.MobileExistReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\MobileExistReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\MobileExistReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\user\MobileExistReq
     */
    public function clearMobile(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(2);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\user\MobileExistReq
     */
    public function setMobile( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class MobileExistRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var boolean */
    public $mobileExist = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.MobileExistRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL BOOL mobileExist = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mobileExist";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\MobileExistRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\MobileExistRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mobileExist> has a value
     *
     * @return boolean
     */
    public function hasMobileExist(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mobileExist> value
     *
     * @return \sc\user\MobileExistRsp
     */
    public function clearMobileExist(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mobileExist> value
     *
     * @return boolean
     */
    public function getMobileExist(){
      return $this->_get(2);
    }
    
    /**
     * Set <mobileExist> value
     *
     * @param boolean $value
     * @return \sc\user\MobileExistRsp
     */
    public function setMobileExist( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class CheckReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.CheckReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\CheckReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\CheckReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\user {

  class CheckRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var int */
    public $score = null;
    
    /**  @var string */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.CheckRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL UINT32 score = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\CheckRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\CheckRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(2);
    }
    
    /**
     * Clear <score> value
     *
     * @return \sc\user\CheckRsp
     */
    public function clearScore(){
      return $this->_clear(2);
    }
    
    /**
     * Get <score> value
     *
     * @return int
     */
    public function getScore(){
      return $this->_get(2);
    }
    
    /**
     * Set <score> value
     *
     * @param int $value
     * @return \sc\user\CheckRsp
     */
    public function setScore( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \sc\user\CheckRsp
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \sc\user\CheckRsp
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\user {

  class ModifyPassWordUseOldPWReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var string */
    public $mobile = null;
    
    /**  @var string */
    public $oldPassWord = null;
    
    /**  @var string */
    public $newPassWord = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.ModifyPassWordUseOldPWReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING oldPassWord = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "oldPassWord";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING newPassWord = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "newPassWord";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\ModifyPassWordUseOldPWReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\ModifyPassWordUseOldPWReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\user\ModifyPassWordUseOldPWReq
     */
    public function clearMobile(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(2);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\user\ModifyPassWordUseOldPWReq
     */
    public function setMobile( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <oldPassWord> has a value
     *
     * @return boolean
     */
    public function hasOldPassWord(){
      return $this->_has(3);
    }
    
    /**
     * Clear <oldPassWord> value
     *
     * @return \sc\user\ModifyPassWordUseOldPWReq
     */
    public function clearOldPassWord(){
      return $this->_clear(3);
    }
    
    /**
     * Get <oldPassWord> value
     *
     * @return string
     */
    public function getOldPassWord(){
      return $this->_get(3);
    }
    
    /**
     * Set <oldPassWord> value
     *
     * @param string $value
     * @return \sc\user\ModifyPassWordUseOldPWReq
     */
    public function setOldPassWord( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <newPassWord> has a value
     *
     * @return boolean
     */
    public function hasNewPassWord(){
      return $this->_has(4);
    }
    
    /**
     * Clear <newPassWord> value
     *
     * @return \sc\user\ModifyPassWordUseOldPWReq
     */
    public function clearNewPassWord(){
      return $this->_clear(4);
    }
    
    /**
     * Get <newPassWord> value
     *
     * @return string
     */
    public function getNewPassWord(){
      return $this->_get(4);
    }
    
    /**
     * Set <newPassWord> value
     *
     * @param string $value
     * @return \sc\user\ModifyPassWordUseOldPWReq
     */
    public function setNewPassWord( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace sc\user {

  class ModifyPassWordUseOldPWRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\user\UserDataProto */
    public $userData = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.ModifyPassWordUseOldPWRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE userData = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "userData";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\user\UserDataProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\ModifyPassWordUseOldPWRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\ModifyPassWordUseOldPWRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <userData> has a value
     *
     * @return boolean
     */
    public function hasUserData(){
      return $this->_has(2);
    }
    
    /**
     * Clear <userData> value
     *
     * @return \sc\user\ModifyPassWordUseOldPWRsp
     */
    public function clearUserData(){
      return $this->_clear(2);
    }
    
    /**
     * Get <userData> value
     *
     * @return \sc\user\UserDataProto
     */
    public function getUserData(){
      return $this->_get(2);
    }
    
    /**
     * Set <userData> value
     *
     * @param \sc\user\UserDataProto $value
     * @return \sc\user\ModifyPassWordUseOldPWRsp
     */
    public function setUserData(\sc\user\UserDataProto $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class ActivateUserReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $userId = null;
    
    /**  @var string */
    public $code = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.ActivateUserReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 userId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "userId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING code = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\ActivateUserReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\ActivateUserReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <userId> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <userId> value
     *
     * @return \sc\user\ActivateUserReq
     */
    public function clearUserId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <userId> value
     *
     * @return int
     */
    public function getUserId(){
      return $this->_get(2);
    }
    
    /**
     * Set <userId> value
     *
     * @param int $value
     * @return \sc\user\ActivateUserReq
     */
    public function setUserId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(3);
    }
    
    /**
     * Clear <code> value
     *
     * @return \sc\user\ActivateUserReq
     */
    public function clearCode(){
      return $this->_clear(3);
    }
    
    /**
     * Get <code> value
     *
     * @return string
     */
    public function getCode(){
      return $this->_get(3);
    }
    
    /**
     * Set <code> value
     *
     * @param string $value
     * @return \sc\user\ActivateUserReq
     */
    public function setCode( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\user {

  class ActivateUserRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.ActivateUserRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\ActivateUserRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\ActivateUserRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\user {

  class ShareActivateCountReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $userId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.ShareActivateCountReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 userId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "userId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\ShareActivateCountReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\ShareActivateCountReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <userId> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <userId> value
     *
     * @return \sc\user\ShareActivateCountReq
     */
    public function clearUserId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <userId> value
     *
     * @return int
     */
    public function getUserId(){
      return $this->_get(2);
    }
    
    /**
     * Set <userId> value
     *
     * @param int $value
     * @return \sc\user\ShareActivateCountReq
     */
    public function setUserId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class ShareActivateCountRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var int */
    public $count = null;
    
    /**  @var string */
    public $activateCode = null;
    
    /**  @var string */
    public $mobile = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.ShareActivateCountRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL UINT32 count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "count";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING activateCode = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "activateCode";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\ShareActivateCountRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\ShareActivateCountRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <count> has a value
     *
     * @return boolean
     */
    public function hasCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <count> value
     *
     * @return \sc\user\ShareActivateCountRsp
     */
    public function clearCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <count> value
     *
     * @return int
     */
    public function getCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <count> value
     *
     * @param int $value
     * @return \sc\user\ShareActivateCountRsp
     */
    public function setCount( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <activateCode> has a value
     *
     * @return boolean
     */
    public function hasActivateCode(){
      return $this->_has(3);
    }
    
    /**
     * Clear <activateCode> value
     *
     * @return \sc\user\ShareActivateCountRsp
     */
    public function clearActivateCode(){
      return $this->_clear(3);
    }
    
    /**
     * Get <activateCode> value
     *
     * @return string
     */
    public function getActivateCode(){
      return $this->_get(3);
    }
    
    /**
     * Set <activateCode> value
     *
     * @param string $value
     * @return \sc\user\ShareActivateCountRsp
     */
    public function setActivateCode( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(4);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\user\ShareActivateCountRsp
     */
    public function clearMobile(){
      return $this->_clear(4);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(4);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\user\ShareActivateCountRsp
     */
    public function setMobile( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace sc\user {

  class FeedBackReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $userId = null;
    
    /**  @var string */
    public $type = null;
    
    /**  @var string */
    public $content = null;
    
    /**  @var string[]  */
    public $avatar = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.FeedBackReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 userId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "userId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING content = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "content";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING avatar = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "avatar";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\FeedBackReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\FeedBackReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <userId> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <userId> value
     *
     * @return \sc\user\FeedBackReq
     */
    public function clearUserId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <userId> value
     *
     * @return int
     */
    public function getUserId(){
      return $this->_get(2);
    }
    
    /**
     * Set <userId> value
     *
     * @param int $value
     * @return \sc\user\FeedBackReq
     */
    public function setUserId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \sc\user\FeedBackReq
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \sc\user\FeedBackReq
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <content> has a value
     *
     * @return boolean
     */
    public function hasContent(){
      return $this->_has(4);
    }
    
    /**
     * Clear <content> value
     *
     * @return \sc\user\FeedBackReq
     */
    public function clearContent(){
      return $this->_clear(4);
    }
    
    /**
     * Get <content> value
     *
     * @return string
     */
    public function getContent(){
      return $this->_get(4);
    }
    
    /**
     * Set <content> value
     *
     * @param string $value
     * @return \sc\user\FeedBackReq
     */
    public function setContent( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <avatar> has a value
     *
     * @return boolean
     */
    public function hasAvatar(){
      return $this->_has(5);
    }
    
    /**
     * Clear <avatar> value
     *
     * @return \sc\user\FeedBackReq
     */
    public function clearAvatar(){
      return $this->_clear(5);
    }
    
    /**
     * Get <avatar> value
     *
     * @param int $idx
     * @return string
     */
    public function getAvatar($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <avatar> value
     *
     * @param string $value
     * @return \sc\user\FeedBackReq
     */
    public function setAvatar( $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <avatar>
     *
     * @return string[]
     */
    public function getAvatarList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <avatar>
     *
     * @param string $value
     * @return \sc\user\FeedBackReq
     */
    public function addAvatar( $value){
     return $this->_add(5, $value);
    }
  }
}

namespace sc\user {

  class FeedBackRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.FeedBackRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\FeedBackRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\FeedBackRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\user {

  class UserEditReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $userId = null;
    
    /**  @var int */
    public $sex = null;
    
    /**  @var string */
    public $username = null;
    
    /**  @var string */
    public $birthday = null;
    
    /**  @var string */
    public $avatar = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.UserEditReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 userId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "userId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 sex = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "sex";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING username = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "username";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING birthday = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "birthday";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING avatar = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "avatar";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\UserEditReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\UserEditReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <userId> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <userId> value
     *
     * @return \sc\user\UserEditReq
     */
    public function clearUserId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <userId> value
     *
     * @return int
     */
    public function getUserId(){
      return $this->_get(2);
    }
    
    /**
     * Set <userId> value
     *
     * @param int $value
     * @return \sc\user\UserEditReq
     */
    public function setUserId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <sex> has a value
     *
     * @return boolean
     */
    public function hasSex(){
      return $this->_has(3);
    }
    
    /**
     * Clear <sex> value
     *
     * @return \sc\user\UserEditReq
     */
    public function clearSex(){
      return $this->_clear(3);
    }
    
    /**
     * Get <sex> value
     *
     * @return int
     */
    public function getSex(){
      return $this->_get(3);
    }
    
    /**
     * Set <sex> value
     *
     * @param int $value
     * @return \sc\user\UserEditReq
     */
    public function setSex( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <username> has a value
     *
     * @return boolean
     */
    public function hasUsername(){
      return $this->_has(4);
    }
    
    /**
     * Clear <username> value
     *
     * @return \sc\user\UserEditReq
     */
    public function clearUsername(){
      return $this->_clear(4);
    }
    
    /**
     * Get <username> value
     *
     * @return string
     */
    public function getUsername(){
      return $this->_get(4);
    }
    
    /**
     * Set <username> value
     *
     * @param string $value
     * @return \sc\user\UserEditReq
     */
    public function setUsername( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <birthday> has a value
     *
     * @return boolean
     */
    public function hasBirthday(){
      return $this->_has(5);
    }
    
    /**
     * Clear <birthday> value
     *
     * @return \sc\user\UserEditReq
     */
    public function clearBirthday(){
      return $this->_clear(5);
    }
    
    /**
     * Get <birthday> value
     *
     * @return string
     */
    public function getBirthday(){
      return $this->_get(5);
    }
    
    /**
     * Set <birthday> value
     *
     * @param string $value
     * @return \sc\user\UserEditReq
     */
    public function setBirthday( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <avatar> has a value
     *
     * @return boolean
     */
    public function hasAvatar(){
      return $this->_has(6);
    }
    
    /**
     * Clear <avatar> value
     *
     * @return \sc\user\UserEditReq
     */
    public function clearAvatar(){
      return $this->_clear(6);
    }
    
    /**
     * Get <avatar> value
     *
     * @return string
     */
    public function getAvatar(){
      return $this->_get(6);
    }
    
    /**
     * Set <avatar> value
     *
     * @param string $value
     * @return \sc\user\UserEditReq
     */
    public function setAvatar( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace sc\user {

  class UserEditRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\user\UserProto */
    public $userProto = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.UserEditRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE userProto = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "userProto";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\user\UserProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\UserEditRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\UserEditRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <userProto> has a value
     *
     * @return boolean
     */
    public function hasUserProto(){
      return $this->_has(2);
    }
    
    /**
     * Clear <userProto> value
     *
     * @return \sc\user\UserEditRsp
     */
    public function clearUserProto(){
      return $this->_clear(2);
    }
    
    /**
     * Get <userProto> value
     *
     * @return \sc\user\UserProto
     */
    public function getUserProto(){
      return $this->_get(2);
    }
    
    /**
     * Set <userProto> value
     *
     * @param \sc\user\UserProto $value
     * @return \sc\user\UserEditRsp
     */
    public function setUserProto(\sc\user\UserProto $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class UserInfoReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $userId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.UserInfoReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 userId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "userId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\UserInfoReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\UserInfoReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <userId> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <userId> value
     *
     * @return \sc\user\UserInfoReq
     */
    public function clearUserId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <userId> value
     *
     * @return int
     */
    public function getUserId(){
      return $this->_get(2);
    }
    
    /**
     * Set <userId> value
     *
     * @param int $value
     * @return \sc\user\UserInfoReq
     */
    public function setUserId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class UserInfoRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\user\UserProto */
    public $userProto = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.UserInfoRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE userProto = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "userProto";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\user\UserProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\UserInfoRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\UserInfoRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <userProto> has a value
     *
     * @return boolean
     */
    public function hasUserProto(){
      return $this->_has(2);
    }
    
    /**
     * Clear <userProto> value
     *
     * @return \sc\user\UserInfoRsp
     */
    public function clearUserProto(){
      return $this->_clear(2);
    }
    
    /**
     * Get <userProto> value
     *
     * @return \sc\user\UserProto
     */
    public function getUserProto(){
      return $this->_get(2);
    }
    
    /**
     * Set <userProto> value
     *
     * @param \sc\user\UserProto $value
     * @return \sc\user\UserInfoRsp
     */
    public function setUserProto(\sc\user\UserProto $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class UserProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $sex = null;
    
    /**  @var int */
    public $score = null;
    
    /**  @var int */
    public $checkInSize = null;
    
    /**  @var int */
    public $checkInScore = null;
    
    /**  @var string */
    public $username = null;
    
    /**  @var string */
    public $wpUserId = null;
    
    /**  @var string */
    public $birthday = null;
    
    /**  @var string */
    public $avatar = null;
    
    /**  @var string */
    public $activateCode = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.UserProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 sex = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sex";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 score = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 checkInSize = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "checkInSize";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 checkInScore = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "checkInScore";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING username = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "username";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING wpUserId = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "wpUserId";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING birthday = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "birthday";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING avatar = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "avatar";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING activateCode = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "activateCode";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\user\UserProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\user\UserProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sex> has a value
     *
     * @return boolean
     */
    public function hasSex(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sex> value
     *
     * @return \sc\user\UserProto
     */
    public function clearSex(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sex> value
     *
     * @return int
     */
    public function getSex(){
      return $this->_get(2);
    }
    
    /**
     * Set <sex> value
     *
     * @param int $value
     * @return \sc\user\UserProto
     */
    public function setSex( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(3);
    }
    
    /**
     * Clear <score> value
     *
     * @return \sc\user\UserProto
     */
    public function clearScore(){
      return $this->_clear(3);
    }
    
    /**
     * Get <score> value
     *
     * @return int
     */
    public function getScore(){
      return $this->_get(3);
    }
    
    /**
     * Set <score> value
     *
     * @param int $value
     * @return \sc\user\UserProto
     */
    public function setScore( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <checkInSize> has a value
     *
     * @return boolean
     */
    public function hasCheckInSize(){
      return $this->_has(4);
    }
    
    /**
     * Clear <checkInSize> value
     *
     * @return \sc\user\UserProto
     */
    public function clearCheckInSize(){
      return $this->_clear(4);
    }
    
    /**
     * Get <checkInSize> value
     *
     * @return int
     */
    public function getCheckInSize(){
      return $this->_get(4);
    }
    
    /**
     * Set <checkInSize> value
     *
     * @param int $value
     * @return \sc\user\UserProto
     */
    public function setCheckInSize( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <checkInScore> has a value
     *
     * @return boolean
     */
    public function hasCheckInScore(){
      return $this->_has(5);
    }
    
    /**
     * Clear <checkInScore> value
     *
     * @return \sc\user\UserProto
     */
    public function clearCheckInScore(){
      return $this->_clear(5);
    }
    
    /**
     * Get <checkInScore> value
     *
     * @return int
     */
    public function getCheckInScore(){
      return $this->_get(5);
    }
    
    /**
     * Set <checkInScore> value
     *
     * @param int $value
     * @return \sc\user\UserProto
     */
    public function setCheckInScore( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <username> has a value
     *
     * @return boolean
     */
    public function hasUsername(){
      return $this->_has(6);
    }
    
    /**
     * Clear <username> value
     *
     * @return \sc\user\UserProto
     */
    public function clearUsername(){
      return $this->_clear(6);
    }
    
    /**
     * Get <username> value
     *
     * @return string
     */
    public function getUsername(){
      return $this->_get(6);
    }
    
    /**
     * Set <username> value
     *
     * @param string $value
     * @return \sc\user\UserProto
     */
    public function setUsername( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <wpUserId> has a value
     *
     * @return boolean
     */
    public function hasWpUserId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <wpUserId> value
     *
     * @return \sc\user\UserProto
     */
    public function clearWpUserId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <wpUserId> value
     *
     * @return string
     */
    public function getWpUserId(){
      return $this->_get(7);
    }
    
    /**
     * Set <wpUserId> value
     *
     * @param string $value
     * @return \sc\user\UserProto
     */
    public function setWpUserId( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <birthday> has a value
     *
     * @return boolean
     */
    public function hasBirthday(){
      return $this->_has(8);
    }
    
    /**
     * Clear <birthday> value
     *
     * @return \sc\user\UserProto
     */
    public function clearBirthday(){
      return $this->_clear(8);
    }
    
    /**
     * Get <birthday> value
     *
     * @return string
     */
    public function getBirthday(){
      return $this->_get(8);
    }
    
    /**
     * Set <birthday> value
     *
     * @param string $value
     * @return \sc\user\UserProto
     */
    public function setBirthday( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <avatar> has a value
     *
     * @return boolean
     */
    public function hasAvatar(){
      return $this->_has(9);
    }
    
    /**
     * Clear <avatar> value
     *
     * @return \sc\user\UserProto
     */
    public function clearAvatar(){
      return $this->_clear(9);
    }
    
    /**
     * Get <avatar> value
     *
     * @return string
     */
    public function getAvatar(){
      return $this->_get(9);
    }
    
    /**
     * Set <avatar> value
     *
     * @param string $value
     * @return \sc\user\UserProto
     */
    public function setAvatar( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <activateCode> has a value
     *
     * @return boolean
     */
    public function hasActivateCode(){
      return $this->_has(10);
    }
    
    /**
     * Clear <activateCode> value
     *
     * @return \sc\user\UserProto
     */
    public function clearActivateCode(){
      return $this->_clear(10);
    }
    
    /**
     * Get <activateCode> value
     *
     * @return string
     */
    public function getActivateCode(){
      return $this->_get(10);
    }
    
    /**
     * Set <activateCode> value
     *
     * @param string $value
     * @return \sc\user\UserProto
     */
    public function setActivateCode( $value){
      return $this->_set(10, $value);
    }
  }
}

namespace sc\user {

  class CommonReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var string */
    public $mobile = null;
    
    /**  @var string */
    public $passwd = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.CommonReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING passwd = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "passwd";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\CommonReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\CommonReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\user\CommonReq
     */
    public function clearMobile(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(2);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\user\CommonReq
     */
    public function setMobile( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <passwd> has a value
     *
     * @return boolean
     */
    public function hasPasswd(){
      return $this->_has(3);
    }
    
    /**
     * Clear <passwd> value
     *
     * @return \sc\user\CommonReq
     */
    public function clearPasswd(){
      return $this->_clear(3);
    }
    
    /**
     * Get <passwd> value
     *
     * @return string
     */
    public function getPasswd(){
      return $this->_get(3);
    }
    
    /**
     * Set <passwd> value
     *
     * @param string $value
     * @return \sc\user\CommonReq
     */
    public function setPasswd( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\user {

  class CommonRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\user\UserDataProto */
    public $userData = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.CommonRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE userData = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "userData";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\user\UserDataProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\CommonRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\CommonRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <userData> has a value
     *
     * @return boolean
     */
    public function hasUserData(){
      return $this->_has(2);
    }
    
    /**
     * Clear <userData> value
     *
     * @return \sc\user\CommonRsp
     */
    public function clearUserData(){
      return $this->_clear(2);
    }
    
    /**
     * Get <userData> value
     *
     * @return \sc\user\UserDataProto
     */
    public function getUserData(){
      return $this->_get(2);
    }
    
    /**
     * Set <userData> value
     *
     * @param \sc\user\UserDataProto $value
     * @return \sc\user\CommonRsp
     */
    public function setUserData(\sc\user\UserDataProto $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class UserDataProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $sex = null;
    
    /**  @var int */
    public $score = null;
    
    /**  @var int */
    public $checkInSize = null;
    
    /**  @var int */
    public $checkInScore = null;
    
    /**  @var string */
    public $username = null;
    
    /**  @var string */
    public $birthday = null;
    
    /**  @var string */
    public $mobile = null;
    
    /**  @var string */
    public $avatar = null;
    
    /**  @var string */
    public $activateCode = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.UserDataProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 sex = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sex";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 score = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 checkInSize = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "checkInSize";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 checkInScore = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "checkInScore";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING username = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "username";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING birthday = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "birthday";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING avatar = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "avatar";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING activateCode = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "activateCode";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\user\UserDataProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\user\UserDataProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sex> has a value
     *
     * @return boolean
     */
    public function hasSex(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sex> value
     *
     * @return \sc\user\UserDataProto
     */
    public function clearSex(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sex> value
     *
     * @return int
     */
    public function getSex(){
      return $this->_get(2);
    }
    
    /**
     * Set <sex> value
     *
     * @param int $value
     * @return \sc\user\UserDataProto
     */
    public function setSex( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(3);
    }
    
    /**
     * Clear <score> value
     *
     * @return \sc\user\UserDataProto
     */
    public function clearScore(){
      return $this->_clear(3);
    }
    
    /**
     * Get <score> value
     *
     * @return int
     */
    public function getScore(){
      return $this->_get(3);
    }
    
    /**
     * Set <score> value
     *
     * @param int $value
     * @return \sc\user\UserDataProto
     */
    public function setScore( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <checkInSize> has a value
     *
     * @return boolean
     */
    public function hasCheckInSize(){
      return $this->_has(4);
    }
    
    /**
     * Clear <checkInSize> value
     *
     * @return \sc\user\UserDataProto
     */
    public function clearCheckInSize(){
      return $this->_clear(4);
    }
    
    /**
     * Get <checkInSize> value
     *
     * @return int
     */
    public function getCheckInSize(){
      return $this->_get(4);
    }
    
    /**
     * Set <checkInSize> value
     *
     * @param int $value
     * @return \sc\user\UserDataProto
     */
    public function setCheckInSize( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <checkInScore> has a value
     *
     * @return boolean
     */
    public function hasCheckInScore(){
      return $this->_has(5);
    }
    
    /**
     * Clear <checkInScore> value
     *
     * @return \sc\user\UserDataProto
     */
    public function clearCheckInScore(){
      return $this->_clear(5);
    }
    
    /**
     * Get <checkInScore> value
     *
     * @return int
     */
    public function getCheckInScore(){
      return $this->_get(5);
    }
    
    /**
     * Set <checkInScore> value
     *
     * @param int $value
     * @return \sc\user\UserDataProto
     */
    public function setCheckInScore( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <username> has a value
     *
     * @return boolean
     */
    public function hasUsername(){
      return $this->_has(6);
    }
    
    /**
     * Clear <username> value
     *
     * @return \sc\user\UserDataProto
     */
    public function clearUsername(){
      return $this->_clear(6);
    }
    
    /**
     * Get <username> value
     *
     * @return string
     */
    public function getUsername(){
      return $this->_get(6);
    }
    
    /**
     * Set <username> value
     *
     * @param string $value
     * @return \sc\user\UserDataProto
     */
    public function setUsername( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <birthday> has a value
     *
     * @return boolean
     */
    public function hasBirthday(){
      return $this->_has(7);
    }
    
    /**
     * Clear <birthday> value
     *
     * @return \sc\user\UserDataProto
     */
    public function clearBirthday(){
      return $this->_clear(7);
    }
    
    /**
     * Get <birthday> value
     *
     * @return string
     */
    public function getBirthday(){
      return $this->_get(7);
    }
    
    /**
     * Set <birthday> value
     *
     * @param string $value
     * @return \sc\user\UserDataProto
     */
    public function setBirthday( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(8);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\user\UserDataProto
     */
    public function clearMobile(){
      return $this->_clear(8);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(8);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\user\UserDataProto
     */
    public function setMobile( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <avatar> has a value
     *
     * @return boolean
     */
    public function hasAvatar(){
      return $this->_has(9);
    }
    
    /**
     * Clear <avatar> value
     *
     * @return \sc\user\UserDataProto
     */
    public function clearAvatar(){
      return $this->_clear(9);
    }
    
    /**
     * Get <avatar> value
     *
     * @return string
     */
    public function getAvatar(){
      return $this->_get(9);
    }
    
    /**
     * Set <avatar> value
     *
     * @param string $value
     * @return \sc\user\UserDataProto
     */
    public function setAvatar( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <activateCode> has a value
     *
     * @return boolean
     */
    public function hasActivateCode(){
      return $this->_has(10);
    }
    
    /**
     * Clear <activateCode> value
     *
     * @return \sc\user\UserDataProto
     */
    public function clearActivateCode(){
      return $this->_clear(10);
    }
    
    /**
     * Get <activateCode> value
     *
     * @return string
     */
    public function getActivateCode(){
      return $this->_get(10);
    }
    
    /**
     * Set <activateCode> value
     *
     * @param string $value
     * @return \sc\user\UserDataProto
     */
    public function setActivateCode( $value){
      return $this->_set(10, $value);
    }
  }
}

namespace sc\user {

  class ModifyPassWordReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var string */
    public $mobile = null;
    
    /**  @var string */
    public $passwd = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.ModifyPassWordReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING passwd = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "passwd";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\ModifyPassWordReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\ModifyPassWordReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\user\ModifyPassWordReq
     */
    public function clearMobile(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(2);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\user\ModifyPassWordReq
     */
    public function setMobile( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <passwd> has a value
     *
     * @return boolean
     */
    public function hasPasswd(){
      return $this->_has(3);
    }
    
    /**
     * Clear <passwd> value
     *
     * @return \sc\user\ModifyPassWordReq
     */
    public function clearPasswd(){
      return $this->_clear(3);
    }
    
    /**
     * Get <passwd> value
     *
     * @return string
     */
    public function getPasswd(){
      return $this->_get(3);
    }
    
    /**
     * Set <passwd> value
     *
     * @param string $value
     * @return \sc\user\ModifyPassWordReq
     */
    public function setPasswd( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\user {

  class ModifyPassWordRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\user\UserDataProto */
    public $userData = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.ModifyPassWordRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE userData = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "userData";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\user\UserDataProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\ModifyPassWordRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\ModifyPassWordRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <userData> has a value
     *
     * @return boolean
     */
    public function hasUserData(){
      return $this->_has(2);
    }
    
    /**
     * Clear <userData> value
     *
     * @return \sc\user\ModifyPassWordRsp
     */
    public function clearUserData(){
      return $this->_clear(2);
    }
    
    /**
     * Get <userData> value
     *
     * @return \sc\user\UserDataProto
     */
    public function getUserData(){
      return $this->_get(2);
    }
    
    /**
     * Set <userData> value
     *
     * @param \sc\user\UserDataProto $value
     * @return \sc\user\ModifyPassWordRsp
     */
    public function setUserData(\sc\user\UserDataProto $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class SendVerificationReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var string */
    public $mobile = null;
    
    /**  @var int - \sc\user\VerificationCodeType */
    public $codeType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.SendVerificationReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM codeType = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "codeType";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\user\VerificationCodeType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\SendVerificationReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\SendVerificationReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\user\SendVerificationReq
     */
    public function clearMobile(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(2);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\user\SendVerificationReq
     */
    public function setMobile( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <codeType> has a value
     *
     * @return boolean
     */
    public function hasCodeType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <codeType> value
     *
     * @return \sc\user\SendVerificationReq
     */
    public function clearCodeType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <codeType> value
     *
     * @return int - \sc\user\VerificationCodeType
     */
    public function getCodeType(){
      return $this->_get(3);
    }
    
    /**
     * Set <codeType> value
     *
     * @param int - \sc\user\VerificationCodeType $value
     * @return \sc\user\SendVerificationReq
     */
    public function setCodeType( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\user {

  class SendVerificationRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.SendVerificationRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\SendVerificationRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\SendVerificationRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\user {

  class CheckVerificationReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var string */
    public $mobile = null;
    
    /**  @var string */
    public $verificationCode = null;
    
    /**  @var int - \sc\user\VerificationCodeType */
    public $codeType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.CheckVerificationReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING verificationCode = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "verificationCode";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM codeType = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "codeType";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\user\VerificationCodeType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\user\CheckVerificationReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\user\CheckVerificationReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(2);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\user\CheckVerificationReq
     */
    public function clearMobile(){
      return $this->_clear(2);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(2);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\user\CheckVerificationReq
     */
    public function setMobile( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <verificationCode> has a value
     *
     * @return boolean
     */
    public function hasVerificationCode(){
      return $this->_has(3);
    }
    
    /**
     * Clear <verificationCode> value
     *
     * @return \sc\user\CheckVerificationReq
     */
    public function clearVerificationCode(){
      return $this->_clear(3);
    }
    
    /**
     * Get <verificationCode> value
     *
     * @return string
     */
    public function getVerificationCode(){
      return $this->_get(3);
    }
    
    /**
     * Set <verificationCode> value
     *
     * @param string $value
     * @return \sc\user\CheckVerificationReq
     */
    public function setVerificationCode( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <codeType> has a value
     *
     * @return boolean
     */
    public function hasCodeType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <codeType> value
     *
     * @return \sc\user\CheckVerificationReq
     */
    public function clearCodeType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <codeType> value
     *
     * @return int - \sc\user\VerificationCodeType
     */
    public function getCodeType(){
      return $this->_get(4);
    }
    
    /**
     * Set <codeType> value
     *
     * @param int - \sc\user\VerificationCodeType $value
     * @return \sc\user\CheckVerificationReq
     */
    public function setCodeType( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace sc\user {

  class CheckVerificationRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var string */
    public $token = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.user.CheckVerificationRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL STRING token = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\user\CheckVerificationRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\user\CheckVerificationRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <token> has a value
     *
     * @return boolean
     */
    public function hasToken(){
      return $this->_has(2);
    }
    
    /**
     * Clear <token> value
     *
     * @return \sc\user\CheckVerificationRsp
     */
    public function clearToken(){
      return $this->_clear(2);
    }
    
    /**
     * Get <token> value
     *
     * @return string
     */
    public function getToken(){
      return $this->_get(2);
    }
    
    /**
     * Set <token> value
     *
     * @param string $value
     * @return \sc\user\CheckVerificationRsp
     */
    public function setToken( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\user {

  class UserServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param sc\user\CommonReq $input
     */
    public function Login(\sc\user\CommonReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/Login', $argument, '\sc\user\CommonRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\CommonReq $input
     */
    public function Register(\sc\user\CommonReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/Register', $argument, '\sc\user\CommonRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\ModifyPassWordReq $input
     */
    public function ModifyPassWord(\sc\user\ModifyPassWordReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/ModifyPassWord', $argument, '\sc\user\ModifyPassWordRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\ModifyPassWordUseOldPWReq $input
     */
    public function ModifyPassWordUseOldPW(\sc\user\ModifyPassWordUseOldPWReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/ModifyPassWordUseOldPW', $argument, '\sc\user\ModifyPassWordUseOldPWRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\SendVerificationReq $input
     */
    public function SendVerification(\sc\user\SendVerificationReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/SendVerification', $argument, '\sc\user\SendVerificationRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\CheckVerificationReq $input
     */
    public function CheckVerification(\sc\user\CheckVerificationReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/CheckVerification', $argument, '\sc\user\CheckVerificationRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\UserInfoReq $input
     */
    public function UserInfo(\sc\user\UserInfoReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/UserInfo', $argument, '\sc\user\UserInfoRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\UserEditReq $input
     */
    public function UserEdit(\sc\user\UserEditReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/UserEdit', $argument, '\sc\user\UserEditRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\FeedBackReq $input
     */
    public function FeedBack(\sc\user\FeedBackReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/FeedBack', $argument, '\sc\user\FeedBackRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\ShareActivateCountReq $input
     */
    public function ShareActivateCount(\sc\user\ShareActivateCountReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/ShareActivateCount', $argument, '\sc\user\ShareActivateCountRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\ActivateUserReq $input
     */
    public function ActivateUser(\sc\user\ActivateUserReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/ActivateUser', $argument, '\sc\user\ActivateUserRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\CheckReq $input
     */
    public function CheckIn(\sc\user\CheckReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/CheckIn', $argument, '\sc\user\CheckRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\MobileExistReq $input
     */
    public function RegisterMobileIsExist(\sc\user\MobileExistReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/RegisterMobileIsExist', $argument, '\sc\user\MobileExistRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\MobileVerifyReq $input
     */
    public function MobileVerify(\sc\user\MobileVerifyReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/MobileVerify', $argument, '\sc\user\MobileVerifyRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\SendVerifyReq $input
     */
    public function SendVerify(\sc\user\SendVerifyReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/SendVerify', $argument, '\sc\user\SendVerifyRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\CheckVerifyReq $input
     */
    public function CheckVerify(\sc\user\CheckVerifyReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/CheckVerify', $argument, '\sc\user\CheckVerifyRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\ModifyPWReq $input
     */
    public function ModifyPW(\sc\user\ModifyPWReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/ModifyPW', $argument, '\sc\user\ModifyPWRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\user\HasPasswdReq $input
     */
    public function HasPasswd(\sc\user\HasPasswdReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.user.UserService/HasPasswd', $argument, '\sc\user\HasPasswdRsp::deserialize', $metadata, $options);
    }
  }
}
