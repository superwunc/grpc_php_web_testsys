<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: Found.proto
//   Date: 2017-04-19 06:39:08

namespace sc\found {

  class StoreReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $storeId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.found.StoreReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 storeId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "storeId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\found\StoreReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\found\StoreReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <storeId> has a value
     *
     * @return boolean
     */
    public function hasStoreId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <storeId> value
     *
     * @return \sc\found\StoreReq
     */
    public function clearStoreId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <storeId> value
     *
     * @return int
     */
    public function getStoreId(){
      return $this->_get(2);
    }
    
    /**
     * Set <storeId> value
     *
     * @param int $value
     * @return \sc\found\StoreReq
     */
    public function setStoreId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\found {

  class StoreRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var \sc\found\StoreDataProto */
    public $storeData = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.found.StoreRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE storeData = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "storeData";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\found\StoreDataProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\found\StoreRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\found\StoreRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\found\StoreRsp
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\found\StoreRsp
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <storeData> has a value
     *
     * @return boolean
     */
    public function hasStoreData(){
      return $this->_has(3);
    }
    
    /**
     * Clear <storeData> value
     *
     * @return \sc\found\StoreRsp
     */
    public function clearStoreData(){
      return $this->_clear(3);
    }
    
    /**
     * Get <storeData> value
     *
     * @return \sc\found\StoreDataProto
     */
    public function getStoreData(){
      return $this->_get(3);
    }
    
    /**
     * Set <storeData> value
     *
     * @param \sc\found\StoreDataProto $value
     * @return \sc\found\StoreRsp
     */
    public function setStoreData(\sc\found\StoreDataProto $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\found {

  class PicUrlProto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $picUrl = null;
    
    /**  @var string */
    public $picTitle = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.found.PicUrlProto');

      // OPTIONAL STRING picUrl = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "picUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING picTitle = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "picTitle";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <picUrl> has a value
     *
     * @return boolean
     */
    public function hasPicUrl(){
      return $this->_has(1);
    }
    
    /**
     * Clear <picUrl> value
     *
     * @return \sc\found\PicUrlProto
     */
    public function clearPicUrl(){
      return $this->_clear(1);
    }
    
    /**
     * Get <picUrl> value
     *
     * @return string
     */
    public function getPicUrl(){
      return $this->_get(1);
    }
    
    /**
     * Set <picUrl> value
     *
     * @param string $value
     * @return \sc\found\PicUrlProto
     */
    public function setPicUrl( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <picTitle> has a value
     *
     * @return boolean
     */
    public function hasPicTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <picTitle> value
     *
     * @return \sc\found\PicUrlProto
     */
    public function clearPicTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <picTitle> value
     *
     * @return string
     */
    public function getPicTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <picTitle> value
     *
     * @param string $value
     * @return \sc\found\PicUrlProto
     */
    public function setPicTitle( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\found {

  class ScanReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $storeId = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.found.ScanReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 storeId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "storeId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\found\ScanReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\found\ScanReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <storeId> has a value
     *
     * @return boolean
     */
    public function hasStoreId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <storeId> value
     *
     * @return \sc\found\ScanReq
     */
    public function clearStoreId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <storeId> value
     *
     * @return int
     */
    public function getStoreId(){
      return $this->_get(2);
    }
    
    /**
     * Set <storeId> value
     *
     * @param int $value
     * @return \sc\found\ScanReq
     */
    public function setStoreId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\found {

  class ScanRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var \sc\found\ScanDataProto */
    public $ScanData = null;
    
    /**  @var \sc\found\StoreDataProto */
    public $storeData = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.found.ScanRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE ScanData = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ScanData";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\found\ScanDataProto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE storeData = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "storeData";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\found\StoreDataProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\found\ScanRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\found\ScanRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\found\ScanRsp
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\found\ScanRsp
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ScanData> has a value
     *
     * @return boolean
     */
    public function hasScanData(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ScanData> value
     *
     * @return \sc\found\ScanRsp
     */
    public function clearScanData(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ScanData> value
     *
     * @return \sc\found\ScanDataProto
     */
    public function getScanData(){
      return $this->_get(3);
    }
    
    /**
     * Set <ScanData> value
     *
     * @param \sc\found\ScanDataProto $value
     * @return \sc\found\ScanRsp
     */
    public function setScanData(\sc\found\ScanDataProto $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <storeData> has a value
     *
     * @return boolean
     */
    public function hasStoreData(){
      return $this->_has(4);
    }
    
    /**
     * Clear <storeData> value
     *
     * @return \sc\found\ScanRsp
     */
    public function clearStoreData(){
      return $this->_clear(4);
    }
    
    /**
     * Get <storeData> value
     *
     * @return \sc\found\StoreDataProto
     */
    public function getStoreData(){
      return $this->_get(4);
    }
    
    /**
     * Set <storeData> value
     *
     * @param \sc\found\StoreDataProto $value
     * @return \sc\found\ScanRsp
     */
    public function setStoreData(\sc\found\StoreDataProto $value){
      return $this->_set(4, $value);
    }
  }
}

namespace sc\found {

  class ScanDataProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $scope = null;
    
    /**  @var string */
    public $type = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.found.ScanDataProto');

      // OPTIONAL UINT32 scope = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "scope";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <scope> has a value
     *
     * @return boolean
     */
    public function hasScope(){
      return $this->_has(1);
    }
    
    /**
     * Clear <scope> value
     *
     * @return \sc\found\ScanDataProto
     */
    public function clearScope(){
      return $this->_clear(1);
    }
    
    /**
     * Get <scope> value
     *
     * @return int
     */
    public function getScope(){
      return $this->_get(1);
    }
    
    /**
     * Set <scope> value
     *
     * @param int $value
     * @return \sc\found\ScanDataProto
     */
    public function setScope( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \sc\found\ScanDataProto
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return string
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param string $value
     * @return \sc\found\ScanDataProto
     */
    public function setType( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\found {

  class StoreDataProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $price = null;
    
    /**  @var string */
    public $telphone = null;
    
    /**  @var string */
    public $address = null;
    
    /**  @var string */
    public $businessHours = null;
    
    /**  @var string */
    public $longitude = null;
    
    /**  @var string */
    public $latitude = null;
    
    /**  @var \sc\found\PicUrlProto[]  */
    public $picUrls = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.found.StoreDataProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING price = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "price";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING telphone = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "telphone";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING address = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "address";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING businessHours = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "businessHours";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING longitude = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "longitude";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING latitude = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "latitude";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE picUrls = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "picUrls";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\found\PicUrlProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\found\StoreDataProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\found\StoreDataProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\found\StoreDataProto
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\found\StoreDataProto
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <price> has a value
     *
     * @return boolean
     */
    public function hasPrice(){
      return $this->_has(3);
    }
    
    /**
     * Clear <price> value
     *
     * @return \sc\found\StoreDataProto
     */
    public function clearPrice(){
      return $this->_clear(3);
    }
    
    /**
     * Get <price> value
     *
     * @return string
     */
    public function getPrice(){
      return $this->_get(3);
    }
    
    /**
     * Set <price> value
     *
     * @param string $value
     * @return \sc\found\StoreDataProto
     */
    public function setPrice( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <telphone> has a value
     *
     * @return boolean
     */
    public function hasTelphone(){
      return $this->_has(4);
    }
    
    /**
     * Clear <telphone> value
     *
     * @return \sc\found\StoreDataProto
     */
    public function clearTelphone(){
      return $this->_clear(4);
    }
    
    /**
     * Get <telphone> value
     *
     * @return string
     */
    public function getTelphone(){
      return $this->_get(4);
    }
    
    /**
     * Set <telphone> value
     *
     * @param string $value
     * @return \sc\found\StoreDataProto
     */
    public function setTelphone( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <address> has a value
     *
     * @return boolean
     */
    public function hasAddress(){
      return $this->_has(5);
    }
    
    /**
     * Clear <address> value
     *
     * @return \sc\found\StoreDataProto
     */
    public function clearAddress(){
      return $this->_clear(5);
    }
    
    /**
     * Get <address> value
     *
     * @return string
     */
    public function getAddress(){
      return $this->_get(5);
    }
    
    /**
     * Set <address> value
     *
     * @param string $value
     * @return \sc\found\StoreDataProto
     */
    public function setAddress( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <businessHours> has a value
     *
     * @return boolean
     */
    public function hasBusinessHours(){
      return $this->_has(6);
    }
    
    /**
     * Clear <businessHours> value
     *
     * @return \sc\found\StoreDataProto
     */
    public function clearBusinessHours(){
      return $this->_clear(6);
    }
    
    /**
     * Get <businessHours> value
     *
     * @return string
     */
    public function getBusinessHours(){
      return $this->_get(6);
    }
    
    /**
     * Set <businessHours> value
     *
     * @param string $value
     * @return \sc\found\StoreDataProto
     */
    public function setBusinessHours( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <longitude> has a value
     *
     * @return boolean
     */
    public function hasLongitude(){
      return $this->_has(7);
    }
    
    /**
     * Clear <longitude> value
     *
     * @return \sc\found\StoreDataProto
     */
    public function clearLongitude(){
      return $this->_clear(7);
    }
    
    /**
     * Get <longitude> value
     *
     * @return string
     */
    public function getLongitude(){
      return $this->_get(7);
    }
    
    /**
     * Set <longitude> value
     *
     * @param string $value
     * @return \sc\found\StoreDataProto
     */
    public function setLongitude( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <latitude> has a value
     *
     * @return boolean
     */
    public function hasLatitude(){
      return $this->_has(8);
    }
    
    /**
     * Clear <latitude> value
     *
     * @return \sc\found\StoreDataProto
     */
    public function clearLatitude(){
      return $this->_clear(8);
    }
    
    /**
     * Get <latitude> value
     *
     * @return string
     */
    public function getLatitude(){
      return $this->_get(8);
    }
    
    /**
     * Set <latitude> value
     *
     * @param string $value
     * @return \sc\found\StoreDataProto
     */
    public function setLatitude( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <picUrls> has a value
     *
     * @return boolean
     */
    public function hasPicUrls(){
      return $this->_has(9);
    }
    
    /**
     * Clear <picUrls> value
     *
     * @return \sc\found\StoreDataProto
     */
    public function clearPicUrls(){
      return $this->_clear(9);
    }
    
    /**
     * Get <picUrls> value
     *
     * @param int $idx
     * @return \sc\found\PicUrlProto
     */
    public function getPicUrls($idx = NULL){
      return $this->_get(9, $idx);
    }
    
    /**
     * Set <picUrls> value
     *
     * @param \sc\found\PicUrlProto $value
     * @return \sc\found\StoreDataProto
     */
    public function setPicUrls(\sc\found\PicUrlProto $value, $idx = NULL){
      return $this->_set(9, $value, $idx);
    }
    
    /**
     * Get all elements of <picUrls>
     *
     * @return \sc\found\PicUrlProto[]
     */
    public function getPicUrlsList(){
     return $this->_get(9);
    }
    
    /**
     * Add a new element to <picUrls>
     *
     * @param \sc\found\PicUrlProto $value
     * @return \sc\found\StoreDataProto
     */
    public function addPicUrls(\sc\found\PicUrlProto $value){
     return $this->_add(9, $value);
    }
  }
}

namespace sc\found {

  class PraiseReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $type = null;
    
    /**  @var int */
    public $idType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.found.PraiseReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT32 id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 type = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 idType = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "idType";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\found\PraiseReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\found\PraiseReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\found\PraiseReq
     */
    public function clearId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(2);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\found\PraiseReq
     */
    public function setId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(3);
    }
    
    /**
     * Clear <type> value
     *
     * @return \sc\found\PraiseReq
     */
    public function clearType(){
      return $this->_clear(3);
    }
    
    /**
     * Get <type> value
     *
     * @return int
     */
    public function getType(){
      return $this->_get(3);
    }
    
    /**
     * Set <type> value
     *
     * @param int $value
     * @return \sc\found\PraiseReq
     */
    public function setType( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <idType> has a value
     *
     * @return boolean
     */
    public function hasIdType(){
      return $this->_has(4);
    }
    
    /**
     * Clear <idType> value
     *
     * @return \sc\found\PraiseReq
     */
    public function clearIdType(){
      return $this->_clear(4);
    }
    
    /**
     * Get <idType> value
     *
     * @return int
     */
    public function getIdType(){
      return $this->_get(4);
    }
    
    /**
     * Set <idType> value
     *
     * @param int $value
     * @return \sc\found\PraiseReq
     */
    public function setIdType( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace sc\found {

  class PraiseRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var \sc\found\PraiseDataProto */
    public $praiseData = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.found.PraiseRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE praiseData = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "praiseData";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\found\PraiseDataProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\found\PraiseRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\found\PraiseRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\found\PraiseRsp
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\found\PraiseRsp
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <praiseData> has a value
     *
     * @return boolean
     */
    public function hasPraiseData(){
      return $this->_has(3);
    }
    
    /**
     * Clear <praiseData> value
     *
     * @return \sc\found\PraiseRsp
     */
    public function clearPraiseData(){
      return $this->_clear(3);
    }
    
    /**
     * Get <praiseData> value
     *
     * @return \sc\found\PraiseDataProto
     */
    public function getPraiseData(){
      return $this->_get(3);
    }
    
    /**
     * Set <praiseData> value
     *
     * @param \sc\found\PraiseDataProto $value
     * @return \sc\found\PraiseRsp
     */
    public function setPraiseData(\sc\found\PraiseDataProto $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\found {

  class PraiseDataProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $isZan = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $picUrl = null;
    
    /**  @var string */
    public $viewOne = null;
    
    /**  @var string */
    public $viewTwo = null;
    
    /**  @var string */
    public $viewThree = null;
    
    /**  @var string */
    public $viewFour = null;
    
    /**  @var string */
    public $linkType = null;
    
    /**  @var string */
    public $link = null;
    
    /**  @var string */
    public $bottomScan = null;
    
    /**  @var string */
    public $sumZan = null;
    
    /**  @var string */
    public $sumBishi = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.found.PraiseDataProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 isZan = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "isZan";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING picUrl = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "picUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING viewOne = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "viewOne";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING viewTwo = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "viewTwo";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING viewThree = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "viewThree";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING viewFour = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "viewFour";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING linkType = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "linkType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING link = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING bottomScan = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "bottomScan";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sumZan = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "sumZan";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sumBishi = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "sumBishi";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\found\PraiseDataProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\found\PraiseDataProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <isZan> has a value
     *
     * @return boolean
     */
    public function hasIsZan(){
      return $this->_has(2);
    }
    
    /**
     * Clear <isZan> value
     *
     * @return \sc\found\PraiseDataProto
     */
    public function clearIsZan(){
      return $this->_clear(2);
    }
    
    /**
     * Get <isZan> value
     *
     * @return int
     */
    public function getIsZan(){
      return $this->_get(2);
    }
    
    /**
     * Set <isZan> value
     *
     * @param int $value
     * @return \sc\found\PraiseDataProto
     */
    public function setIsZan( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(3);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\found\PraiseDataProto
     */
    public function clearTitle(){
      return $this->_clear(3);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(3);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\found\PraiseDataProto
     */
    public function setTitle( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <picUrl> has a value
     *
     * @return boolean
     */
    public function hasPicUrl(){
      return $this->_has(4);
    }
    
    /**
     * Clear <picUrl> value
     *
     * @return \sc\found\PraiseDataProto
     */
    public function clearPicUrl(){
      return $this->_clear(4);
    }
    
    /**
     * Get <picUrl> value
     *
     * @return string
     */
    public function getPicUrl(){
      return $this->_get(4);
    }
    
    /**
     * Set <picUrl> value
     *
     * @param string $value
     * @return \sc\found\PraiseDataProto
     */
    public function setPicUrl( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <viewOne> has a value
     *
     * @return boolean
     */
    public function hasViewOne(){
      return $this->_has(5);
    }
    
    /**
     * Clear <viewOne> value
     *
     * @return \sc\found\PraiseDataProto
     */
    public function clearViewOne(){
      return $this->_clear(5);
    }
    
    /**
     * Get <viewOne> value
     *
     * @return string
     */
    public function getViewOne(){
      return $this->_get(5);
    }
    
    /**
     * Set <viewOne> value
     *
     * @param string $value
     * @return \sc\found\PraiseDataProto
     */
    public function setViewOne( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <viewTwo> has a value
     *
     * @return boolean
     */
    public function hasViewTwo(){
      return $this->_has(6);
    }
    
    /**
     * Clear <viewTwo> value
     *
     * @return \sc\found\PraiseDataProto
     */
    public function clearViewTwo(){
      return $this->_clear(6);
    }
    
    /**
     * Get <viewTwo> value
     *
     * @return string
     */
    public function getViewTwo(){
      return $this->_get(6);
    }
    
    /**
     * Set <viewTwo> value
     *
     * @param string $value
     * @return \sc\found\PraiseDataProto
     */
    public function setViewTwo( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <viewThree> has a value
     *
     * @return boolean
     */
    public function hasViewThree(){
      return $this->_has(7);
    }
    
    /**
     * Clear <viewThree> value
     *
     * @return \sc\found\PraiseDataProto
     */
    public function clearViewThree(){
      return $this->_clear(7);
    }
    
    /**
     * Get <viewThree> value
     *
     * @return string
     */
    public function getViewThree(){
      return $this->_get(7);
    }
    
    /**
     * Set <viewThree> value
     *
     * @param string $value
     * @return \sc\found\PraiseDataProto
     */
    public function setViewThree( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <viewFour> has a value
     *
     * @return boolean
     */
    public function hasViewFour(){
      return $this->_has(8);
    }
    
    /**
     * Clear <viewFour> value
     *
     * @return \sc\found\PraiseDataProto
     */
    public function clearViewFour(){
      return $this->_clear(8);
    }
    
    /**
     * Get <viewFour> value
     *
     * @return string
     */
    public function getViewFour(){
      return $this->_get(8);
    }
    
    /**
     * Set <viewFour> value
     *
     * @param string $value
     * @return \sc\found\PraiseDataProto
     */
    public function setViewFour( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <linkType> has a value
     *
     * @return boolean
     */
    public function hasLinkType(){
      return $this->_has(9);
    }
    
    /**
     * Clear <linkType> value
     *
     * @return \sc\found\PraiseDataProto
     */
    public function clearLinkType(){
      return $this->_clear(9);
    }
    
    /**
     * Get <linkType> value
     *
     * @return string
     */
    public function getLinkType(){
      return $this->_get(9);
    }
    
    /**
     * Set <linkType> value
     *
     * @param string $value
     * @return \sc\found\PraiseDataProto
     */
    public function setLinkType( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink(){
      return $this->_has(10);
    }
    
    /**
     * Clear <link> value
     *
     * @return \sc\found\PraiseDataProto
     */
    public function clearLink(){
      return $this->_clear(10);
    }
    
    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink(){
      return $this->_get(10);
    }
    
    /**
     * Set <link> value
     *
     * @param string $value
     * @return \sc\found\PraiseDataProto
     */
    public function setLink( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <bottomScan> has a value
     *
     * @return boolean
     */
    public function hasBottomScan(){
      return $this->_has(11);
    }
    
    /**
     * Clear <bottomScan> value
     *
     * @return \sc\found\PraiseDataProto
     */
    public function clearBottomScan(){
      return $this->_clear(11);
    }
    
    /**
     * Get <bottomScan> value
     *
     * @return string
     */
    public function getBottomScan(){
      return $this->_get(11);
    }
    
    /**
     * Set <bottomScan> value
     *
     * @param string $value
     * @return \sc\found\PraiseDataProto
     */
    public function setBottomScan( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <sumZan> has a value
     *
     * @return boolean
     */
    public function hasSumZan(){
      return $this->_has(12);
    }
    
    /**
     * Clear <sumZan> value
     *
     * @return \sc\found\PraiseDataProto
     */
    public function clearSumZan(){
      return $this->_clear(12);
    }
    
    /**
     * Get <sumZan> value
     *
     * @return string
     */
    public function getSumZan(){
      return $this->_get(12);
    }
    
    /**
     * Set <sumZan> value
     *
     * @param string $value
     * @return \sc\found\PraiseDataProto
     */
    public function setSumZan( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <sumBishi> has a value
     *
     * @return boolean
     */
    public function hasSumBishi(){
      return $this->_has(13);
    }
    
    /**
     * Clear <sumBishi> value
     *
     * @return \sc\found\PraiseDataProto
     */
    public function clearSumBishi(){
      return $this->_clear(13);
    }
    
    /**
     * Get <sumBishi> value
     *
     * @return string
     */
    public function getSumBishi(){
      return $this->_get(13);
    }
    
    /**
     * Set <sumBishi> value
     *
     * @param string $value
     * @return \sc\found\PraiseDataProto
     */
    public function setSumBishi( $value){
      return $this->_set(13, $value);
    }
  }
}

namespace sc\found {

  class RecommendReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.found.RecommendReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\found\RecommendReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\found\RecommendReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\found {

  class RecommendRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var \sc\found\RecommendDataProto[]  */
    public $recommendData = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.found.RecommendRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE recommendData = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "recommendData";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\found\RecommendDataProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\found\RecommendRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\found\RecommendRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\found\RecommendRsp
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\found\RecommendRsp
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <recommendData> has a value
     *
     * @return boolean
     */
    public function hasRecommendData(){
      return $this->_has(3);
    }
    
    /**
     * Clear <recommendData> value
     *
     * @return \sc\found\RecommendRsp
     */
    public function clearRecommendData(){
      return $this->_clear(3);
    }
    
    /**
     * Get <recommendData> value
     *
     * @param int $idx
     * @return \sc\found\RecommendDataProto
     */
    public function getRecommendData($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <recommendData> value
     *
     * @param \sc\found\RecommendDataProto $value
     * @return \sc\found\RecommendRsp
     */
    public function setRecommendData(\sc\found\RecommendDataProto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <recommendData>
     *
     * @return \sc\found\RecommendDataProto[]
     */
    public function getRecommendDataList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <recommendData>
     *
     * @param \sc\found\RecommendDataProto $value
     * @return \sc\found\RecommendRsp
     */
    public function addRecommendData(\sc\found\RecommendDataProto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace sc\found {

  class RecommendDataProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $isZan = null;
    
    /**  @var string */
    public $picUrl = null;
    
    /**  @var string */
    public $viewOne = null;
    
    /**  @var string */
    public $viewTwo = null;
    
    /**  @var string */
    public $viewThree = null;
    
    /**  @var string */
    public $viewFour = null;
    
    /**  @var string */
    public $linkType = null;
    
    /**  @var string */
    public $link = null;
    
    /**  @var string */
    public $longitude = null;
    
    /**  @var string */
    public $latitude = null;
    
    /**  @var string */
    public $bottomScan = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $sumZan = null;
    
    /**  @var string */
    public $sumBishi = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.found.RecommendDataProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 isZan = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "isZan";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING picUrl = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "picUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING viewOne = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "viewOne";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING viewTwo = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "viewTwo";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING viewThree = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "viewThree";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING viewFour = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "viewFour";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING linkType = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "linkType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING link = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING longitude = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "longitude";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING latitude = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "latitude";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING bottomScan = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "bottomScan";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sumZan = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "sumZan";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sumBishi = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "sumBishi";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\found\RecommendDataProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\found\RecommendDataProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <isZan> has a value
     *
     * @return boolean
     */
    public function hasIsZan(){
      return $this->_has(2);
    }
    
    /**
     * Clear <isZan> value
     *
     * @return \sc\found\RecommendDataProto
     */
    public function clearIsZan(){
      return $this->_clear(2);
    }
    
    /**
     * Get <isZan> value
     *
     * @return int
     */
    public function getIsZan(){
      return $this->_get(2);
    }
    
    /**
     * Set <isZan> value
     *
     * @param int $value
     * @return \sc\found\RecommendDataProto
     */
    public function setIsZan( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <picUrl> has a value
     *
     * @return boolean
     */
    public function hasPicUrl(){
      return $this->_has(3);
    }
    
    /**
     * Clear <picUrl> value
     *
     * @return \sc\found\RecommendDataProto
     */
    public function clearPicUrl(){
      return $this->_clear(3);
    }
    
    /**
     * Get <picUrl> value
     *
     * @return string
     */
    public function getPicUrl(){
      return $this->_get(3);
    }
    
    /**
     * Set <picUrl> value
     *
     * @param string $value
     * @return \sc\found\RecommendDataProto
     */
    public function setPicUrl( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <viewOne> has a value
     *
     * @return boolean
     */
    public function hasViewOne(){
      return $this->_has(4);
    }
    
    /**
     * Clear <viewOne> value
     *
     * @return \sc\found\RecommendDataProto
     */
    public function clearViewOne(){
      return $this->_clear(4);
    }
    
    /**
     * Get <viewOne> value
     *
     * @return string
     */
    public function getViewOne(){
      return $this->_get(4);
    }
    
    /**
     * Set <viewOne> value
     *
     * @param string $value
     * @return \sc\found\RecommendDataProto
     */
    public function setViewOne( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <viewTwo> has a value
     *
     * @return boolean
     */
    public function hasViewTwo(){
      return $this->_has(5);
    }
    
    /**
     * Clear <viewTwo> value
     *
     * @return \sc\found\RecommendDataProto
     */
    public function clearViewTwo(){
      return $this->_clear(5);
    }
    
    /**
     * Get <viewTwo> value
     *
     * @return string
     */
    public function getViewTwo(){
      return $this->_get(5);
    }
    
    /**
     * Set <viewTwo> value
     *
     * @param string $value
     * @return \sc\found\RecommendDataProto
     */
    public function setViewTwo( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <viewThree> has a value
     *
     * @return boolean
     */
    public function hasViewThree(){
      return $this->_has(6);
    }
    
    /**
     * Clear <viewThree> value
     *
     * @return \sc\found\RecommendDataProto
     */
    public function clearViewThree(){
      return $this->_clear(6);
    }
    
    /**
     * Get <viewThree> value
     *
     * @return string
     */
    public function getViewThree(){
      return $this->_get(6);
    }
    
    /**
     * Set <viewThree> value
     *
     * @param string $value
     * @return \sc\found\RecommendDataProto
     */
    public function setViewThree( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <viewFour> has a value
     *
     * @return boolean
     */
    public function hasViewFour(){
      return $this->_has(7);
    }
    
    /**
     * Clear <viewFour> value
     *
     * @return \sc\found\RecommendDataProto
     */
    public function clearViewFour(){
      return $this->_clear(7);
    }
    
    /**
     * Get <viewFour> value
     *
     * @return string
     */
    public function getViewFour(){
      return $this->_get(7);
    }
    
    /**
     * Set <viewFour> value
     *
     * @param string $value
     * @return \sc\found\RecommendDataProto
     */
    public function setViewFour( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <linkType> has a value
     *
     * @return boolean
     */
    public function hasLinkType(){
      return $this->_has(8);
    }
    
    /**
     * Clear <linkType> value
     *
     * @return \sc\found\RecommendDataProto
     */
    public function clearLinkType(){
      return $this->_clear(8);
    }
    
    /**
     * Get <linkType> value
     *
     * @return string
     */
    public function getLinkType(){
      return $this->_get(8);
    }
    
    /**
     * Set <linkType> value
     *
     * @param string $value
     * @return \sc\found\RecommendDataProto
     */
    public function setLinkType( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink(){
      return $this->_has(9);
    }
    
    /**
     * Clear <link> value
     *
     * @return \sc\found\RecommendDataProto
     */
    public function clearLink(){
      return $this->_clear(9);
    }
    
    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink(){
      return $this->_get(9);
    }
    
    /**
     * Set <link> value
     *
     * @param string $value
     * @return \sc\found\RecommendDataProto
     */
    public function setLink( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <longitude> has a value
     *
     * @return boolean
     */
    public function hasLongitude(){
      return $this->_has(10);
    }
    
    /**
     * Clear <longitude> value
     *
     * @return \sc\found\RecommendDataProto
     */
    public function clearLongitude(){
      return $this->_clear(10);
    }
    
    /**
     * Get <longitude> value
     *
     * @return string
     */
    public function getLongitude(){
      return $this->_get(10);
    }
    
    /**
     * Set <longitude> value
     *
     * @param string $value
     * @return \sc\found\RecommendDataProto
     */
    public function setLongitude( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <latitude> has a value
     *
     * @return boolean
     */
    public function hasLatitude(){
      return $this->_has(11);
    }
    
    /**
     * Clear <latitude> value
     *
     * @return \sc\found\RecommendDataProto
     */
    public function clearLatitude(){
      return $this->_clear(11);
    }
    
    /**
     * Get <latitude> value
     *
     * @return string
     */
    public function getLatitude(){
      return $this->_get(11);
    }
    
    /**
     * Set <latitude> value
     *
     * @param string $value
     * @return \sc\found\RecommendDataProto
     */
    public function setLatitude( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <bottomScan> has a value
     *
     * @return boolean
     */
    public function hasBottomScan(){
      return $this->_has(12);
    }
    
    /**
     * Clear <bottomScan> value
     *
     * @return \sc\found\RecommendDataProto
     */
    public function clearBottomScan(){
      return $this->_clear(12);
    }
    
    /**
     * Get <bottomScan> value
     *
     * @return string
     */
    public function getBottomScan(){
      return $this->_get(12);
    }
    
    /**
     * Set <bottomScan> value
     *
     * @param string $value
     * @return \sc\found\RecommendDataProto
     */
    public function setBottomScan( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(13);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\found\RecommendDataProto
     */
    public function clearTitle(){
      return $this->_clear(13);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(13);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\found\RecommendDataProto
     */
    public function setTitle( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <sumZan> has a value
     *
     * @return boolean
     */
    public function hasSumZan(){
      return $this->_has(14);
    }
    
    /**
     * Clear <sumZan> value
     *
     * @return \sc\found\RecommendDataProto
     */
    public function clearSumZan(){
      return $this->_clear(14);
    }
    
    /**
     * Get <sumZan> value
     *
     * @return string
     */
    public function getSumZan(){
      return $this->_get(14);
    }
    
    /**
     * Set <sumZan> value
     *
     * @param string $value
     * @return \sc\found\RecommendDataProto
     */
    public function setSumZan( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <sumBishi> has a value
     *
     * @return boolean
     */
    public function hasSumBishi(){
      return $this->_has(15);
    }
    
    /**
     * Clear <sumBishi> value
     *
     * @return \sc\found\RecommendDataProto
     */
    public function clearSumBishi(){
      return $this->_clear(15);
    }
    
    /**
     * Get <sumBishi> value
     *
     * @return string
     */
    public function getSumBishi(){
      return $this->_get(15);
    }
    
    /**
     * Set <sumBishi> value
     *
     * @param string $value
     * @return \sc\found\RecommendDataProto
     */
    public function setSumBishi( $value){
      return $this->_set(15, $value);
    }
  }
}

namespace sc\found {

  class FoundReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.found.FoundReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\found\FoundReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\found\FoundReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\found {

  class FoundRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var \sc\found\FoundDataProto[]  */
    public $foundData = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.found.FoundRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE foundData = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "foundData";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\found\FoundDataProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\found\FoundRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\found\FoundRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\found\FoundRsp
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\found\FoundRsp
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <foundData> has a value
     *
     * @return boolean
     */
    public function hasFoundData(){
      return $this->_has(3);
    }
    
    /**
     * Clear <foundData> value
     *
     * @return \sc\found\FoundRsp
     */
    public function clearFoundData(){
      return $this->_clear(3);
    }
    
    /**
     * Get <foundData> value
     *
     * @param int $idx
     * @return \sc\found\FoundDataProto
     */
    public function getFoundData($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <foundData> value
     *
     * @param \sc\found\FoundDataProto $value
     * @return \sc\found\FoundRsp
     */
    public function setFoundData(\sc\found\FoundDataProto $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <foundData>
     *
     * @return \sc\found\FoundDataProto[]
     */
    public function getFoundDataList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <foundData>
     *
     * @param \sc\found\FoundDataProto $value
     * @return \sc\found\FoundRsp
     */
    public function addFoundData(\sc\found\FoundDataProto $value){
     return $this->_add(3, $value);
    }
  }
}

namespace sc\found {

  class FoundDataProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $isZan = null;
    
    /**  @var string */
    public $picUrl = null;
    
    /**  @var string */
    public $viewOne = null;
    
    /**  @var string */
    public $viewTwo = null;
    
    /**  @var string */
    public $viewThree = null;
    
    /**  @var string */
    public $viewFour = null;
    
    /**  @var string */
    public $linkType = null;
    
    /**  @var string */
    public $link = null;
    
    /**  @var string */
    public $longitude = null;
    
    /**  @var string */
    public $latitude = null;
    
    /**  @var string */
    public $bottomScan = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var string */
    public $sumZan = null;
    
    /**  @var string */
    public $sumBishi = null;
    
    /**  @var string */
    public $distance = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.found.FoundDataProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 isZan = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "isZan";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING picUrl = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "picUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING viewOne = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "viewOne";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING viewTwo = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "viewTwo";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING viewThree = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "viewThree";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING viewFour = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "viewFour";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING linkType = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "linkType";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING link = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "link";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING longitude = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "longitude";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING latitude = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "latitude";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING bottomScan = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "bottomScan";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sumZan = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "sumZan";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sumBishi = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "sumBishi";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING distance = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "distance";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\found\FoundDataProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\found\FoundDataProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <isZan> has a value
     *
     * @return boolean
     */
    public function hasIsZan(){
      return $this->_has(2);
    }
    
    /**
     * Clear <isZan> value
     *
     * @return \sc\found\FoundDataProto
     */
    public function clearIsZan(){
      return $this->_clear(2);
    }
    
    /**
     * Get <isZan> value
     *
     * @return int
     */
    public function getIsZan(){
      return $this->_get(2);
    }
    
    /**
     * Set <isZan> value
     *
     * @param int $value
     * @return \sc\found\FoundDataProto
     */
    public function setIsZan( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <picUrl> has a value
     *
     * @return boolean
     */
    public function hasPicUrl(){
      return $this->_has(3);
    }
    
    /**
     * Clear <picUrl> value
     *
     * @return \sc\found\FoundDataProto
     */
    public function clearPicUrl(){
      return $this->_clear(3);
    }
    
    /**
     * Get <picUrl> value
     *
     * @return string
     */
    public function getPicUrl(){
      return $this->_get(3);
    }
    
    /**
     * Set <picUrl> value
     *
     * @param string $value
     * @return \sc\found\FoundDataProto
     */
    public function setPicUrl( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <viewOne> has a value
     *
     * @return boolean
     */
    public function hasViewOne(){
      return $this->_has(4);
    }
    
    /**
     * Clear <viewOne> value
     *
     * @return \sc\found\FoundDataProto
     */
    public function clearViewOne(){
      return $this->_clear(4);
    }
    
    /**
     * Get <viewOne> value
     *
     * @return string
     */
    public function getViewOne(){
      return $this->_get(4);
    }
    
    /**
     * Set <viewOne> value
     *
     * @param string $value
     * @return \sc\found\FoundDataProto
     */
    public function setViewOne( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <viewTwo> has a value
     *
     * @return boolean
     */
    public function hasViewTwo(){
      return $this->_has(5);
    }
    
    /**
     * Clear <viewTwo> value
     *
     * @return \sc\found\FoundDataProto
     */
    public function clearViewTwo(){
      return $this->_clear(5);
    }
    
    /**
     * Get <viewTwo> value
     *
     * @return string
     */
    public function getViewTwo(){
      return $this->_get(5);
    }
    
    /**
     * Set <viewTwo> value
     *
     * @param string $value
     * @return \sc\found\FoundDataProto
     */
    public function setViewTwo( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <viewThree> has a value
     *
     * @return boolean
     */
    public function hasViewThree(){
      return $this->_has(6);
    }
    
    /**
     * Clear <viewThree> value
     *
     * @return \sc\found\FoundDataProto
     */
    public function clearViewThree(){
      return $this->_clear(6);
    }
    
    /**
     * Get <viewThree> value
     *
     * @return string
     */
    public function getViewThree(){
      return $this->_get(6);
    }
    
    /**
     * Set <viewThree> value
     *
     * @param string $value
     * @return \sc\found\FoundDataProto
     */
    public function setViewThree( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <viewFour> has a value
     *
     * @return boolean
     */
    public function hasViewFour(){
      return $this->_has(7);
    }
    
    /**
     * Clear <viewFour> value
     *
     * @return \sc\found\FoundDataProto
     */
    public function clearViewFour(){
      return $this->_clear(7);
    }
    
    /**
     * Get <viewFour> value
     *
     * @return string
     */
    public function getViewFour(){
      return $this->_get(7);
    }
    
    /**
     * Set <viewFour> value
     *
     * @param string $value
     * @return \sc\found\FoundDataProto
     */
    public function setViewFour( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <linkType> has a value
     *
     * @return boolean
     */
    public function hasLinkType(){
      return $this->_has(8);
    }
    
    /**
     * Clear <linkType> value
     *
     * @return \sc\found\FoundDataProto
     */
    public function clearLinkType(){
      return $this->_clear(8);
    }
    
    /**
     * Get <linkType> value
     *
     * @return string
     */
    public function getLinkType(){
      return $this->_get(8);
    }
    
    /**
     * Set <linkType> value
     *
     * @param string $value
     * @return \sc\found\FoundDataProto
     */
    public function setLinkType( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <link> has a value
     *
     * @return boolean
     */
    public function hasLink(){
      return $this->_has(9);
    }
    
    /**
     * Clear <link> value
     *
     * @return \sc\found\FoundDataProto
     */
    public function clearLink(){
      return $this->_clear(9);
    }
    
    /**
     * Get <link> value
     *
     * @return string
     */
    public function getLink(){
      return $this->_get(9);
    }
    
    /**
     * Set <link> value
     *
     * @param string $value
     * @return \sc\found\FoundDataProto
     */
    public function setLink( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <longitude> has a value
     *
     * @return boolean
     */
    public function hasLongitude(){
      return $this->_has(10);
    }
    
    /**
     * Clear <longitude> value
     *
     * @return \sc\found\FoundDataProto
     */
    public function clearLongitude(){
      return $this->_clear(10);
    }
    
    /**
     * Get <longitude> value
     *
     * @return string
     */
    public function getLongitude(){
      return $this->_get(10);
    }
    
    /**
     * Set <longitude> value
     *
     * @param string $value
     * @return \sc\found\FoundDataProto
     */
    public function setLongitude( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <latitude> has a value
     *
     * @return boolean
     */
    public function hasLatitude(){
      return $this->_has(11);
    }
    
    /**
     * Clear <latitude> value
     *
     * @return \sc\found\FoundDataProto
     */
    public function clearLatitude(){
      return $this->_clear(11);
    }
    
    /**
     * Get <latitude> value
     *
     * @return string
     */
    public function getLatitude(){
      return $this->_get(11);
    }
    
    /**
     * Set <latitude> value
     *
     * @param string $value
     * @return \sc\found\FoundDataProto
     */
    public function setLatitude( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <bottomScan> has a value
     *
     * @return boolean
     */
    public function hasBottomScan(){
      return $this->_has(12);
    }
    
    /**
     * Clear <bottomScan> value
     *
     * @return \sc\found\FoundDataProto
     */
    public function clearBottomScan(){
      return $this->_clear(12);
    }
    
    /**
     * Get <bottomScan> value
     *
     * @return string
     */
    public function getBottomScan(){
      return $this->_get(12);
    }
    
    /**
     * Set <bottomScan> value
     *
     * @param string $value
     * @return \sc\found\FoundDataProto
     */
    public function setBottomScan( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(13);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\found\FoundDataProto
     */
    public function clearTitle(){
      return $this->_clear(13);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(13);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\found\FoundDataProto
     */
    public function setTitle( $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <sumZan> has a value
     *
     * @return boolean
     */
    public function hasSumZan(){
      return $this->_has(14);
    }
    
    /**
     * Clear <sumZan> value
     *
     * @return \sc\found\FoundDataProto
     */
    public function clearSumZan(){
      return $this->_clear(14);
    }
    
    /**
     * Get <sumZan> value
     *
     * @return string
     */
    public function getSumZan(){
      return $this->_get(14);
    }
    
    /**
     * Set <sumZan> value
     *
     * @param string $value
     * @return \sc\found\FoundDataProto
     */
    public function setSumZan( $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <sumBishi> has a value
     *
     * @return boolean
     */
    public function hasSumBishi(){
      return $this->_has(15);
    }
    
    /**
     * Clear <sumBishi> value
     *
     * @return \sc\found\FoundDataProto
     */
    public function clearSumBishi(){
      return $this->_clear(15);
    }
    
    /**
     * Get <sumBishi> value
     *
     * @return string
     */
    public function getSumBishi(){
      return $this->_get(15);
    }
    
    /**
     * Set <sumBishi> value
     *
     * @param string $value
     * @return \sc\found\FoundDataProto
     */
    public function setSumBishi( $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <distance> has a value
     *
     * @return boolean
     */
    public function hasDistance(){
      return $this->_has(16);
    }
    
    /**
     * Clear <distance> value
     *
     * @return \sc\found\FoundDataProto
     */
    public function clearDistance(){
      return $this->_clear(16);
    }
    
    /**
     * Get <distance> value
     *
     * @return string
     */
    public function getDistance(){
      return $this->_get(16);
    }
    
    /**
     * Set <distance> value
     *
     * @param string $value
     * @return \sc\found\FoundDataProto
     */
    public function setDistance( $value){
      return $this->_set(16, $value);
    }
  }
}

namespace sc\found {

  class FoundServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param sc\found\FoundReq $input
     */
    public function Found(\sc\found\FoundReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.found.FoundService/Found', $argument, '\sc\found\FoundRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\found\RecommendReq $input
     */
    public function Recommend(\sc\found\RecommendReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.found.FoundService/Recommend', $argument, '\sc\found\RecommendRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\found\PraiseReq $input
     */
    public function Praise(\sc\found\PraiseReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.found.FoundService/Praise', $argument, '\sc\found\PraiseRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\found\ScanReq $input
     */
    public function Scan(\sc\found\ScanReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.found.FoundService/Scan', $argument, '\sc\found\ScanRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\found\StoreReq $input
     */
    public function Store(\sc\found\StoreReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.found.FoundService/Store', $argument, '\sc\found\StoreRsp::deserialize', $metadata, $options);
    }
  }
}
