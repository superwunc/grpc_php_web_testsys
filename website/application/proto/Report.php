<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: Report.proto
//   Date: 2017-04-19 06:39:08

namespace sc\report {

  class UIDReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var string */
    public $uuid = null;
    
    /**  @var int - \sc\comm\PlatType */
    public $plat = null;
    
    /**  @var string */
    public $model = null;
    
    /**  @var string */
    public $osVersion = null;
    
    /**  @var string */
    public $ip = null;
    
    /**  @var string */
    public $mac = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.report.UIDReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL STRING uuid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM plat = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "plat";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\PlatType';
      $descriptor->addField($f);

      // OPTIONAL STRING model = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "model";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING osVersion = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "osVersion";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ip = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "ip";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING mac = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "mac";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\report\UIDReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\report\UIDReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \sc\report\UIDReq
     */
    public function clearUuid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(2);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \sc\report\UIDReq
     */
    public function setUuid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <plat> has a value
     *
     * @return boolean
     */
    public function hasPlat(){
      return $this->_has(3);
    }
    
    /**
     * Clear <plat> value
     *
     * @return \sc\report\UIDReq
     */
    public function clearPlat(){
      return $this->_clear(3);
    }
    
    /**
     * Get <plat> value
     *
     * @return int - \sc\comm\PlatType
     */
    public function getPlat(){
      return $this->_get(3);
    }
    
    /**
     * Set <plat> value
     *
     * @param int - \sc\comm\PlatType $value
     * @return \sc\report\UIDReq
     */
    public function setPlat( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <model> has a value
     *
     * @return boolean
     */
    public function hasModel(){
      return $this->_has(4);
    }
    
    /**
     * Clear <model> value
     *
     * @return \sc\report\UIDReq
     */
    public function clearModel(){
      return $this->_clear(4);
    }
    
    /**
     * Get <model> value
     *
     * @return string
     */
    public function getModel(){
      return $this->_get(4);
    }
    
    /**
     * Set <model> value
     *
     * @param string $value
     * @return \sc\report\UIDReq
     */
    public function setModel( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <osVersion> has a value
     *
     * @return boolean
     */
    public function hasOsVersion(){
      return $this->_has(5);
    }
    
    /**
     * Clear <osVersion> value
     *
     * @return \sc\report\UIDReq
     */
    public function clearOsVersion(){
      return $this->_clear(5);
    }
    
    /**
     * Get <osVersion> value
     *
     * @return string
     */
    public function getOsVersion(){
      return $this->_get(5);
    }
    
    /**
     * Set <osVersion> value
     *
     * @param string $value
     * @return \sc\report\UIDReq
     */
    public function setOsVersion( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <ip> has a value
     *
     * @return boolean
     */
    public function hasIp(){
      return $this->_has(6);
    }
    
    /**
     * Clear <ip> value
     *
     * @return \sc\report\UIDReq
     */
    public function clearIp(){
      return $this->_clear(6);
    }
    
    /**
     * Get <ip> value
     *
     * @return string
     */
    public function getIp(){
      return $this->_get(6);
    }
    
    /**
     * Set <ip> value
     *
     * @param string $value
     * @return \sc\report\UIDReq
     */
    public function setIp( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <mac> has a value
     *
     * @return boolean
     */
    public function hasMac(){
      return $this->_has(7);
    }
    
    /**
     * Clear <mac> value
     *
     * @return \sc\report\UIDReq
     */
    public function clearMac(){
      return $this->_clear(7);
    }
    
    /**
     * Get <mac> value
     *
     * @return string
     */
    public function getMac(){
      return $this->_get(7);
    }
    
    /**
     * Set <mac> value
     *
     * @param string $value
     * @return \sc\report\UIDReq
     */
    public function setMac( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace sc\report {

  class UIDRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var int */
    public $device = null;
    
    /**  @var string */
    public $extension1 = null;
    
    /**  @var string */
    public $extension2 = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.report.UIDRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL UINT64 device = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "device";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING extension1 = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "extension1";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING extension2 = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "extension2";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\report\UIDRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\report\UIDRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <device> has a value
     *
     * @return boolean
     */
    public function hasDevice(){
      return $this->_has(2);
    }
    
    /**
     * Clear <device> value
     *
     * @return \sc\report\UIDRsp
     */
    public function clearDevice(){
      return $this->_clear(2);
    }
    
    /**
     * Get <device> value
     *
     * @return int
     */
    public function getDevice(){
      return $this->_get(2);
    }
    
    /**
     * Set <device> value
     *
     * @param int $value
     * @return \sc\report\UIDRsp
     */
    public function setDevice( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <extension1> has a value
     *
     * @return boolean
     */
    public function hasExtension1(){
      return $this->_has(3);
    }
    
    /**
     * Clear <extension1> value
     *
     * @return \sc\report\UIDRsp
     */
    public function clearExtension1(){
      return $this->_clear(3);
    }
    
    /**
     * Get <extension1> value
     *
     * @return string
     */
    public function getExtension1(){
      return $this->_get(3);
    }
    
    /**
     * Set <extension1> value
     *
     * @param string $value
     * @return \sc\report\UIDRsp
     */
    public function setExtension1( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <extension2> has a value
     *
     * @return boolean
     */
    public function hasExtension2(){
      return $this->_has(4);
    }
    
    /**
     * Clear <extension2> value
     *
     * @return \sc\report\UIDRsp
     */
    public function clearExtension2(){
      return $this->_clear(4);
    }
    
    /**
     * Get <extension2> value
     *
     * @return string
     */
    public function getExtension2(){
      return $this->_get(4);
    }
    
    /**
     * Set <extension2> value
     *
     * @param string $value
     * @return \sc\report\UIDRsp
     */
    public function setExtension2( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace sc\report {

  class ReportServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param sc\report\UIDReq $input
     */
    public function reportUniqueId(\sc\report\UIDReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.report.ReportService/reportUniqueId', $argument, '\sc\report\UIDRsp::deserialize', $metadata, $options);
    }
  }
}
