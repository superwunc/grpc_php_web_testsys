<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: Comm.proto
//   Date: 2017-04-19 06:39:10

namespace sc\comm {

  class ImgSizeType extends \DrSlump\Protobuf\Enum {
    const E_Default = 0;
    const E_Android_720 = 1;
    const E_Android_1080 = 2;
    const E_Android_2K = 3;
    const E_Android_4K = 4;
    const E_IOS_2K = 50;
    const E_IOS_4K = 51;
    const E_End = 100;
  }
}
namespace sc\comm {

  class CodeType extends \DrSlump\Protobuf\Enum {
    const E_OK = 0;
    const E_EXP = 1;
    const E_ILLEGAL = 3;
    const E_Err_With_Addtion = 4;
    const E_Err_User_Not_Exist = 5;
    const E_Err_Score_Not_Enough = 6;
    const E_Err_Good_Left_Not_Enough = 7;
    const E_Err_Good_Off_Line = 8;
    const E_Err_Mac_Register = 9;
    const E_Err_Mac_Offline = 10;
  }
}
namespace sc\comm {

  class PlatType extends \DrSlump\Protobuf\Enum {
    const E_P_Default = 0;
    const E_P_IOS = 1;
    const E_P_Android = 2;
    const E_P_Unknown = 10;
  }
}
namespace sc\comm {

  class Comm extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $lc = null;
    
    /**  @var int */
    public $city = null;
    
    /**  @var int */
    public $stamp = null;
    
    /**  @var float */
    public $longitude = null;
    
    /**  @var float */
    public $latitude = null;
    
    /**  @var string */
    public $ssid = null;
    
    /**  @var int */
    public $device = null;
    
    /**  @var int */
    public $user = null;
    
    /**  @var string */
    public $token = null;
    
    /**  @var int - \sc\comm\ImgSizeType */
    public $img = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.comm.Comm');

      // OPTIONAL UINT32 lc = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "lc";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 city = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "city";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 stamp = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "stamp";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE longitude = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "longitude";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE latitude = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "latitude";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ssid = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "ssid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 device = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "device";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 user = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "user";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING token = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "token";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM img = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "img";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\ImgSizeType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <lc> has a value
     *
     * @return boolean
     */
    public function hasLc(){
      return $this->_has(1);
    }
    
    /**
     * Clear <lc> value
     *
     * @return \sc\comm\Comm
     */
    public function clearLc(){
      return $this->_clear(1);
    }
    
    /**
     * Get <lc> value
     *
     * @return int
     */
    public function getLc(){
      return $this->_get(1);
    }
    
    /**
     * Set <lc> value
     *
     * @param int $value
     * @return \sc\comm\Comm
     */
    public function setLc( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <city> has a value
     *
     * @return boolean
     */
    public function hasCity(){
      return $this->_has(2);
    }
    
    /**
     * Clear <city> value
     *
     * @return \sc\comm\Comm
     */
    public function clearCity(){
      return $this->_clear(2);
    }
    
    /**
     * Get <city> value
     *
     * @return int
     */
    public function getCity(){
      return $this->_get(2);
    }
    
    /**
     * Set <city> value
     *
     * @param int $value
     * @return \sc\comm\Comm
     */
    public function setCity( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <stamp> has a value
     *
     * @return boolean
     */
    public function hasStamp(){
      return $this->_has(3);
    }
    
    /**
     * Clear <stamp> value
     *
     * @return \sc\comm\Comm
     */
    public function clearStamp(){
      return $this->_clear(3);
    }
    
    /**
     * Get <stamp> value
     *
     * @return int
     */
    public function getStamp(){
      return $this->_get(3);
    }
    
    /**
     * Set <stamp> value
     *
     * @param int $value
     * @return \sc\comm\Comm
     */
    public function setStamp( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <longitude> has a value
     *
     * @return boolean
     */
    public function hasLongitude(){
      return $this->_has(4);
    }
    
    /**
     * Clear <longitude> value
     *
     * @return \sc\comm\Comm
     */
    public function clearLongitude(){
      return $this->_clear(4);
    }
    
    /**
     * Get <longitude> value
     *
     * @return float
     */
    public function getLongitude(){
      return $this->_get(4);
    }
    
    /**
     * Set <longitude> value
     *
     * @param float $value
     * @return \sc\comm\Comm
     */
    public function setLongitude( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <latitude> has a value
     *
     * @return boolean
     */
    public function hasLatitude(){
      return $this->_has(5);
    }
    
    /**
     * Clear <latitude> value
     *
     * @return \sc\comm\Comm
     */
    public function clearLatitude(){
      return $this->_clear(5);
    }
    
    /**
     * Get <latitude> value
     *
     * @return float
     */
    public function getLatitude(){
      return $this->_get(5);
    }
    
    /**
     * Set <latitude> value
     *
     * @param float $value
     * @return \sc\comm\Comm
     */
    public function setLatitude( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <ssid> has a value
     *
     * @return boolean
     */
    public function hasSsid(){
      return $this->_has(6);
    }
    
    /**
     * Clear <ssid> value
     *
     * @return \sc\comm\Comm
     */
    public function clearSsid(){
      return $this->_clear(6);
    }
    
    /**
     * Get <ssid> value
     *
     * @return string
     */
    public function getSsid(){
      return $this->_get(6);
    }
    
    /**
     * Set <ssid> value
     *
     * @param string $value
     * @return \sc\comm\Comm
     */
    public function setSsid( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <device> has a value
     *
     * @return boolean
     */
    public function hasDevice(){
      return $this->_has(7);
    }
    
    /**
     * Clear <device> value
     *
     * @return \sc\comm\Comm
     */
    public function clearDevice(){
      return $this->_clear(7);
    }
    
    /**
     * Get <device> value
     *
     * @return int
     */
    public function getDevice(){
      return $this->_get(7);
    }
    
    /**
     * Set <device> value
     *
     * @param int $value
     * @return \sc\comm\Comm
     */
    public function setDevice( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <user> has a value
     *
     * @return boolean
     */
    public function hasUser(){
      return $this->_has(8);
    }
    
    /**
     * Clear <user> value
     *
     * @return \sc\comm\Comm
     */
    public function clearUser(){
      return $this->_clear(8);
    }
    
    /**
     * Get <user> value
     *
     * @return int
     */
    public function getUser(){
      return $this->_get(8);
    }
    
    /**
     * Set <user> value
     *
     * @param int $value
     * @return \sc\comm\Comm
     */
    public function setUser( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <token> has a value
     *
     * @return boolean
     */
    public function hasToken(){
      return $this->_has(9);
    }
    
    /**
     * Clear <token> value
     *
     * @return \sc\comm\Comm
     */
    public function clearToken(){
      return $this->_clear(9);
    }
    
    /**
     * Get <token> value
     *
     * @return string
     */
    public function getToken(){
      return $this->_get(9);
    }
    
    /**
     * Set <token> value
     *
     * @param string $value
     * @return \sc\comm\Comm
     */
    public function setToken( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <img> has a value
     *
     * @return boolean
     */
    public function hasImg(){
      return $this->_has(10);
    }
    
    /**
     * Clear <img> value
     *
     * @return \sc\comm\Comm
     */
    public function clearImg(){
      return $this->_clear(10);
    }
    
    /**
     * Get <img> value
     *
     * @return int - \sc\comm\ImgSizeType
     */
    public function getImg(){
      return $this->_get(10);
    }
    
    /**
     * Set <img> value
     *
     * @param int - \sc\comm\ImgSizeType $value
     * @return \sc\comm\Comm
     */
    public function setImg( $value){
      return $this->_set(10, $value);
    }
  }
}

namespace sc\comm {

  class State extends \DrSlump\Protobuf\Message {

    /**  @var int - \sc\comm\CodeType */
    public $code = null;
    
    /**  @var string */
    public $msg = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.comm.State');

      // OPTIONAL ENUM code = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\CodeType';
      $descriptor->addField($f);

      // OPTIONAL STRING msg = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "msg";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <code> value
     *
     * @return \sc\comm\State
     */
    public function clearCode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <code> value
     *
     * @return int - \sc\comm\CodeType
     */
    public function getCode(){
      return $this->_get(1);
    }
    
    /**
     * Set <code> value
     *
     * @param int - \sc\comm\CodeType $value
     * @return \sc\comm\State
     */
    public function setCode( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <msg> has a value
     *
     * @return boolean
     */
    public function hasMsg(){
      return $this->_has(2);
    }
    
    /**
     * Clear <msg> value
     *
     * @return \sc\comm\State
     */
    public function clearMsg(){
      return $this->_clear(2);
    }
    
    /**
     * Get <msg> value
     *
     * @return string
     */
    public function getMsg(){
      return $this->_get(2);
    }
    
    /**
     * Set <msg> value
     *
     * @param string $value
     * @return \sc\comm\State
     */
    public function setMsg( $value){
      return $this->_set(2, $value);
    }
  }
}

