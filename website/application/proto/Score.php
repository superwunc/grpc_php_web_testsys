<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: Score.proto
//   Date: 2017-04-19 06:39:09

namespace sc\score {

  class HandleArticle extends \DrSlump\Protobuf\Enum {
    const E_Comment = 0;
    const E_praise = 1;
    const E_Share = 2;
    const E_Read = 3;
    const E_Click = 4;
    const E_ReadHot = 5;
    const E_ClickHot = 6;
  }
}
namespace sc\score {

  class TaskType extends \DrSlump\Protobuf\Enum {
    const E_Add = 0;
    const E_Sub = 1;
  }
}
namespace sc\score {

  class TaskFinishState extends \DrSlump\Protobuf\Enum {
    const E_Non_Finished = 0;
    const E_Finished = 1;
  }
}
namespace sc\score {

  class ScoreCode extends \DrSlump\Protobuf\Enum {
    const E_error = 0;
    const E_OK = 1;
  }
}
namespace sc\score {

  class ArticleCommReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $articleId = null;
    
    /**  @var int - \sc\score\HandleArticle */
    public $handleArticle = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.score.ArticleCommReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 articleId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "articleId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM handleArticle = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "handleArticle";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\score\HandleArticle';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\score\ArticleCommReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\score\ArticleCommReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <articleId> has a value
     *
     * @return boolean
     */
    public function hasArticleId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <articleId> value
     *
     * @return \sc\score\ArticleCommReq
     */
    public function clearArticleId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <articleId> value
     *
     * @return int
     */
    public function getArticleId(){
      return $this->_get(2);
    }
    
    /**
     * Set <articleId> value
     *
     * @param int $value
     * @return \sc\score\ArticleCommReq
     */
    public function setArticleId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <handleArticle> has a value
     *
     * @return boolean
     */
    public function hasHandleArticle(){
      return $this->_has(3);
    }
    
    /**
     * Clear <handleArticle> value
     *
     * @return \sc\score\ArticleCommReq
     */
    public function clearHandleArticle(){
      return $this->_clear(3);
    }
    
    /**
     * Get <handleArticle> value
     *
     * @return int - \sc\score\HandleArticle
     */
    public function getHandleArticle(){
      return $this->_get(3);
    }
    
    /**
     * Set <handleArticle> value
     *
     * @param int - \sc\score\HandleArticle $value
     * @return \sc\score\ArticleCommReq
     */
    public function setHandleArticle( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\score {

  class ScoreRecordReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $pageNumber = null;
    
    /**  @var int */
    public $pageSize = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.score.ScoreRecordReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT32 pageNumber = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "pageNumber";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 pageSize = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "pageSize";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\score\ScoreRecordReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\score\ScoreRecordReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <pageNumber> has a value
     *
     * @return boolean
     */
    public function hasPageNumber(){
      return $this->_has(2);
    }
    
    /**
     * Clear <pageNumber> value
     *
     * @return \sc\score\ScoreRecordReq
     */
    public function clearPageNumber(){
      return $this->_clear(2);
    }
    
    /**
     * Get <pageNumber> value
     *
     * @return int
     */
    public function getPageNumber(){
      return $this->_get(2);
    }
    
    /**
     * Set <pageNumber> value
     *
     * @param int $value
     * @return \sc\score\ScoreRecordReq
     */
    public function setPageNumber( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <pageSize> has a value
     *
     * @return boolean
     */
    public function hasPageSize(){
      return $this->_has(3);
    }
    
    /**
     * Clear <pageSize> value
     *
     * @return \sc\score\ScoreRecordReq
     */
    public function clearPageSize(){
      return $this->_clear(3);
    }
    
    /**
     * Get <pageSize> value
     *
     * @return int
     */
    public function getPageSize(){
      return $this->_get(3);
    }
    
    /**
     * Set <pageSize> value
     *
     * @param int $value
     * @return \sc\score\ScoreRecordReq
     */
    public function setPageSize( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\score {

  class ScoreRecordRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\score\ScoreRecord[]  */
    public $scoreRecordList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.score.ScoreRecordRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // REPEATED MESSAGE scoreRecordList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "scoreRecordList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\score\ScoreRecord';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\score\ScoreRecordRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\score\ScoreRecordRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <scoreRecordList> has a value
     *
     * @return boolean
     */
    public function hasScoreRecordList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <scoreRecordList> value
     *
     * @return \sc\score\ScoreRecordRsp
     */
    public function clearScoreRecordList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <scoreRecordList> value
     *
     * @param int $idx
     * @return \sc\score\ScoreRecord
     */
    public function getScoreRecordList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <scoreRecordList> value
     *
     * @param \sc\score\ScoreRecord $value
     * @return \sc\score\ScoreRecordRsp
     */
    public function setScoreRecordList(\sc\score\ScoreRecord $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <scoreRecordList>
     *
     * @return \sc\score\ScoreRecord[]
     */
    public function getScoreRecordListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <scoreRecordList>
     *
     * @param \sc\score\ScoreRecord $value
     * @return \sc\score\ScoreRecordRsp
     */
    public function addScoreRecordList(\sc\score\ScoreRecord $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sc\score {

  class ScoreRecord extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $taskId = null;
    
    /**  @var string */
    public $taskTitle = null;
    
    /**  @var string */
    public $remark = null;
    
    /**  @var int */
    public $score = null;
    
    /**  @var string */
    public $cTime = null;
    
    /**  @var int */
    public $addOrSubtract = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.score.ScoreRecord');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 taskId = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "taskId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING taskTitle = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "taskTitle";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING remark = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "remark";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 score = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING cTime = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "cTime";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 addOrSubtract = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "addOrSubtract";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\score\ScoreRecord
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\score\ScoreRecord
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <taskId> has a value
     *
     * @return boolean
     */
    public function hasTaskId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <taskId> value
     *
     * @return \sc\score\ScoreRecord
     */
    public function clearTaskId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <taskId> value
     *
     * @return int
     */
    public function getTaskId(){
      return $this->_get(2);
    }
    
    /**
     * Set <taskId> value
     *
     * @param int $value
     * @return \sc\score\ScoreRecord
     */
    public function setTaskId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <taskTitle> has a value
     *
     * @return boolean
     */
    public function hasTaskTitle(){
      return $this->_has(3);
    }
    
    /**
     * Clear <taskTitle> value
     *
     * @return \sc\score\ScoreRecord
     */
    public function clearTaskTitle(){
      return $this->_clear(3);
    }
    
    /**
     * Get <taskTitle> value
     *
     * @return string
     */
    public function getTaskTitle(){
      return $this->_get(3);
    }
    
    /**
     * Set <taskTitle> value
     *
     * @param string $value
     * @return \sc\score\ScoreRecord
     */
    public function setTaskTitle( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <remark> has a value
     *
     * @return boolean
     */
    public function hasRemark(){
      return $this->_has(4);
    }
    
    /**
     * Clear <remark> value
     *
     * @return \sc\score\ScoreRecord
     */
    public function clearRemark(){
      return $this->_clear(4);
    }
    
    /**
     * Get <remark> value
     *
     * @return string
     */
    public function getRemark(){
      return $this->_get(4);
    }
    
    /**
     * Set <remark> value
     *
     * @param string $value
     * @return \sc\score\ScoreRecord
     */
    public function setRemark( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(5);
    }
    
    /**
     * Clear <score> value
     *
     * @return \sc\score\ScoreRecord
     */
    public function clearScore(){
      return $this->_clear(5);
    }
    
    /**
     * Get <score> value
     *
     * @return int
     */
    public function getScore(){
      return $this->_get(5);
    }
    
    /**
     * Set <score> value
     *
     * @param int $value
     * @return \sc\score\ScoreRecord
     */
    public function setScore( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <cTime> has a value
     *
     * @return boolean
     */
    public function hasCTime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <cTime> value
     *
     * @return \sc\score\ScoreRecord
     */
    public function clearCTime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <cTime> value
     *
     * @return string
     */
    public function getCTime(){
      return $this->_get(6);
    }
    
    /**
     * Set <cTime> value
     *
     * @param string $value
     * @return \sc\score\ScoreRecord
     */
    public function setCTime( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <addOrSubtract> has a value
     *
     * @return boolean
     */
    public function hasAddOrSubtract(){
      return $this->_has(7);
    }
    
    /**
     * Clear <addOrSubtract> value
     *
     * @return \sc\score\ScoreRecord
     */
    public function clearAddOrSubtract(){
      return $this->_clear(7);
    }
    
    /**
     * Get <addOrSubtract> value
     *
     * @return int
     */
    public function getAddOrSubtract(){
      return $this->_get(7);
    }
    
    /**
     * Set <addOrSubtract> value
     *
     * @param int $value
     * @return \sc\score\ScoreRecord
     */
    public function setAddOrSubtract( $value){
      return $this->_set(7, $value);
    }
  }
}

namespace sc\score {

  class TaskReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.score.TaskReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\score\TaskReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\score\TaskReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\score {

  class TaskRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\score\Task[]  */
    public $taskList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.score.TaskRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // REPEATED MESSAGE taskList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "taskList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\score\Task';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\score\TaskRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\score\TaskRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <taskList> has a value
     *
     * @return boolean
     */
    public function hasTaskList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <taskList> value
     *
     * @return \sc\score\TaskRsp
     */
    public function clearTaskList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <taskList> value
     *
     * @param int $idx
     * @return \sc\score\Task
     */
    public function getTaskList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <taskList> value
     *
     * @param \sc\score\Task $value
     * @return \sc\score\TaskRsp
     */
    public function setTaskList(\sc\score\Task $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <taskList>
     *
     * @return \sc\score\Task[]
     */
    public function getTaskListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <taskList>
     *
     * @param \sc\score\Task $value
     * @return \sc\score\TaskRsp
     */
    public function addTaskList(\sc\score\Task $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sc\score {

  class Task extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var int */
    public $finishScore = null;
    
    /**  @var string */
    public $ctime = null;
    
    /**  @var int - \sc\score\TaskFinishState */
    public $finishState = null;
    
    /**  @var int - \sc\score\TaskType */
    public $taskType = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.score.Task');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 finishScore = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "finishScore";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ctime = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "ctime";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM finishState = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "finishState";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\score\TaskFinishState';
      $descriptor->addField($f);

      // OPTIONAL ENUM taskType = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "taskType";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\score\TaskType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\score\Task
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\score\Task
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\score\Task
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\score\Task
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <finishScore> has a value
     *
     * @return boolean
     */
    public function hasFinishScore(){
      return $this->_has(3);
    }
    
    /**
     * Clear <finishScore> value
     *
     * @return \sc\score\Task
     */
    public function clearFinishScore(){
      return $this->_clear(3);
    }
    
    /**
     * Get <finishScore> value
     *
     * @return int
     */
    public function getFinishScore(){
      return $this->_get(3);
    }
    
    /**
     * Set <finishScore> value
     *
     * @param int $value
     * @return \sc\score\Task
     */
    public function setFinishScore( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <ctime> has a value
     *
     * @return boolean
     */
    public function hasCtime(){
      return $this->_has(4);
    }
    
    /**
     * Clear <ctime> value
     *
     * @return \sc\score\Task
     */
    public function clearCtime(){
      return $this->_clear(4);
    }
    
    /**
     * Get <ctime> value
     *
     * @return string
     */
    public function getCtime(){
      return $this->_get(4);
    }
    
    /**
     * Set <ctime> value
     *
     * @param string $value
     * @return \sc\score\Task
     */
    public function setCtime( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <finishState> has a value
     *
     * @return boolean
     */
    public function hasFinishState(){
      return $this->_has(5);
    }
    
    /**
     * Clear <finishState> value
     *
     * @return \sc\score\Task
     */
    public function clearFinishState(){
      return $this->_clear(5);
    }
    
    /**
     * Get <finishState> value
     *
     * @return int - \sc\score\TaskFinishState
     */
    public function getFinishState(){
      return $this->_get(5);
    }
    
    /**
     * Set <finishState> value
     *
     * @param int - \sc\score\TaskFinishState $value
     * @return \sc\score\Task
     */
    public function setFinishState( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <taskType> has a value
     *
     * @return boolean
     */
    public function hasTaskType(){
      return $this->_has(6);
    }
    
    /**
     * Clear <taskType> value
     *
     * @return \sc\score\Task
     */
    public function clearTaskType(){
      return $this->_clear(6);
    }
    
    /**
     * Get <taskType> value
     *
     * @return int - \sc\score\TaskType
     */
    public function getTaskType(){
      return $this->_get(6);
    }
    
    /**
     * Set <taskType> value
     *
     * @param int - \sc\score\TaskType $value
     * @return \sc\score\Task
     */
    public function setTaskType( $value){
      return $this->_set(6, $value);
    }
  }
}

namespace sc\score {

  class CommReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.score.CommReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\score\CommReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\score\CommReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\score {

  class CommRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var int */
    public $score = null;
    
    /**  @var int - \sc\score\ScoreCode */
    public $scoreCode = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.score.CommRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL UINT32 score = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM scoreCode = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "scoreCode";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\score\ScoreCode';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\score\CommRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\score\CommRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(2);
    }
    
    /**
     * Clear <score> value
     *
     * @return \sc\score\CommRsp
     */
    public function clearScore(){
      return $this->_clear(2);
    }
    
    /**
     * Get <score> value
     *
     * @return int
     */
    public function getScore(){
      return $this->_get(2);
    }
    
    /**
     * Set <score> value
     *
     * @param int $value
     * @return \sc\score\CommRsp
     */
    public function setScore( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <scoreCode> has a value
     *
     * @return boolean
     */
    public function hasScoreCode(){
      return $this->_has(3);
    }
    
    /**
     * Clear <scoreCode> value
     *
     * @return \sc\score\CommRsp
     */
    public function clearScoreCode(){
      return $this->_clear(3);
    }
    
    /**
     * Get <scoreCode> value
     *
     * @return int - \sc\score\ScoreCode
     */
    public function getScoreCode(){
      return $this->_get(3);
    }
    
    /**
     * Set <scoreCode> value
     *
     * @param int - \sc\score\ScoreCode $value
     * @return \sc\score\CommRsp
     */
    public function setScoreCode( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\score {

  class GetUserScoreRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var int */
    public $score = null;
    
    /**  @var boolean */
    public $isCheckIn = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.score.GetUserScoreRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL UINT32 score = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isCheckIn = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "isCheckIn";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\score\GetUserScoreRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\score\GetUserScoreRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(2);
    }
    
    /**
     * Clear <score> value
     *
     * @return \sc\score\GetUserScoreRsp
     */
    public function clearScore(){
      return $this->_clear(2);
    }
    
    /**
     * Get <score> value
     *
     * @return int
     */
    public function getScore(){
      return $this->_get(2);
    }
    
    /**
     * Set <score> value
     *
     * @param int $value
     * @return \sc\score\GetUserScoreRsp
     */
    public function setScore( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <isCheckIn> has a value
     *
     * @return boolean
     */
    public function hasIsCheckIn(){
      return $this->_has(3);
    }
    
    /**
     * Clear <isCheckIn> value
     *
     * @return \sc\score\GetUserScoreRsp
     */
    public function clearIsCheckIn(){
      return $this->_clear(3);
    }
    
    /**
     * Get <isCheckIn> value
     *
     * @return boolean
     */
    public function getIsCheckIn(){
      return $this->_get(3);
    }
    
    /**
     * Set <isCheckIn> value
     *
     * @param boolean $value
     * @return \sc\score\GetUserScoreRsp
     */
    public function setIsCheckIn( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\score {

  class CheckInReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.score.CheckInReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\score\CheckInReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\score\CheckInReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\score {

  class CheckInRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\score\Task[]  */
    public $checkInTaskList = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.score.CheckInRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // REPEATED MESSAGE checkInTaskList = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "checkInTaskList";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\score\Task';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\score\CheckInRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\score\CheckInRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <checkInTaskList> has a value
     *
     * @return boolean
     */
    public function hasCheckInTaskList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <checkInTaskList> value
     *
     * @return \sc\score\CheckInRsp
     */
    public function clearCheckInTaskList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <checkInTaskList> value
     *
     * @param int $idx
     * @return \sc\score\Task
     */
    public function getCheckInTaskList($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <checkInTaskList> value
     *
     * @param \sc\score\Task $value
     * @return \sc\score\CheckInRsp
     */
    public function setCheckInTaskList(\sc\score\Task $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <checkInTaskList>
     *
     * @return \sc\score\Task[]
     */
    public function getCheckInTaskListList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <checkInTaskList>
     *
     * @param \sc\score\Task $value
     * @return \sc\score\CheckInRsp
     */
    public function addCheckInTaskList(\sc\score\Task $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sc\score {

  class ScoreServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param sc\score\ScoreRecordReq $input
     */
    public function GetScoreRecord(\sc\score\ScoreRecordReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.score.ScoreService/GetScoreRecord', $argument, '\sc\score\ScoreRecordRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\score\TaskReq $input
     */
    public function GetTaskList(\sc\score\TaskReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.score.ScoreService/GetTaskList', $argument, '\sc\score\TaskRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\score\ArticleCommReq $input
     */
    public function CommentArticle(\sc\score\ArticleCommReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.score.ScoreService/CommentArticle', $argument, '\sc\score\CommRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\score\ArticleCommReq $input
     */
    public function ZanArticle(\sc\score\ArticleCommReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.score.ScoreService/ZanArticle', $argument, '\sc\score\CommRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\score\ArticleCommReq $input
     */
    public function ShareArticle(\sc\score\ArticleCommReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.score.ScoreService/ShareArticle', $argument, '\sc\score\CommRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\score\ArticleCommReq $input
     */
    public function ReadArticle(\sc\score\ArticleCommReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.score.ScoreService/ReadArticle', $argument, '\sc\score\CommRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\score\ArticleCommReq $input
     */
    public function ClickArticle(\sc\score\ArticleCommReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.score.ScoreService/ClickArticle', $argument, '\sc\score\CommRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\score\ArticleCommReq $input
     */
    public function handleArticle(\sc\score\ArticleCommReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.score.ScoreService/handleArticle', $argument, '\sc\score\CommRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\score\CommReq $input
     */
    public function GetUserScore(\sc\score\CommReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.score.ScoreService/GetUserScore', $argument, '\sc\score\GetUserScoreRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\score\CommReq $input
     */
    public function Lottery(\sc\score\CommReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.score.ScoreService/Lottery', $argument, '\sc\score\CommRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\score\CommReq $input
     */
    public function Exchange(\sc\score\CommReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.score.ScoreService/Exchange', $argument, '\sc\score\CommRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\score\CheckInReq $input
     */
    public function MonthCheckIn(\sc\score\CheckInReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.score.ScoreService/MonthCheckIn', $argument, '\sc\score\CheckInRsp::deserialize', $metadata, $options);
    }
  }
}
