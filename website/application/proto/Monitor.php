<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: Monitor.proto
//   Date: 2017-04-19 06:39:10

namespace sc\monitor {

  class TickReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $uTick = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.monitor.TickReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 uTick = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "uTick";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\monitor\TickReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\monitor\TickReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <uTick> has a value
     *
     * @return boolean
     */
    public function hasUTick(){
      return $this->_has(2);
    }
    
    /**
     * Clear <uTick> value
     *
     * @return \sc\monitor\TickReq
     */
    public function clearUTick(){
      return $this->_clear(2);
    }
    
    /**
     * Get <uTick> value
     *
     * @return int
     */
    public function getUTick(){
      return $this->_get(2);
    }
    
    /**
     * Set <uTick> value
     *
     * @param int $value
     * @return \sc\monitor\TickReq
     */
    public function setUTick( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\monitor {

  class TickRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var int */
    public $uSvrTick = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.monitor.TickRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL UINT64 uSvrTick = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "uSvrTick";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\monitor\TickRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\monitor\TickRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <uSvrTick> has a value
     *
     * @return boolean
     */
    public function hasUSvrTick(){
      return $this->_has(2);
    }
    
    /**
     * Clear <uSvrTick> value
     *
     * @return \sc\monitor\TickRsp
     */
    public function clearUSvrTick(){
      return $this->_clear(2);
    }
    
    /**
     * Get <uSvrTick> value
     *
     * @return int
     */
    public function getUSvrTick(){
      return $this->_get(2);
    }
    
    /**
     * Set <uSvrTick> value
     *
     * @param int $value
     * @return \sc\monitor\TickRsp
     */
    public function setUSvrTick( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\monitor {

  class MonitorServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param sc\monitor\TickReq $input
     */
    public function getSvrTick(\sc\monitor\TickReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.monitor.MonitorService/getSvrTick', $argument, '\sc\monitor\TickRsp::deserialize', $metadata, $options);
    }
  }
}
