<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: Wifi.proto
//   Date: 2017-04-19 06:39:10

namespace sc\wifi {

  class WifiStatus extends \DrSlump\Protobuf\Enum {
    const E_Wifi_OnLine = 0;
    const E_Wifi_Build = 1;
    const E_Wifi_Wait = 2;
  }
}
namespace sc\wifi {

  class ZGVLReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var string */
    public $apMac = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.wifi.ZGVLReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL STRING apMac = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "apMac";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\wifi\ZGVLReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\wifi\ZGVLReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <apMac> has a value
     *
     * @return boolean
     */
    public function hasApMac(){
      return $this->_has(2);
    }
    
    /**
     * Clear <apMac> value
     *
     * @return \sc\wifi\ZGVLReq
     */
    public function clearApMac(){
      return $this->_clear(2);
    }
    
    /**
     * Get <apMac> value
     *
     * @return string
     */
    public function getApMac(){
      return $this->_get(2);
    }
    
    /**
     * Set <apMac> value
     *
     * @param string $value
     * @return \sc\wifi\ZGVLReq
     */
    public function setApMac( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\wifi {

  class ZGVLRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var boolean */
    public $isZG = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.wifi.ZGVLRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL BOOL isZG = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "isZG";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\wifi\ZGVLRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\wifi\ZGVLRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <isZG> has a value
     *
     * @return boolean
     */
    public function hasIsZG(){
      return $this->_has(2);
    }
    
    /**
     * Clear <isZG> value
     *
     * @return \sc\wifi\ZGVLRsp
     */
    public function clearIsZG(){
      return $this->_clear(2);
    }
    
    /**
     * Get <isZG> value
     *
     * @return boolean
     */
    public function getIsZG(){
      return $this->_get(2);
    }
    
    /**
     * Set <isZG> value
     *
     * @param boolean $value
     * @return \sc\wifi\ZGVLRsp
     */
    public function setIsZG( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\wifi {

  class WifiReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.wifi.WifiReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\wifi\WifiReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\wifi\WifiReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\wifi {

  class WifiRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\wifi\Wifi[]  */
    public $wifi = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.wifi.WifiRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // REPEATED MESSAGE wifi = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "wifi";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\sc\wifi\Wifi';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\wifi\WifiRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\wifi\WifiRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <wifi> has a value
     *
     * @return boolean
     */
    public function hasWifi(){
      return $this->_has(2);
    }
    
    /**
     * Clear <wifi> value
     *
     * @return \sc\wifi\WifiRsp
     */
    public function clearWifi(){
      return $this->_clear(2);
    }
    
    /**
     * Get <wifi> value
     *
     * @param int $idx
     * @return \sc\wifi\Wifi
     */
    public function getWifi($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <wifi> value
     *
     * @param \sc\wifi\Wifi $value
     * @return \sc\wifi\WifiRsp
     */
    public function setWifi(\sc\wifi\Wifi $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <wifi>
     *
     * @return \sc\wifi\Wifi[]
     */
    public function getWifiList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <wifi>
     *
     * @param \sc\wifi\Wifi $value
     * @return \sc\wifi\WifiRsp
     */
    public function addWifi(\sc\wifi\Wifi $value){
     return $this->_add(2, $value);
    }
  }
}

namespace sc\wifi {

  class Wifi extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $wifiName = null;
    
    /**  @var float */
    public $longitude = null;
    
    /**  @var float */
    public $latitude = null;
    
    /**  @var int */
    public $distance = null;
    
    /**  @var int - \sc\wifi\WifiStatus */
    public $status = null;
    
    /**  @var string */
    public $wifiTotalName = null;
    
    /**  @var int */
    public $regionId = null;
    
    /**  @var int */
    public $enterpriseId = null;
    
    /**  @var int */
    public $apNum = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.wifi.Wifi');

      // OPTIONAL STRING wifiName = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "wifiName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE longitude = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "longitude";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE latitude = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "latitude";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 distance = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "distance";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM status = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\wifi\WifiStatus';
      $descriptor->addField($f);

      // OPTIONAL STRING wifiTotalName = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "wifiTotalName";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 regionId = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "regionId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 enterpriseId = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "enterpriseId";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 apNum = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "apNum";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <wifiName> has a value
     *
     * @return boolean
     */
    public function hasWifiName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <wifiName> value
     *
     * @return \sc\wifi\Wifi
     */
    public function clearWifiName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <wifiName> value
     *
     * @return string
     */
    public function getWifiName(){
      return $this->_get(1);
    }
    
    /**
     * Set <wifiName> value
     *
     * @param string $value
     * @return \sc\wifi\Wifi
     */
    public function setWifiName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <longitude> has a value
     *
     * @return boolean
     */
    public function hasLongitude(){
      return $this->_has(2);
    }
    
    /**
     * Clear <longitude> value
     *
     * @return \sc\wifi\Wifi
     */
    public function clearLongitude(){
      return $this->_clear(2);
    }
    
    /**
     * Get <longitude> value
     *
     * @return float
     */
    public function getLongitude(){
      return $this->_get(2);
    }
    
    /**
     * Set <longitude> value
     *
     * @param float $value
     * @return \sc\wifi\Wifi
     */
    public function setLongitude( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <latitude> has a value
     *
     * @return boolean
     */
    public function hasLatitude(){
      return $this->_has(3);
    }
    
    /**
     * Clear <latitude> value
     *
     * @return \sc\wifi\Wifi
     */
    public function clearLatitude(){
      return $this->_clear(3);
    }
    
    /**
     * Get <latitude> value
     *
     * @return float
     */
    public function getLatitude(){
      return $this->_get(3);
    }
    
    /**
     * Set <latitude> value
     *
     * @param float $value
     * @return \sc\wifi\Wifi
     */
    public function setLatitude( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <distance> has a value
     *
     * @return boolean
     */
    public function hasDistance(){
      return $this->_has(4);
    }
    
    /**
     * Clear <distance> value
     *
     * @return \sc\wifi\Wifi
     */
    public function clearDistance(){
      return $this->_clear(4);
    }
    
    /**
     * Get <distance> value
     *
     * @return int
     */
    public function getDistance(){
      return $this->_get(4);
    }
    
    /**
     * Set <distance> value
     *
     * @param int $value
     * @return \sc\wifi\Wifi
     */
    public function setDistance( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(5);
    }
    
    /**
     * Clear <status> value
     *
     * @return \sc\wifi\Wifi
     */
    public function clearStatus(){
      return $this->_clear(5);
    }
    
    /**
     * Get <status> value
     *
     * @return int - \sc\wifi\WifiStatus
     */
    public function getStatus(){
      return $this->_get(5);
    }
    
    /**
     * Set <status> value
     *
     * @param int - \sc\wifi\WifiStatus $value
     * @return \sc\wifi\Wifi
     */
    public function setStatus( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <wifiTotalName> has a value
     *
     * @return boolean
     */
    public function hasWifiTotalName(){
      return $this->_has(6);
    }
    
    /**
     * Clear <wifiTotalName> value
     *
     * @return \sc\wifi\Wifi
     */
    public function clearWifiTotalName(){
      return $this->_clear(6);
    }
    
    /**
     * Get <wifiTotalName> value
     *
     * @return string
     */
    public function getWifiTotalName(){
      return $this->_get(6);
    }
    
    /**
     * Set <wifiTotalName> value
     *
     * @param string $value
     * @return \sc\wifi\Wifi
     */
    public function setWifiTotalName( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <regionId> has a value
     *
     * @return boolean
     */
    public function hasRegionId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <regionId> value
     *
     * @return \sc\wifi\Wifi
     */
    public function clearRegionId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <regionId> value
     *
     * @return int
     */
    public function getRegionId(){
      return $this->_get(7);
    }
    
    /**
     * Set <regionId> value
     *
     * @param int $value
     * @return \sc\wifi\Wifi
     */
    public function setRegionId( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <enterpriseId> has a value
     *
     * @return boolean
     */
    public function hasEnterpriseId(){
      return $this->_has(8);
    }
    
    /**
     * Clear <enterpriseId> value
     *
     * @return \sc\wifi\Wifi
     */
    public function clearEnterpriseId(){
      return $this->_clear(8);
    }
    
    /**
     * Get <enterpriseId> value
     *
     * @return int
     */
    public function getEnterpriseId(){
      return $this->_get(8);
    }
    
    /**
     * Set <enterpriseId> value
     *
     * @param int $value
     * @return \sc\wifi\Wifi
     */
    public function setEnterpriseId( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <apNum> has a value
     *
     * @return boolean
     */
    public function hasApNum(){
      return $this->_has(9);
    }
    
    /**
     * Clear <apNum> value
     *
     * @return \sc\wifi\Wifi
     */
    public function clearApNum(){
      return $this->_clear(9);
    }
    
    /**
     * Get <apNum> value
     *
     * @return int
     */
    public function getApNum(){
      return $this->_get(9);
    }
    
    /**
     * Set <apNum> value
     *
     * @param int $value
     * @return \sc\wifi\Wifi
     */
    public function setApNum( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace sc\wifi {

  class UserWifiMsgReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.wifi.UserWifiMsgReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\wifi\UserWifiMsgReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\wifi\UserWifiMsgReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\wifi {

  class UserWifiMsgRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\wifi\UserWifiMsg */
    public $userWifiMsg = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.wifi.UserWifiMsgRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE userWifiMsg = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "userWifiMsg";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\wifi\UserWifiMsg';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\wifi\UserWifiMsgRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\wifi\UserWifiMsgRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <userWifiMsg> has a value
     *
     * @return boolean
     */
    public function hasUserWifiMsg(){
      return $this->_has(2);
    }
    
    /**
     * Clear <userWifiMsg> value
     *
     * @return \sc\wifi\UserWifiMsgRsp
     */
    public function clearUserWifiMsg(){
      return $this->_clear(2);
    }
    
    /**
     * Get <userWifiMsg> value
     *
     * @return \sc\wifi\UserWifiMsg
     */
    public function getUserWifiMsg(){
      return $this->_get(2);
    }
    
    /**
     * Set <userWifiMsg> value
     *
     * @param \sc\wifi\UserWifiMsg $value
     * @return \sc\wifi\UserWifiMsgRsp
     */
    public function setUserWifiMsg(\sc\wifi\UserWifiMsg $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\wifi {

  class UserWifiMsg extends \DrSlump\Protobuf\Message {

    /**  @var \sc\wifi\DataType */
    public $historyTime = null;
    
    /**  @var \sc\wifi\DataType */
    public $historyFlow = null;
    
    /**  @var \sc\wifi\DataType */
    public $currentTime = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.wifi.UserWifiMsg');

      // OPTIONAL MESSAGE historyTime = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "historyTime";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\wifi\DataType';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE historyFlow = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "historyFlow";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\wifi\DataType';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE currentTime = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "currentTime";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\wifi\DataType';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <historyTime> has a value
     *
     * @return boolean
     */
    public function hasHistoryTime(){
      return $this->_has(1);
    }
    
    /**
     * Clear <historyTime> value
     *
     * @return \sc\wifi\UserWifiMsg
     */
    public function clearHistoryTime(){
      return $this->_clear(1);
    }
    
    /**
     * Get <historyTime> value
     *
     * @return \sc\wifi\DataType
     */
    public function getHistoryTime(){
      return $this->_get(1);
    }
    
    /**
     * Set <historyTime> value
     *
     * @param \sc\wifi\DataType $value
     * @return \sc\wifi\UserWifiMsg
     */
    public function setHistoryTime(\sc\wifi\DataType $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <historyFlow> has a value
     *
     * @return boolean
     */
    public function hasHistoryFlow(){
      return $this->_has(2);
    }
    
    /**
     * Clear <historyFlow> value
     *
     * @return \sc\wifi\UserWifiMsg
     */
    public function clearHistoryFlow(){
      return $this->_clear(2);
    }
    
    /**
     * Get <historyFlow> value
     *
     * @return \sc\wifi\DataType
     */
    public function getHistoryFlow(){
      return $this->_get(2);
    }
    
    /**
     * Set <historyFlow> value
     *
     * @param \sc\wifi\DataType $value
     * @return \sc\wifi\UserWifiMsg
     */
    public function setHistoryFlow(\sc\wifi\DataType $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <currentTime> has a value
     *
     * @return boolean
     */
    public function hasCurrentTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <currentTime> value
     *
     * @return \sc\wifi\UserWifiMsg
     */
    public function clearCurrentTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <currentTime> value
     *
     * @return \sc\wifi\DataType
     */
    public function getCurrentTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <currentTime> value
     *
     * @param \sc\wifi\DataType $value
     * @return \sc\wifi\UserWifiMsg
     */
    public function setCurrentTime(\sc\wifi\DataType $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\wifi {

  class DataType extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $title = null;
    
    /**  @var int */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.wifi.DataType');

      // OPTIONAL STRING title = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(1);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\wifi\DataType
     */
    public function clearTitle(){
      return $this->_clear(1);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(1);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\wifi\DataType
     */
    public function setTitle( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \sc\wifi\DataType
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @return int
     */
    public function getValue(){
      return $this->_get(2);
    }
    
    /**
     * Set <value> value
     *
     * @param int $value
     * @return \sc\wifi\DataType
     */
    public function setValue( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\wifi {

  class WifiRegisterReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.wifi.WifiRegisterReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\wifi\WifiRegisterReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\wifi\WifiRegisterReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\wifi {

  class WifiRegisterRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.wifi.WifiRegisterRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\wifi\WifiRegisterRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\wifi\WifiRegisterRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\wifi {

  class WifiRegisterLogReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var string */
    public $acip = null;
    
    /**  @var string */
    public $acmac = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.wifi.WifiRegisterLogReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL STRING acip = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "acip";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING acmac = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "acmac";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\wifi\WifiRegisterLogReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\wifi\WifiRegisterLogReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <acip> has a value
     *
     * @return boolean
     */
    public function hasAcip(){
      return $this->_has(2);
    }
    
    /**
     * Clear <acip> value
     *
     * @return \sc\wifi\WifiRegisterLogReq
     */
    public function clearAcip(){
      return $this->_clear(2);
    }
    
    /**
     * Get <acip> value
     *
     * @return string
     */
    public function getAcip(){
      return $this->_get(2);
    }
    
    /**
     * Set <acip> value
     *
     * @param string $value
     * @return \sc\wifi\WifiRegisterLogReq
     */
    public function setAcip( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <acmac> has a value
     *
     * @return boolean
     */
    public function hasAcmac(){
      return $this->_has(3);
    }
    
    /**
     * Clear <acmac> value
     *
     * @return \sc\wifi\WifiRegisterLogReq
     */
    public function clearAcmac(){
      return $this->_clear(3);
    }
    
    /**
     * Get <acmac> value
     *
     * @return string
     */
    public function getAcmac(){
      return $this->_get(3);
    }
    
    /**
     * Set <acmac> value
     *
     * @param string $value
     * @return \sc\wifi\WifiRegisterLogReq
     */
    public function setAcmac( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\wifi {

  class WifiRegisterLogRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.wifi.WifiRegisterLogRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\wifi\WifiRegisterLogRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\wifi\WifiRegisterLogRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\wifi {

  class AuthReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var string */
    public $uuid = null;
    
    /**  @var string */
    public $sid = null;
    
    /**  @var string */
    public $sign = null;
    
    /**  @var string */
    public $mobile = null;
    
    /**  @var int */
    public $cityid = null;
    
    /**  @var int */
    public $provinceid = null;
    
    /**  @var int */
    public $enterpriseid = null;
    
    /**  @var string */
    public $ssid = null;
    
    /**  @var string */
    public $acip = null;
    
    /**  @var string */
    public $userip = null;
    
    /**  @var string */
    public $usermac = null;
    
    /**  @var int */
    public $stamp = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.wifi.AuthReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL STRING uuid = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "uuid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sid = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "sid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING sign = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "sign";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING mobile = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "mobile";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 cityid = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "cityid";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 provinceid = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "provinceid";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 enterpriseid = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "enterpriseid";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING ssid = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "ssid";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING acip = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "acip";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING userip = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "userip";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING usermac = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "usermac";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 stamp = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "stamp";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\wifi\AuthReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\wifi\AuthReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <uuid> has a value
     *
     * @return boolean
     */
    public function hasUuid(){
      return $this->_has(2);
    }
    
    /**
     * Clear <uuid> value
     *
     * @return \sc\wifi\AuthReq
     */
    public function clearUuid(){
      return $this->_clear(2);
    }
    
    /**
     * Get <uuid> value
     *
     * @return string
     */
    public function getUuid(){
      return $this->_get(2);
    }
    
    /**
     * Set <uuid> value
     *
     * @param string $value
     * @return \sc\wifi\AuthReq
     */
    public function setUuid( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <sid> has a value
     *
     * @return boolean
     */
    public function hasSid(){
      return $this->_has(3);
    }
    
    /**
     * Clear <sid> value
     *
     * @return \sc\wifi\AuthReq
     */
    public function clearSid(){
      return $this->_clear(3);
    }
    
    /**
     * Get <sid> value
     *
     * @return string
     */
    public function getSid(){
      return $this->_get(3);
    }
    
    /**
     * Set <sid> value
     *
     * @param string $value
     * @return \sc\wifi\AuthReq
     */
    public function setSid( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <sign> has a value
     *
     * @return boolean
     */
    public function hasSign(){
      return $this->_has(4);
    }
    
    /**
     * Clear <sign> value
     *
     * @return \sc\wifi\AuthReq
     */
    public function clearSign(){
      return $this->_clear(4);
    }
    
    /**
     * Get <sign> value
     *
     * @return string
     */
    public function getSign(){
      return $this->_get(4);
    }
    
    /**
     * Set <sign> value
     *
     * @param string $value
     * @return \sc\wifi\AuthReq
     */
    public function setSign( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <mobile> has a value
     *
     * @return boolean
     */
    public function hasMobile(){
      return $this->_has(5);
    }
    
    /**
     * Clear <mobile> value
     *
     * @return \sc\wifi\AuthReq
     */
    public function clearMobile(){
      return $this->_clear(5);
    }
    
    /**
     * Get <mobile> value
     *
     * @return string
     */
    public function getMobile(){
      return $this->_get(5);
    }
    
    /**
     * Set <mobile> value
     *
     * @param string $value
     * @return \sc\wifi\AuthReq
     */
    public function setMobile( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <cityid> has a value
     *
     * @return boolean
     */
    public function hasCityid(){
      return $this->_has(6);
    }
    
    /**
     * Clear <cityid> value
     *
     * @return \sc\wifi\AuthReq
     */
    public function clearCityid(){
      return $this->_clear(6);
    }
    
    /**
     * Get <cityid> value
     *
     * @return int
     */
    public function getCityid(){
      return $this->_get(6);
    }
    
    /**
     * Set <cityid> value
     *
     * @param int $value
     * @return \sc\wifi\AuthReq
     */
    public function setCityid( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <provinceid> has a value
     *
     * @return boolean
     */
    public function hasProvinceid(){
      return $this->_has(7);
    }
    
    /**
     * Clear <provinceid> value
     *
     * @return \sc\wifi\AuthReq
     */
    public function clearProvinceid(){
      return $this->_clear(7);
    }
    
    /**
     * Get <provinceid> value
     *
     * @return int
     */
    public function getProvinceid(){
      return $this->_get(7);
    }
    
    /**
     * Set <provinceid> value
     *
     * @param int $value
     * @return \sc\wifi\AuthReq
     */
    public function setProvinceid( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <enterpriseid> has a value
     *
     * @return boolean
     */
    public function hasEnterpriseid(){
      return $this->_has(8);
    }
    
    /**
     * Clear <enterpriseid> value
     *
     * @return \sc\wifi\AuthReq
     */
    public function clearEnterpriseid(){
      return $this->_clear(8);
    }
    
    /**
     * Get <enterpriseid> value
     *
     * @return int
     */
    public function getEnterpriseid(){
      return $this->_get(8);
    }
    
    /**
     * Set <enterpriseid> value
     *
     * @param int $value
     * @return \sc\wifi\AuthReq
     */
    public function setEnterpriseid( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <ssid> has a value
     *
     * @return boolean
     */
    public function hasSsid(){
      return $this->_has(9);
    }
    
    /**
     * Clear <ssid> value
     *
     * @return \sc\wifi\AuthReq
     */
    public function clearSsid(){
      return $this->_clear(9);
    }
    
    /**
     * Get <ssid> value
     *
     * @return string
     */
    public function getSsid(){
      return $this->_get(9);
    }
    
    /**
     * Set <ssid> value
     *
     * @param string $value
     * @return \sc\wifi\AuthReq
     */
    public function setSsid( $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <acip> has a value
     *
     * @return boolean
     */
    public function hasAcip(){
      return $this->_has(10);
    }
    
    /**
     * Clear <acip> value
     *
     * @return \sc\wifi\AuthReq
     */
    public function clearAcip(){
      return $this->_clear(10);
    }
    
    /**
     * Get <acip> value
     *
     * @return string
     */
    public function getAcip(){
      return $this->_get(10);
    }
    
    /**
     * Set <acip> value
     *
     * @param string $value
     * @return \sc\wifi\AuthReq
     */
    public function setAcip( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <userip> has a value
     *
     * @return boolean
     */
    public function hasUserip(){
      return $this->_has(11);
    }
    
    /**
     * Clear <userip> value
     *
     * @return \sc\wifi\AuthReq
     */
    public function clearUserip(){
      return $this->_clear(11);
    }
    
    /**
     * Get <userip> value
     *
     * @return string
     */
    public function getUserip(){
      return $this->_get(11);
    }
    
    /**
     * Set <userip> value
     *
     * @param string $value
     * @return \sc\wifi\AuthReq
     */
    public function setUserip( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <usermac> has a value
     *
     * @return boolean
     */
    public function hasUsermac(){
      return $this->_has(12);
    }
    
    /**
     * Clear <usermac> value
     *
     * @return \sc\wifi\AuthReq
     */
    public function clearUsermac(){
      return $this->_clear(12);
    }
    
    /**
     * Get <usermac> value
     *
     * @return string
     */
    public function getUsermac(){
      return $this->_get(12);
    }
    
    /**
     * Set <usermac> value
     *
     * @param string $value
     * @return \sc\wifi\AuthReq
     */
    public function setUsermac( $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <stamp> has a value
     *
     * @return boolean
     */
    public function hasStamp(){
      return $this->_has(13);
    }
    
    /**
     * Clear <stamp> value
     *
     * @return \sc\wifi\AuthReq
     */
    public function clearStamp(){
      return $this->_clear(13);
    }
    
    /**
     * Get <stamp> value
     *
     * @return int
     */
    public function getStamp(){
      return $this->_get(13);
    }
    
    /**
     * Set <stamp> value
     *
     * @param int $value
     * @return \sc\wifi\AuthReq
     */
    public function setStamp( $value){
      return $this->_set(13, $value);
    }
  }
}

namespace sc\wifi {

  class AuthRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.wifi.AuthRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\wifi\AuthRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\wifi\AuthRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\wifi {

  class WifiServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param sc\wifi\WifiReq $input
     */
    public function WifiList(\sc\wifi\WifiReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.wifi.WifiService/WifiList', $argument, '\sc\wifi\WifiRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\wifi\UserWifiMsgReq $input
     */
    public function WifiMsg(\sc\wifi\UserWifiMsgReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.wifi.WifiService/WifiMsg', $argument, '\sc\wifi\UserWifiMsgRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\wifi\WifiRegisterReq $input
     */
    public function WifiRegister(\sc\wifi\WifiRegisterReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.wifi.WifiService/WifiRegister', $argument, '\sc\wifi\WifiRegisterRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\wifi\WifiRegisterLogReq $input
     */
    public function WifiRegisterLog(\sc\wifi\WifiRegisterLogReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.wifi.WifiService/WifiRegisterLog', $argument, '\sc\wifi\WifiRegisterLogRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\wifi\AuthReq $input
     */
    public function Auth(\sc\wifi\AuthReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.wifi.WifiService/Auth', $argument, '\sc\wifi\AuthRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\wifi\ZGVLReq $input
     */
    public function ZGVideoLocation(\sc\wifi\ZGVLReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.wifi.WifiService/ZGVideoLocation', $argument, '\sc\wifi\ZGVLRsp::deserialize', $metadata, $options);
    }
  }
}
