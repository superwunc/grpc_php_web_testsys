<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: Setting.proto
//   Date: 2017-04-19 06:39:09

namespace sc\setting {

  class GetUpdateReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    
    /**  @var int */
    public $lc = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.setting.GetUpdateReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      // OPTIONAL UINT64 lc = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "lc";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\setting\GetUpdateReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\setting\GetUpdateReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <lc> has a value
     *
     * @return boolean
     */
    public function hasLc(){
      return $this->_has(2);
    }
    
    /**
     * Clear <lc> value
     *
     * @return \sc\setting\GetUpdateReq
     */
    public function clearLc(){
      return $this->_clear(2);
    }
    
    /**
     * Get <lc> value
     *
     * @return int
     */
    public function getLc(){
      return $this->_get(2);
    }
    
    /**
     * Set <lc> value
     *
     * @param int $value
     * @return \sc\setting\GetUpdateReq
     */
    public function setLc( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\setting {

  class GetUpdateRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var boolean */
    public $isUpgrade = null;
    
    /**  @var \sc\setting\GetUpdateDataProto */
    public $GetUpdateData = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.setting.GetUpdateRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL isUpgrade = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "isUpgrade";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE GetUpdateData = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "GetUpdateData";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\setting\GetUpdateDataProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\setting\GetUpdateRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\setting\GetUpdateRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\setting\GetUpdateRsp
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\setting\GetUpdateRsp
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <isUpgrade> has a value
     *
     * @return boolean
     */
    public function hasIsUpgrade(){
      return $this->_has(3);
    }
    
    /**
     * Clear <isUpgrade> value
     *
     * @return \sc\setting\GetUpdateRsp
     */
    public function clearIsUpgrade(){
      return $this->_clear(3);
    }
    
    /**
     * Get <isUpgrade> value
     *
     * @return boolean
     */
    public function getIsUpgrade(){
      return $this->_get(3);
    }
    
    /**
     * Set <isUpgrade> value
     *
     * @param boolean $value
     * @return \sc\setting\GetUpdateRsp
     */
    public function setIsUpgrade( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <GetUpdateData> has a value
     *
     * @return boolean
     */
    public function hasGetUpdateData(){
      return $this->_has(4);
    }
    
    /**
     * Clear <GetUpdateData> value
     *
     * @return \sc\setting\GetUpdateRsp
     */
    public function clearGetUpdateData(){
      return $this->_clear(4);
    }
    
    /**
     * Get <GetUpdateData> value
     *
     * @return \sc\setting\GetUpdateDataProto
     */
    public function getGetUpdateData(){
      return $this->_get(4);
    }
    
    /**
     * Set <GetUpdateData> value
     *
     * @param \sc\setting\GetUpdateDataProto $value
     * @return \sc\setting\GetUpdateRsp
     */
    public function setGetUpdateData(\sc\setting\GetUpdateDataProto $value){
      return $this->_set(4, $value);
    }
  }
}

namespace sc\setting {

  class GetUpdateDataProto extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $id = null;
    
    /**  @var int */
    public $lc = null;
    
    /**  @var int */
    public $isForced = null;
    
    /**  @var string */
    public $text = null;
    
    /**  @var string */
    public $url = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.setting.GetUpdateDataProto');

      // OPTIONAL UINT64 id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT64 lc = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "lc";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL UINT32 isForced = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "isForced";
      $f->type      = \DrSlump\Protobuf::TYPE_UINT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING text = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "text";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING url = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "url";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id> has a value
     *
     * @return boolean
     */
    public function hasId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id> value
     *
     * @return \sc\setting\GetUpdateDataProto
     */
    public function clearId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id> value
     *
     * @return int
     */
    public function getId(){
      return $this->_get(1);
    }
    
    /**
     * Set <id> value
     *
     * @param int $value
     * @return \sc\setting\GetUpdateDataProto
     */
    public function setId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <lc> has a value
     *
     * @return boolean
     */
    public function hasLc(){
      return $this->_has(2);
    }
    
    /**
     * Clear <lc> value
     *
     * @return \sc\setting\GetUpdateDataProto
     */
    public function clearLc(){
      return $this->_clear(2);
    }
    
    /**
     * Get <lc> value
     *
     * @return int
     */
    public function getLc(){
      return $this->_get(2);
    }
    
    /**
     * Set <lc> value
     *
     * @param int $value
     * @return \sc\setting\GetUpdateDataProto
     */
    public function setLc( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <isForced> has a value
     *
     * @return boolean
     */
    public function hasIsForced(){
      return $this->_has(3);
    }
    
    /**
     * Clear <isForced> value
     *
     * @return \sc\setting\GetUpdateDataProto
     */
    public function clearIsForced(){
      return $this->_clear(3);
    }
    
    /**
     * Get <isForced> value
     *
     * @return int
     */
    public function getIsForced(){
      return $this->_get(3);
    }
    
    /**
     * Set <isForced> value
     *
     * @param int $value
     * @return \sc\setting\GetUpdateDataProto
     */
    public function setIsForced( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <text> has a value
     *
     * @return boolean
     */
    public function hasText(){
      return $this->_has(4);
    }
    
    /**
     * Clear <text> value
     *
     * @return \sc\setting\GetUpdateDataProto
     */
    public function clearText(){
      return $this->_clear(4);
    }
    
    /**
     * Get <text> value
     *
     * @return string
     */
    public function getText(){
      return $this->_get(4);
    }
    
    /**
     * Set <text> value
     *
     * @param string $value
     * @return \sc\setting\GetUpdateDataProto
     */
    public function setText( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <url> has a value
     *
     * @return boolean
     */
    public function hasUrl(){
      return $this->_has(5);
    }
    
    /**
     * Clear <url> value
     *
     * @return \sc\setting\GetUpdateDataProto
     */
    public function clearUrl(){
      return $this->_clear(5);
    }
    
    /**
     * Get <url> value
     *
     * @return string
     */
    public function getUrl(){
      return $this->_get(5);
    }
    
    /**
     * Set <url> value
     *
     * @param string $value
     * @return \sc\setting\GetUpdateDataProto
     */
    public function setUrl( $value){
      return $this->_set(5, $value);
    }
  }
}

namespace sc\setting {

  class RecommendGiftReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.setting.RecommendGiftReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\setting\RecommendGiftReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\setting\RecommendGiftReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\setting {

  class RecommendGiftRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var string */
    public $title = null;
    
    /**  @var \sc\setting\RecommendGiftDataProto */
    public $recommendGiftData = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.setting.RecommendGiftRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL STRING title = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "title";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE recommendGiftData = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "recommendGiftData";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\setting\RecommendGiftDataProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\setting\RecommendGiftRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\setting\RecommendGiftRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <title> has a value
     *
     * @return boolean
     */
    public function hasTitle(){
      return $this->_has(2);
    }
    
    /**
     * Clear <title> value
     *
     * @return \sc\setting\RecommendGiftRsp
     */
    public function clearTitle(){
      return $this->_clear(2);
    }
    
    /**
     * Get <title> value
     *
     * @return string
     */
    public function getTitle(){
      return $this->_get(2);
    }
    
    /**
     * Set <title> value
     *
     * @param string $value
     * @return \sc\setting\RecommendGiftRsp
     */
    public function setTitle( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <recommendGiftData> has a value
     *
     * @return boolean
     */
    public function hasRecommendGiftData(){
      return $this->_has(3);
    }
    
    /**
     * Clear <recommendGiftData> value
     *
     * @return \sc\setting\RecommendGiftRsp
     */
    public function clearRecommendGiftData(){
      return $this->_clear(3);
    }
    
    /**
     * Get <recommendGiftData> value
     *
     * @return \sc\setting\RecommendGiftDataProto
     */
    public function getRecommendGiftData(){
      return $this->_get(3);
    }
    
    /**
     * Set <recommendGiftData> value
     *
     * @param \sc\setting\RecommendGiftDataProto $value
     * @return \sc\setting\RecommendGiftRsp
     */
    public function setRecommendGiftData(\sc\setting\RecommendGiftDataProto $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\setting {

  class RecommendGiftDataProto extends \DrSlump\Protobuf\Message {

    /**  @var boolean */
    public $userRecommendGiftButton = null;
    
    /**  @var string */
    public $userRecommendGiftUrl = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.setting.RecommendGiftDataProto');

      // OPTIONAL BOOL userRecommendGiftButton = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "userRecommendGiftButton";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING userRecommendGiftUrl = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "userRecommendGiftUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <userRecommendGiftButton> has a value
     *
     * @return boolean
     */
    public function hasUserRecommendGiftButton(){
      return $this->_has(1);
    }
    
    /**
     * Clear <userRecommendGiftButton> value
     *
     * @return \sc\setting\RecommendGiftDataProto
     */
    public function clearUserRecommendGiftButton(){
      return $this->_clear(1);
    }
    
    /**
     * Get <userRecommendGiftButton> value
     *
     * @return boolean
     */
    public function getUserRecommendGiftButton(){
      return $this->_get(1);
    }
    
    /**
     * Set <userRecommendGiftButton> value
     *
     * @param boolean $value
     * @return \sc\setting\RecommendGiftDataProto
     */
    public function setUserRecommendGiftButton( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <userRecommendGiftUrl> has a value
     *
     * @return boolean
     */
    public function hasUserRecommendGiftUrl(){
      return $this->_has(2);
    }
    
    /**
     * Clear <userRecommendGiftUrl> value
     *
     * @return \sc\setting\RecommendGiftDataProto
     */
    public function clearUserRecommendGiftUrl(){
      return $this->_clear(2);
    }
    
    /**
     * Get <userRecommendGiftUrl> value
     *
     * @return string
     */
    public function getUserRecommendGiftUrl(){
      return $this->_get(2);
    }
    
    /**
     * Set <userRecommendGiftUrl> value
     *
     * @param string $value
     * @return \sc\setting\RecommendGiftDataProto
     */
    public function setUserRecommendGiftUrl( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\setting {

  class GetSSReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.setting.GetSSReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\setting\GetSSReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\setting\GetSSReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\setting {

  class GetSSRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var string */
    public $scoreStoreUrl = null;
    
    /**  @var boolean */
    public $switch = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.setting.GetSSRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL STRING scoreStoreUrl = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "scoreStoreUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL switch = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "switch";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\setting\GetSSRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\setting\GetSSRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <scoreStoreUrl> has a value
     *
     * @return boolean
     */
    public function hasScoreStoreUrl(){
      return $this->_has(2);
    }
    
    /**
     * Clear <scoreStoreUrl> value
     *
     * @return \sc\setting\GetSSRsp
     */
    public function clearScoreStoreUrl(){
      return $this->_clear(2);
    }
    
    /**
     * Get <scoreStoreUrl> value
     *
     * @return string
     */
    public function getScoreStoreUrl(){
      return $this->_get(2);
    }
    
    /**
     * Set <scoreStoreUrl> value
     *
     * @param string $value
     * @return \sc\setting\GetSSRsp
     */
    public function setScoreStoreUrl( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <switch> has a value
     *
     * @return boolean
     */
    public function hasSwitch(){
      return $this->_has(3);
    }
    
    /**
     * Clear <switch> value
     *
     * @return \sc\setting\GetSSRsp
     */
    public function clearSwitch(){
      return $this->_clear(3);
    }
    
    /**
     * Get <switch> value
     *
     * @return boolean
     */
    public function getSwitch(){
      return $this->_get(3);
    }
    
    /**
     * Set <switch> value
     *
     * @param boolean $value
     * @return \sc\setting\GetSSRsp
     */
    public function setSwitch( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\setting {

  class GetCISSReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.setting.GetCISSReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\setting\GetCISSReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\setting\GetCISSReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\setting {

  class GetCISSRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var string */
    public $scoreStoreUrl = null;
    
    /**  @var boolean */
    public $switch = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.setting.GetCISSRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL STRING scoreStoreUrl = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "scoreStoreUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL switch = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "switch";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\setting\GetCISSRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\setting\GetCISSRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <scoreStoreUrl> has a value
     *
     * @return boolean
     */
    public function hasScoreStoreUrl(){
      return $this->_has(2);
    }
    
    /**
     * Clear <scoreStoreUrl> value
     *
     * @return \sc\setting\GetCISSRsp
     */
    public function clearScoreStoreUrl(){
      return $this->_clear(2);
    }
    
    /**
     * Get <scoreStoreUrl> value
     *
     * @return string
     */
    public function getScoreStoreUrl(){
      return $this->_get(2);
    }
    
    /**
     * Set <scoreStoreUrl> value
     *
     * @param string $value
     * @return \sc\setting\GetCISSRsp
     */
    public function setScoreStoreUrl( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <switch> has a value
     *
     * @return boolean
     */
    public function hasSwitch(){
      return $this->_has(3);
    }
    
    /**
     * Clear <switch> value
     *
     * @return \sc\setting\GetCISSRsp
     */
    public function clearSwitch(){
      return $this->_clear(3);
    }
    
    /**
     * Get <switch> value
     *
     * @return boolean
     */
    public function getSwitch(){
      return $this->_get(3);
    }
    
    /**
     * Set <switch> value
     *
     * @param boolean $value
     * @return \sc\setting\GetCISSRsp
     */
    public function setSwitch( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace sc\setting {

  class CommSettingReq extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\Comm */
    public $comm = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.setting.CommSettingReq');

      // OPTIONAL MESSAGE comm = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "comm";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\Comm';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <comm> has a value
     *
     * @return boolean
     */
    public function hasComm(){
      return $this->_has(1);
    }
    
    /**
     * Clear <comm> value
     *
     * @return \sc\setting\CommSettingReq
     */
    public function clearComm(){
      return $this->_clear(1);
    }
    
    /**
     * Get <comm> value
     *
     * @return \sc\comm\Comm
     */
    public function getComm(){
      return $this->_get(1);
    }
    
    /**
     * Set <comm> value
     *
     * @param \sc\comm\Comm $value
     * @return \sc\setting\CommSettingReq
     */
    public function setComm(\sc\comm\Comm $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\setting {

  class CommSettingRsp extends \DrSlump\Protobuf\Message {

    /**  @var \sc\comm\State */
    public $state = null;
    
    /**  @var \sc\setting\RecommendGiftDataProto */
    public $recommendGiftData = null;
    
    /**  @var \sc\setting\SSProto */
    public $ss = null;
    
    /**  @var \sc\setting\CISSProto */
    public $ciss = null;
    
    /**  @var \sc\setting\LotteryProto */
    public $lottery = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.setting.CommSettingRsp');

      // OPTIONAL MESSAGE state = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\comm\State';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE recommendGiftData = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "recommendGiftData";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\setting\RecommendGiftDataProto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE ss = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "ss";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\setting\SSProto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE ciss = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "ciss";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\setting\CISSProto';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE lottery = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "lottery";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\sc\setting\LotteryProto';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <state> has a value
     *
     * @return boolean
     */
    public function hasState(){
      return $this->_has(1);
    }
    
    /**
     * Clear <state> value
     *
     * @return \sc\setting\CommSettingRsp
     */
    public function clearState(){
      return $this->_clear(1);
    }
    
    /**
     * Get <state> value
     *
     * @return \sc\comm\State
     */
    public function getState(){
      return $this->_get(1);
    }
    
    /**
     * Set <state> value
     *
     * @param \sc\comm\State $value
     * @return \sc\setting\CommSettingRsp
     */
    public function setState(\sc\comm\State $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <recommendGiftData> has a value
     *
     * @return boolean
     */
    public function hasRecommendGiftData(){
      return $this->_has(2);
    }
    
    /**
     * Clear <recommendGiftData> value
     *
     * @return \sc\setting\CommSettingRsp
     */
    public function clearRecommendGiftData(){
      return $this->_clear(2);
    }
    
    /**
     * Get <recommendGiftData> value
     *
     * @return \sc\setting\RecommendGiftDataProto
     */
    public function getRecommendGiftData(){
      return $this->_get(2);
    }
    
    /**
     * Set <recommendGiftData> value
     *
     * @param \sc\setting\RecommendGiftDataProto $value
     * @return \sc\setting\CommSettingRsp
     */
    public function setRecommendGiftData(\sc\setting\RecommendGiftDataProto $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <ss> has a value
     *
     * @return boolean
     */
    public function hasSs(){
      return $this->_has(3);
    }
    
    /**
     * Clear <ss> value
     *
     * @return \sc\setting\CommSettingRsp
     */
    public function clearSs(){
      return $this->_clear(3);
    }
    
    /**
     * Get <ss> value
     *
     * @return \sc\setting\SSProto
     */
    public function getSs(){
      return $this->_get(3);
    }
    
    /**
     * Set <ss> value
     *
     * @param \sc\setting\SSProto $value
     * @return \sc\setting\CommSettingRsp
     */
    public function setSs(\sc\setting\SSProto $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <ciss> has a value
     *
     * @return boolean
     */
    public function hasCiss(){
      return $this->_has(4);
    }
    
    /**
     * Clear <ciss> value
     *
     * @return \sc\setting\CommSettingRsp
     */
    public function clearCiss(){
      return $this->_clear(4);
    }
    
    /**
     * Get <ciss> value
     *
     * @return \sc\setting\CISSProto
     */
    public function getCiss(){
      return $this->_get(4);
    }
    
    /**
     * Set <ciss> value
     *
     * @param \sc\setting\CISSProto $value
     * @return \sc\setting\CommSettingRsp
     */
    public function setCiss(\sc\setting\CISSProto $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <lottery> has a value
     *
     * @return boolean
     */
    public function hasLottery(){
      return $this->_has(5);
    }
    
    /**
     * Clear <lottery> value
     *
     * @return \sc\setting\CommSettingRsp
     */
    public function clearLottery(){
      return $this->_clear(5);
    }
    
    /**
     * Get <lottery> value
     *
     * @return \sc\setting\LotteryProto
     */
    public function getLottery(){
      return $this->_get(5);
    }
    
    /**
     * Set <lottery> value
     *
     * @param \sc\setting\LotteryProto $value
     * @return \sc\setting\CommSettingRsp
     */
    public function setLottery(\sc\setting\LotteryProto $value){
      return $this->_set(5, $value);
    }
  }
}

namespace sc\setting {

  class SSProto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $scoreStoreUrl = null;
    
    /**  @var boolean */
    public $switch = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.setting.SSProto');

      // OPTIONAL STRING scoreStoreUrl = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "scoreStoreUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL switch = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "switch";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <scoreStoreUrl> has a value
     *
     * @return boolean
     */
    public function hasScoreStoreUrl(){
      return $this->_has(1);
    }
    
    /**
     * Clear <scoreStoreUrl> value
     *
     * @return \sc\setting\SSProto
     */
    public function clearScoreStoreUrl(){
      return $this->_clear(1);
    }
    
    /**
     * Get <scoreStoreUrl> value
     *
     * @return string
     */
    public function getScoreStoreUrl(){
      return $this->_get(1);
    }
    
    /**
     * Set <scoreStoreUrl> value
     *
     * @param string $value
     * @return \sc\setting\SSProto
     */
    public function setScoreStoreUrl( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <switch> has a value
     *
     * @return boolean
     */
    public function hasSwitch(){
      return $this->_has(2);
    }
    
    /**
     * Clear <switch> value
     *
     * @return \sc\setting\SSProto
     */
    public function clearSwitch(){
      return $this->_clear(2);
    }
    
    /**
     * Get <switch> value
     *
     * @return boolean
     */
    public function getSwitch(){
      return $this->_get(2);
    }
    
    /**
     * Set <switch> value
     *
     * @param boolean $value
     * @return \sc\setting\SSProto
     */
    public function setSwitch( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\setting {

  class CISSProto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $scoreStoreUrl = null;
    
    /**  @var boolean */
    public $switch = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.setting.CISSProto');

      // OPTIONAL STRING scoreStoreUrl = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "scoreStoreUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL switch = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "switch";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <scoreStoreUrl> has a value
     *
     * @return boolean
     */
    public function hasScoreStoreUrl(){
      return $this->_has(1);
    }
    
    /**
     * Clear <scoreStoreUrl> value
     *
     * @return \sc\setting\CISSProto
     */
    public function clearScoreStoreUrl(){
      return $this->_clear(1);
    }
    
    /**
     * Get <scoreStoreUrl> value
     *
     * @return string
     */
    public function getScoreStoreUrl(){
      return $this->_get(1);
    }
    
    /**
     * Set <scoreStoreUrl> value
     *
     * @param string $value
     * @return \sc\setting\CISSProto
     */
    public function setScoreStoreUrl( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <switch> has a value
     *
     * @return boolean
     */
    public function hasSwitch(){
      return $this->_has(2);
    }
    
    /**
     * Clear <switch> value
     *
     * @return \sc\setting\CISSProto
     */
    public function clearSwitch(){
      return $this->_clear(2);
    }
    
    /**
     * Get <switch> value
     *
     * @return boolean
     */
    public function getSwitch(){
      return $this->_get(2);
    }
    
    /**
     * Set <switch> value
     *
     * @param boolean $value
     * @return \sc\setting\CISSProto
     */
    public function setSwitch( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace sc\setting {

  class LotteryProto extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $lotteryUrl = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'sc.setting.LotteryProto');

      // OPTIONAL STRING lotteryUrl = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "lotteryUrl";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <lotteryUrl> has a value
     *
     * @return boolean
     */
    public function hasLotteryUrl(){
      return $this->_has(1);
    }
    
    /**
     * Clear <lotteryUrl> value
     *
     * @return \sc\setting\LotteryProto
     */
    public function clearLotteryUrl(){
      return $this->_clear(1);
    }
    
    /**
     * Get <lotteryUrl> value
     *
     * @return string
     */
    public function getLotteryUrl(){
      return $this->_get(1);
    }
    
    /**
     * Set <lotteryUrl> value
     *
     * @param string $value
     * @return \sc\setting\LotteryProto
     */
    public function setLotteryUrl( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace sc\setting {

  class SettingServiceClient extends \Grpc\BaseStub {

    public function __construct($hostname, $opts, $channel = null) {
      parent::__construct($hostname, $opts, $channel);
    }
    /**
     * @param sc\setting\GetUpdateReq $input
     */
    public function GetUpdate(\sc\setting\GetUpdateReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.setting.SettingService/GetUpdate', $argument, '\sc\setting\GetUpdateRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\setting\RecommendGiftReq $input
     */
    public function RecommendGift(\sc\setting\RecommendGiftReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.setting.SettingService/RecommendGift', $argument, '\sc\setting\RecommendGiftRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\setting\GetSSReq $input
     */
    public function GetScoreStore(\sc\setting\GetSSReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.setting.SettingService/GetScoreStore', $argument, '\sc\setting\GetSSRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\setting\GetCISSReq $input
     */
    public function GetCheckInScoreStore(\sc\setting\GetCISSReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.setting.SettingService/GetCheckInScoreStore', $argument, '\sc\setting\GetCISSRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\setting\GetCISSReq $input
     */
    public function test(\sc\setting\GetCISSReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.setting.SettingService/test', $argument, '\sc\setting\GetCISSRsp::deserialize', $metadata, $options);
    }
    /**
     * @param sc\setting\CommSettingReq $input
     */
    public function GetSetting(\sc\setting\CommSettingReq $argument, $metadata = array(), $options = array()) {
      return $this->_simpleRequest('/sc.setting.SettingService/GetSetting', $argument, '\sc\setting\CommSettingRsp::deserialize', $metadata, $options);
    }
  }
}
